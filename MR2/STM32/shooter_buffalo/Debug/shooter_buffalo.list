
shooter_buffalo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e68  08005e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e68  08005e68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e68  08005e68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08005e7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005e7c  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b293  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e00  00000000  00000000  0002b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7f  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be8b  00000000  00000000  000460ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1e1  00000000  00000000  00051f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc15b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  000dc1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a5c 	.word	0x08005a5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005a5c 	.word	0x08005a5c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2iz>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30f      	bcc.n	800106e <__aeabi_f2iz+0x2a>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d90d      	bls.n	8001074 <__aeabi_f2iz+0x30>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001064:	fa23 f002 	lsr.w	r0, r3, r2
 8001068:	bf18      	it	ne
 800106a:	4240      	negne	r0, r0
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr
 8001074:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001078:	d101      	bne.n	800107e <__aeabi_f2iz+0x3a>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	d105      	bne.n	800108a <__aeabi_f2iz+0x46>
 800107e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001082:	bf08      	it	eq
 8001084:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr

08001090 <__aeabi_f2uiz>:
 8001090:	0042      	lsls	r2, r0, #1
 8001092:	d20e      	bcs.n	80010b2 <__aeabi_f2uiz+0x22>
 8001094:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001098:	d30b      	bcc.n	80010b2 <__aeabi_f2uiz+0x22>
 800109a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800109e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a2:	d409      	bmi.n	80010b8 <__aeabi_f2uiz+0x28>
 80010a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ac:	fa23 f002 	lsr.w	r0, r3, r2
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2uiz+0x32>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d102      	bne.n	80010c8 <__aeabi_f2uiz+0x38>
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c6:	4770      	bx	lr
 80010c8:	f04f 0000 	mov.w	r0, #0
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <PID_Init>:
 #include "PID.h"

void PID_Init(PIDController *pid, int N_input) {//nMotor is the number of motor to control
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]

	/* Clear controller variables */
	for(int i = 0;i < N_input; i++){
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e025      	b.n	800112c <PID_Init+0x5c>
		pid->integrator[i] = 0.0f;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	3206      	adds	r2, #6
 80010e6:	f04f 0100 	mov.w	r1, #0
 80010ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevError[i]  = 0.0f;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	320a      	adds	r2, #10
 80010f4:	f04f 0100 	mov.w	r1, #0
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->differentiator[i]  = 0.0f;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	320e      	adds	r2, #14
 8001102:	f04f 0100 	mov.w	r1, #0
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevMeasurement[i] = 0.0f;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	3212      	adds	r2, #18
 8001110:	f04f 0100 	mov.w	r1, #0
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->out[i] = 0.0f;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	3216      	adds	r2, #22
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0;i < N_input; i++){
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbd5      	blt.n	80010e0 <PID_Init+0x10>
	}


}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <PID>:

float PID(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i){// "i" input identity
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
	/*
	* -------------------------------------Error signal------------------------------------------
	*/
	float error = setpoint - measurement;;
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f7ff fca7 	bl	8000aa4 <__aeabi_fsub>
 8001156:	4603      	mov	r3, r0
 8001158:	617b      	str	r3, [r7, #20]
	/*
	* Proportional
	*/
    float proportional = Kp * error;
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f7ff fdab 	bl	8000cb8 <__aeabi_fmul>
 8001162:	4603      	mov	r3, r0
 8001164:	613b      	str	r3, [r7, #16]
	/*
	* ----------------------------------------Integral-----------------------------------------------
	*/
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800116a:	3206      	adds	r2, #6
 800116c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001170:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001176:	f7ff fd9f 	bl	8000cb8 <__aeabi_fmul>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f7ff fd97 	bl	8000cb8 <__aeabi_fmul>
 800118a:	4603      	mov	r3, r0
 800118c:	461d      	mov	r5, r3
    					* (error + pid->prevError[i]);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001192:	320a      	adds	r2, #10
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	6979      	ldr	r1, [r7, #20]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fc84 	bl	8000aa8 <__addsf3>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4628      	mov	r0, r5
 80011a6:	f7ff fd87 	bl	8000cb8 <__aeabi_fmul>
 80011aa:	4603      	mov	r3, r0
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 80011ac:	4619      	mov	r1, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fc7a 	bl	8000aa8 <__addsf3>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011bc:	3206      	adds	r2, #6
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator[i] > pid->limMaxInt) {
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c6:	3206      	adds	r2, #6
 80011c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4610      	mov	r0, r2
 80011d4:	f7ff ff2c 	bl	8001030 <__aeabi_fcmpgt>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <PID+0xae>
        pid->integrator[i] = pid->limMaxInt;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e6:	3206      	adds	r2, #6
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011ec:	e01f      	b.n	800122e <PID+0xee>
    }
    else if (pid->integrator[i] < pid->limMinInt) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011f2:	3206      	adds	r2, #6
 80011f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f7ff fef8 	bl	8000ff4 <__aeabi_fcmplt>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <PID+0xda>
        pid->integrator[i] = pid->limMinInt;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68d9      	ldr	r1, [r3, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001212:	3206      	adds	r2, #6
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001218:	e009      	b.n	800122e <PID+0xee>
    }
    else{
    	pid->integrator[i] = pid->integrator[i];
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121e:	3206      	adds	r2, #6
 8001220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001228:	3206      	adds	r2, #6
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/*
	* Derivative (band-limited differentator)
	*/

    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	4619      	mov	r1, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc38 	bl	8000aa8 <__addsf3>
 8001238:	4603      	mov	r3, r0
 800123a:	461c      	mov	r4, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001240:	3212      	adds	r2, #18
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fc2b 	bl	8000aa4 <__aeabi_fsub>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fd30 	bl	8000cb8 <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	461c      	mov	r4, r3
                        	 + (2.0f * pid->tau - pid->T) * pid->differentiator[i])
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc20 	bl	8000aa8 <__addsf3>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4619      	mov	r1, r3
 8001272:	4610      	mov	r0, r2
 8001274:	f7ff fc16 	bl	8000aa4 <__aeabi_fsub>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001280:	320e      	adds	r2, #14
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fd16 	bl	8000cb8 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fc09 	bl	8000aa8 <__addsf3>
 8001296:	4603      	mov	r3, r0
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001298:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
							 / (2.0f * pid->tau + pid->T);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fc00 	bl	8000aa8 <__addsf3>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f7ff fbf8 	bl	8000aa8 <__addsf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fdaf 	bl	8000e20 <__aeabi_fdiv>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4619      	mov	r1, r3
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ca:	320e      	adds	r2, #14
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*
	* Compute output and apply limits
	*/
    pid->out[i] = proportional + pid->integrator[i] + pid->differentiator[i];
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d4:	3206      	adds	r2, #6
 80012d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012da:	6939      	ldr	r1, [r7, #16]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fbe3 	bl	8000aa8 <__addsf3>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4618      	mov	r0, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ea:	320e      	adds	r2, #14
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fbd9 	bl	8000aa8 <__addsf3>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4619      	mov	r1, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	3216      	adds	r2, #22
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    //sat[i] = pid->out[i];
    if (pid->out[i] > pid->limMax) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001308:	3216      	adds	r2, #22
 800130a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f7ff fe8b 	bl	8001030 <__aeabi_fcmpgt>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <PID+0x1f0>
        pid->out[i] = pid->limMax;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6899      	ldr	r1, [r3, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	3216      	adds	r2, #22
 800132a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800132e:	e01f      	b.n	8001370 <PID+0x230>
    }
    else if (pid->out[i] < pid->limMin) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001334:	3216      	adds	r2, #22
 8001336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4619      	mov	r1, r3
 8001340:	4610      	mov	r0, r2
 8001342:	f7ff fe57 	bl	8000ff4 <__aeabi_fcmplt>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <PID+0x21c>
        pid->out[i] = pid->limMin;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001354:	3216      	adds	r2, #22
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800135a:	e009      	b.n	8001370 <PID+0x230>
    }
    else{
    	pid->out[i] = pid->out[i];
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001360:	3216      	adds	r2, #22
 8001362:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800136a:	3216      	adds	r2, #22
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Store error and measurement for later use */
    pid->prevError[i]       = error;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001374:	320a      	adds	r2, #10
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pid->prevMeasurement[i] = measurement;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001380:	3212      	adds	r2, #18
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Return controller output */
    return pid->out[i];
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800138c:	3216      	adds	r2, #22
 800138e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800139c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_CAN_Init+0x9c>)
 80013a4:	4a25      	ldr	r2, [pc, #148]	; (800143c <MX_CAN_Init+0xa0>)
 80013a6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_CAN_Init+0x9c>)
 80013aa:	2209      	movs	r2, #9
 80013ac:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_CAN_Init+0x9c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_CAN_Init+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_CAN_Init+0x9c>)
 80013bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_CAN_Init+0x9c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_CAN_Init+0x9c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_CAN_Init+0x9c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_CAN_Init+0x9c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_CAN_Init+0x9c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_CAN_Init+0x9c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_CAN_Init+0x9c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <MX_CAN_Init+0x9c>)
 80013ee:	f001 f83d 	bl	800246c <HAL_CAN_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013f8:	f000 fcb8 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
    	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8001400:	230a      	movs	r3, #10
 8001402:	617b      	str	r3, [r7, #20]
    	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
    	canfilterconfig.FilterIdHigh = 0x00000;  //407<<5 0x407 << 5
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
    	canfilterconfig.FilterIdLow = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
    	canfilterconfig.FilterMaskIdHigh =0x00000;  //407<<5
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
    	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
    	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
    	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    	canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24

    	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_CAN_Init+0x9c>)
 800142a:	f001 f91a 	bl	8002662 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000028 	.word	0x20000028
 800143c:	40006400 	.word	0x40006400

08001440 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a29      	ldr	r2, [pc, #164]	; (8001500 <HAL_CAN_MspInit+0xc0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d14b      	bne.n	80014f8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_CAN_MspInit+0xc4>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_CAN_MspInit+0xc4>)
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146a:	61d3      	str	r3, [r2, #28]
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_CAN_MspInit+0xc4>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_CAN_MspInit+0xc4>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_CAN_MspInit+0xc4>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_CAN_MspInit+0xc4>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <HAL_CAN_MspInit+0xc8>)
 80014a6:	f001 fe61 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4812      	ldr	r0, [pc, #72]	; (8001508 <HAL_CAN_MspInit+0xc8>)
 80014c0:	f001 fe54 	bl	800316c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_CAN_MspInit+0xcc>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_CAN_MspInit+0xcc>)
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2015      	movs	r0, #21
 80014ee:	f001 fe06 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014f2:	2015      	movs	r0, #21
 80014f4:	f001 fe1f 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40006400 	.word	0x40006400
 8001504:	40021000 	.word	0x40021000
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40010000 	.word	0x40010000

08001510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_GPIO_Init+0x58>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <MX_GPIO_Init+0x58>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_GPIO_Init+0x58>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_GPIO_Init+0x58>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <MX_GPIO_Init+0x58>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_GPIO_Init+0x58>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_GPIO_Init+0x58>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <MX_GPIO_Init+0x58>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <MX_GPIO_Init+0x58>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000
 800156c:	00000000 	.word	0x00000000

08001570 <Motors_RPS>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float Motors_RPS( int j,float SampleTime, float N_round)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]

	new_count[Motor2] = TIM3->CNT;
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <Motors_RPS+0x1d0>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b70      	ldr	r3, [pc, #448]	; (8001744 <Motors_RPS+0x1d4>)
 8001584:	805a      	strh	r2, [r3, #2]
	new_count[Motor1] = TIM4->CNT;
 8001586:	4b70      	ldr	r3, [pc, #448]	; (8001748 <Motors_RPS+0x1d8>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <Motors_RPS+0x1d4>)
 800158e:	801a      	strh	r2, [r3, #0]
	count_state[Motor2] = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8001590:	4b6e      	ldr	r3, [pc, #440]	; (800174c <Motors_RPS+0x1dc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b10      	cmp	r3, #16
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <Motors_RPS+0x1e0>)
 80015a8:	705a      	strb	r2, [r3, #1]
	count_state[Motor1] = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <Motors_RPS+0x1e4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	4b63      	ldr	r3, [pc, #396]	; (8001750 <Motors_RPS+0x1e0>)
 80015c2:	701a      	strb	r2, [r3, #0]

	if (count_state[j])
 80015c4:	4a62      	ldr	r2, [pc, #392]	; (8001750 <Motors_RPS+0x1e0>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d045      	beq.n	800165c <Motors_RPS+0xec>
	{
		if (new_count[j] <= count[j])
 80015d0:	4a5c      	ldr	r2, [pc, #368]	; (8001744 <Motors_RPS+0x1d4>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015d8:	495f      	ldr	r1, [pc, #380]	; (8001758 <Motors_RPS+0x1e8>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d80e      	bhi.n	8001602 <Motors_RPS+0x92>
		{ // Check for counter underflow
			diff[j] = count[j] - new_count[j];
 80015e4:	4a5c      	ldr	r2, [pc, #368]	; (8001758 <Motors_RPS+0x1e8>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015ec:	4955      	ldr	r1, [pc, #340]	; (8001744 <Motors_RPS+0x1d4>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b299      	uxth	r1, r3
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <Motors_RPS+0x1ec>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001600:	e00d      	b.n	800161e <Motors_RPS+0xae>
		}
		else
		{
			diff[j] = (65536 - new_count[j]) + count[j];
 8001602:	4a55      	ldr	r2, [pc, #340]	; (8001758 <Motors_RPS+0x1e8>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800160a:	494e      	ldr	r1, [pc, #312]	; (8001744 <Motors_RPS+0x1d4>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	b299      	uxth	r1, r3
 8001616:	4a51      	ldr	r2, [pc, #324]	; (800175c <Motors_RPS+0x1ec>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime)*-1;
 800161e:	4a4f      	ldr	r2, [pc, #316]	; (800175c <Motors_RPS+0x1ec>)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff faee 	bl	8000c08 <__aeabi_ui2f>
 800162c:	4603      	mov	r3, r0
 800162e:	494c      	ldr	r1, [pc, #304]	; (8001760 <Motors_RPS+0x1f0>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb41 	bl	8000cb8 <__aeabi_fmul>
 8001636:	4603      	mov	r3, r0
 8001638:	461c      	mov	r4, r3
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fb3b 	bl	8000cb8 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	4619      	mov	r1, r3
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff fbea 	bl	8000e20 <__aeabi_fdiv>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001652:	4944      	ldr	r1, [pc, #272]	; (8001764 <Motors_RPS+0x1f4>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800165a:	e043      	b.n	80016e4 <Motors_RPS+0x174>
	}
	else
	{
		if (new_count[j] >= count[j])
 800165c:	4a39      	ldr	r2, [pc, #228]	; (8001744 <Motors_RPS+0x1d4>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001664:	493c      	ldr	r1, [pc, #240]	; (8001758 <Motors_RPS+0x1e8>)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800166c:	429a      	cmp	r2, r3
 800166e:	d30e      	bcc.n	800168e <Motors_RPS+0x11e>
		{ // Check for counter overflow
			diff[j] = new_count[j] - count[j];
 8001670:	4a34      	ldr	r2, [pc, #208]	; (8001744 <Motors_RPS+0x1d4>)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001678:	4937      	ldr	r1, [pc, #220]	; (8001758 <Motors_RPS+0x1e8>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b299      	uxth	r1, r3
 8001684:	4a35      	ldr	r2, [pc, #212]	; (800175c <Motors_RPS+0x1ec>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800168c:	e00d      	b.n	80016aa <Motors_RPS+0x13a>
		}
		else
		{
			diff[j] = (65536 - count[j]) + new_count[j];
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <Motors_RPS+0x1d4>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001696:	4930      	ldr	r1, [pc, #192]	; (8001758 <Motors_RPS+0x1e8>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b299      	uxth	r1, r3
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <Motors_RPS+0x1ec>)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime);
 80016aa:	4a2c      	ldr	r2, [pc, #176]	; (800175c <Motors_RPS+0x1ec>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff faa8 	bl	8000c08 <__aeabi_ui2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4929      	ldr	r1, [pc, #164]	; (8001760 <Motors_RPS+0x1f0>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fafb 	bl	8000cb8 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461c      	mov	r4, r3
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff faf5 	bl	8000cb8 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff fba4 	bl	8000e20 <__aeabi_fdiv>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4a21      	ldr	r2, [pc, #132]	; (8001764 <Motors_RPS+0x1f4>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	rdps[j] = -2.0f * pi * speedM[j];
 80016e4:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <Motors_RPS+0x1f4>)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fe93 	bl	8000418 <__aeabi_f2d>
 80016f2:	a311      	add	r3, pc, #68	; (adr r3, 8001738 <Motors_RPS+0x1c8>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe fee6 	bl	80004c8 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f97a 	bl	80009fc <__aeabi_d2f>
 8001708:	4602      	mov	r2, r0
 800170a:	4917      	ldr	r1, [pc, #92]	; (8001768 <Motors_RPS+0x1f8>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	count[j] = new_count[j];
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <Motors_RPS+0x1d4>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <Motors_RPS+0x1e8>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return rdps[j];
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <Motors_RPS+0x1f8>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	51eb851f 	.word	0x51eb851f
 800173c:	c0191eb8 	.word	0xc0191eb8
 8001740:	40000400 	.word	0x40000400
 8001744:	20000108 	.word	0x20000108
 8001748:	40000800 	.word	0x40000800
 800174c:	200001f0 	.word	0x200001f0
 8001750:	2000010c 	.word	0x2000010c
 8001754:	20000238 	.word	0x20000238
 8001758:	20000104 	.word	0x20000104
 800175c:	20000110 	.word	0x20000110
 8001760:	447a0000 	.word	0x447a0000
 8001764:	20000114 	.word	0x20000114
 8001768:	2000011c 	.word	0x2000011c
 800176c:	00000000 	.word	0x00000000

08001770 <HAL_CAN_RxFifo1MsgPendingCallback>:
	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
			/ (Max_Input - Min_Input) + Min_Output);
}


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800177a:	4a54      	ldr	r2, [pc, #336]	; (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 800177c:	2101      	movs	r1, #1
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f001 f87c 	bl	800287c <HAL_CAN_GetRxMessage>
		cntt++;
 8001784:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800178e:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8001790:	e002      	b.n	8001798 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			cntt = 0;
 8001792:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b64      	cmp	r3, #100	; 0x64
 800179e:	d8f8      	bhi.n	8001792 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		}

	if (RxHeader.StdId == 0x409) {
 80017a0:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f240 4209 	movw	r2, #1033	; 0x409
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d168      	bne.n	800187e <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
//		RxData1 = (RxData[0]<<8 | RxData[1]);
		RxData2 = (RxData[1]<<8 | RxData[2]);
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	4a45      	ldr	r2, [pc, #276]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80017b4:	7892      	ldrb	r2, [r2, #2]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fa29 	bl	8000c10 <__aeabi_i2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80017c2:	6013      	str	r3, [r2, #0]
		RxData3 = (RxData[3]<<8 | RxData[4]);
 80017c4:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80017c6:	78db      	ldrb	r3, [r3, #3]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	4a3f      	ldr	r2, [pc, #252]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80017cc:	7912      	ldrb	r2, [r2, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa1d 	bl	8000c10 <__aeabi_i2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80017da:	6013      	str	r3, [r2, #0]
//		laserX = map(RxData2,0,65535,0.0,10.0);
//		laserY = map(RxData3,0,65535,0.0,10.0);
		check_ballinside = RxData[7];
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80017de:	79da      	ldrb	r2, [r3, #7]
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80017e2:	701a      	strb	r2, [r3, #0]
		laserX = ((RxData2*0.08502) + 1.727)/100;
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fe15 	bl	8000418 <__aeabi_f2d>
 80017ee:	a32e      	add	r3, pc, #184	; (adr r3, 80018a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fe68 	bl	80004c8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	a32b      	add	r3, pc, #172	; (adr r3, 80018b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fca9 	bl	800015c <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 8001818:	f7fe ff80 	bl	800071c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f8ea 	bl	80009fc <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	4a2e      	ldr	r2, [pc, #184]	; (80018e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 800182c:	6013      	str	r3, [r2, #0]
		laserY = ((RxData3*0.154) - 2.169)/100;
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fdf0 	bl	8000418 <__aeabi_f2d>
 8001838:	a31f      	add	r3, pc, #124	; (adr r3, 80018b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fe43 	bl	80004c8 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a31d      	add	r3, pc, #116	; (adr r3, 80018c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fc82 	bl	8000158 <__aeabi_dsub>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 8001862:	f7fe ff5b 	bl	800071c <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f8c5 	bl	80009fc <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 8001876:	6013      	str	r3, [r2, #0]
		flag = 1;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x222) {
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f240 2222 	movw	r2, #546	; 0x222
 8001886:	4293      	cmp	r3, r2
 8001888:	d107      	bne.n	800189a <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
				state = RxData[0];
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 8001890:	701a      	strb	r2, [r3, #0]
				ball_pur = RxData[1];
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001894:	785a      	ldrb	r2, [r3, #1]
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x184>)
 8001898:	701a      	strb	r2, [r3, #0]
	}
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	e78183f9 	.word	0xe78183f9
 80018ac:	3fb5c3de 	.word	0x3fb5c3de
 80018b0:	c083126f 	.word	0xc083126f
 80018b4:	3ffba1ca 	.word	0x3ffba1ca
 80018b8:	a1cac083 	.word	0xa1cac083
 80018bc:	3fc3b645 	.word	0x3fc3b645
 80018c0:	ac083127 	.word	0xac083127
 80018c4:	40015a1c 	.word	0x40015a1c
 80018c8:	200000ec 	.word	0x200000ec
 80018cc:	200000b8 	.word	0x200000b8
 80018d0:	200000f8 	.word	0x200000f8
 80018d4:	200000fc 	.word	0x200000fc
 80018d8:	20000100 	.word	0x20000100
 80018dc:	2000015e 	.word	0x2000015e
 80018e0:	40590000 	.word	0x40590000
 80018e4:	20000154 	.word	0x20000154
 80018e8:	20000158 	.word	0x20000158
 80018ec:	200000f4 	.word	0x200000f4
 80018f0:	2000015c 	.word	0x2000015c
 80018f4:	2000015d 	.word	0x2000015d

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PID_Init(&MPID, 2);
 80018fc:	2102      	movs	r1, #2
 80018fe:	482b      	ldr	r0, [pc, #172]	; (80019ac <main+0xb4>)
 8001900:	f7ff fbe6 	bl	80010d0 <PID_Init>
	MPID.T = 0.01; // T = 10ms
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <main+0xb4>)
 8001906:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <main+0xb8>)
 8001908:	615a      	str	r2, [r3, #20]
	MPID.limMax = 1000;
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <main+0xb4>)
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <main+0xbc>)
 800190e:	609a      	str	r2, [r3, #8]
	MPID.limMin = -1000;
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <main+0xb4>)
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <main+0xc0>)
 8001914:	605a      	str	r2, [r3, #4]
	MPID.limMaxInt = 1000;
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <main+0xb4>)
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <main+0xbc>)
 800191a:	611a      	str	r2, [r3, #16]
	MPID.limMinInt = -1000;
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <main+0xb4>)
 800191e:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <main+0xc0>)
 8001920:	60da      	str	r2, [r3, #12]
	MPID.tau = 0; // for Kd
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <main+0xb4>)
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192a:	f000 fd3d 	bl	80023a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192e:	f000 f851 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001932:	f7ff fded 	bl	8001510 <MX_GPIO_Init>
  MX_CAN_Init();
 8001936:	f7ff fd31 	bl	800139c <MX_CAN_Init>
  MX_TIM1_Init();
 800193a:	f000 fa91 	bl	8001e60 <MX_TIM1_Init>
  MX_TIM3_Init();
 800193e:	f000 fb83 	bl	8002048 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001942:	f000 fb35 	bl	8001fb0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001946:	f000 fbd3 	bl	80020f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800194a:	2100      	movs	r1, #0
 800194c:	481b      	ldr	r0, [pc, #108]	; (80019bc <main+0xc4>)
 800194e:	f002 fa61 	bl	8003e14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001952:	2104      	movs	r1, #4
 8001954:	4819      	ldr	r0, [pc, #100]	; (80019bc <main+0xc4>)
 8001956:	f002 fa5d 	bl	8003e14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800195a:	2108      	movs	r1, #8
 800195c:	4817      	ldr	r0, [pc, #92]	; (80019bc <main+0xc4>)
 800195e:	f002 fa59 	bl	8003e14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001962:	210c      	movs	r1, #12
 8001964:	4815      	ldr	r0, [pc, #84]	; (80019bc <main+0xc4>)
 8001966:	f002 fa55 	bl	8003e14 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim2);
 800196a:	4815      	ldr	r0, [pc, #84]	; (80019c0 <main+0xc8>)
 800196c:	f002 f9b0 	bl	8003cd0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001970:	213c      	movs	r1, #60	; 0x3c
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <main+0xcc>)
 8001974:	f002 fb92 	bl	800409c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001978:	213c      	movs	r1, #60	; 0x3c
 800197a:	4813      	ldr	r0, [pc, #76]	; (80019c8 <main+0xd0>)
 800197c:	f002 fb8e 	bl	800409c <HAL_TIM_Encoder_Start>
    HAL_CAN_Start(&hcan);
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <main+0xd4>)
 8001982:	f000 ff37 	bl	80027f4 <HAL_CAN_Start>

  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001986:	2110      	movs	r1, #16
 8001988:	4810      	ldr	r0, [pc, #64]	; (80019cc <main+0xd4>)
 800198a:	f001 f898 	bl	8002abe <HAL_CAN_ActivateNotification>
  	TxHeader.DLC = 1;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <main+0xd8>)
 8001990:	2201      	movs	r2, #1
 8001992:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <main+0xd8>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <main+0xd8>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x217; //Slave1
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <main+0xd8>)
 80019a2:	f240 2217 	movw	r2, #535	; 0x217
 80019a6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <main+0xb0>
 80019aa:	bf00      	nop
 80019ac:	20000050 	.word	0x20000050
 80019b0:	3c23d70a 	.word	0x3c23d70a
 80019b4:	447a0000 	.word	0x447a0000
 80019b8:	c47a0000 	.word	0xc47a0000
 80019bc:	20000160 	.word	0x20000160
 80019c0:	200001a8 	.word	0x200001a8
 80019c4:	200001f0 	.word	0x200001f0
 80019c8:	20000238 	.word	0x20000238
 80019cc:	20000028 	.word	0x20000028
 80019d0:	200000d4 	.word	0x200000d4

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b090      	sub	sp, #64	; 0x40
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	2228      	movs	r2, #40	; 0x28
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fa28 	bl	8004e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fd29 	bl	8003474 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a28:	f000 f9a0 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a30:	2302      	movs	r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2102      	movs	r1, #2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 ff96 	bl	8003978 <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a52:	f000 f98b 	bl	8001d6c <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3740      	adds	r7, #64	; 0x40
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	f040 8171 	bne.w	8001d56 <HAL_TIM_PeriodElapsedCallback+0x2f6>
		X = Vx*cosf(Yaw) - Vy*sinf(Yaw);
 8001a74:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 f9e5 	bl	8004e48 <cosf>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f7ff f916 	bl	8000cb8 <__aeabi_fmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461c      	mov	r4, r3
 8001a90:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fa0f 	bl	8004eb8 <sinf>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7ff f908 	bl	8000cb8 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7fe fff9 	bl	8000aa4 <__aeabi_fsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ab8:	601a      	str	r2, [r3, #0]
		Y = Vx*sinf(Yaw) + Vy*cosf(Yaw);
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f9fa 	bl	8004eb8 <sinf>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f7ff f8f3 	bl	8000cb8 <__aeabi_fmul>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 f9b4 	bl	8004e48 <cosf>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f7ff f8e5 	bl	8000cb8 <__aeabi_fmul>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7fe ffd8 	bl	8000aa8 <__addsf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001afe:	601a      	str	r2, [r3, #0]
		Yaw = Omega;
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b06:	6013      	str	r3, [r2, #0]
		if ((laserX >= 0.02 && laserX <= 0.06 && (state == 17))
 8001b08:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc83 	bl	8000418 <__aeabi_f2d>
 8001b12:	a365      	add	r3, pc, #404	; (adr r3, 8001ca8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe ff5c 	bl	80009d4 <__aeabi_dcmpge>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001b22:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc76 	bl	8000418 <__aeabi_f2d>
 8001b2c:	a360      	add	r3, pc, #384	; (adr r3, 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe ff45 	bl	80009c0 <__aeabi_dcmple>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b11      	cmp	r3, #17
 8001b42:	d00b      	beq.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0xfc>
				|| (ball_pur == 1) || (check_ballinside==1 &&state == 6)) {
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d007      	beq.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0xfc>
 8001b4c:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001b54:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d103      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x104>
			V_shooter2 = -60;
 8001b5c:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b5e:	4a61      	ldr	r2, [pc, #388]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e003      	b.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x10c>
		} else {
			V_shooter2 = 0.0;
 8001b64:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
		}

		if (state == 5 || state == 6 || state == 16 || state == 17 || (check_ballinside==1 && state == 6)) {
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d013      	beq.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001b74:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d00f      	beq.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001b7c:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d00b      	beq.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b11      	cmp	r3, #17
 8001b8a:	d007      	beq.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d103      	bne.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x144>
			V_shooter = -40;
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b9e:	4a53      	ldr	r2, [pc, #332]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e003      	b.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x14c>
		} else {
			V_shooter = 0.0;
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]



//		V_shooter2 = -40;
//		V_shooter = -40;
		Motor1_speed = Motors_RPS(Motor1, Sample_time, CPR); // Motor24V
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bae:	4951      	ldr	r1, [pc, #324]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fcdd 	bl	8001570 <Motors_RPS>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bba:	6013      	str	r3, [r2, #0]
		Motor2_speed = Motors_RPS(Motor2, Sample_time, CPR); // Motor12V
 8001bbc:	4a4c      	ldr	r2, [pc, #304]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bbe:	494d      	ldr	r1, [pc, #308]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fcd5 	bl	8001570 <Motors_RPS>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bca:	6013      	str	r3, [r2, #0]
		pwm1 = PID(&MPID, V_shooter, Motor1_speed, kp, ki, kd, Motor1); //Motor24V
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001be4:	4848      	ldr	r0, [pc, #288]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001be6:	f7ff faab 	bl	8001140 <PID>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a47      	ldr	r2, [pc, #284]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001bee:	6013      	str	r3, [r2, #0]
		pwm2 = PID(&MPID, V_shooter2, Motor2_speed, kp, ki, kd, Motor2); //Motor12V
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c08:	483f      	ldr	r0, [pc, #252]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c0a:	f7ff fa99 	bl	8001140 <PID>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a3f      	ldr	r2, [pc, #252]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c12:	6013      	str	r3, [r2, #0]

		// Control Motor
		if (pwm2 > 10){
 8001c14:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4936      	ldr	r1, [pc, #216]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa08 	bl	8001030 <__aeabi_fcmpgt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x1de>
			TIM1->CCR1 = pwm2;
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4c3a      	ldr	r4, [pc, #232]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fa2f 	bl	8001090 <__aeabi_f2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	6363      	str	r3, [r4, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c3c:	e01c      	b.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x218>
		}
		else if (pwm2 < -10){
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4935      	ldr	r1, [pc, #212]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f9d5 	bl	8000ff4 <__aeabi_fcmplt>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x20c>
			TIM1->CCR1 = 0;
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = -1 * pwm2;
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c5e:	4c2d      	ldr	r4, [pc, #180]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fa15 	bl	8001090 <__aeabi_f2uiz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c6a:	e005      	b.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x218>
		}
		else{
			TIM1->CCR1 = 0;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if (pwm1 > 10){
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	491d      	ldr	r1, [pc, #116]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f9d6 	bl	8001030 <__aeabi_fcmpgt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d048      	beq.n	8001d1c <HAL_TIM_PeriodElapsedCallback+0x2bc>
			TIM1->CCR3 = 0;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = pwm1;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4c1f      	ldr	r4, [pc, #124]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f9fa 	bl	8001090 <__aeabi_f2uiz>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	6423      	str	r3, [r4, #64]	; 0x40
//			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
//			flag = 0;
//		}

	}
}
 8001ca0:	e059      	b.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x2f6>
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	47ae147b 	.word	0x47ae147b
 8001cac:	3f947ae1 	.word	0x3f947ae1
 8001cb0:	eb851eb8 	.word	0xeb851eb8
 8001cb4:	3faeb851 	.word	0x3faeb851
 8001cb8:	20000150 	.word	0x20000150
 8001cbc:	2000013c 	.word	0x2000013c
 8001cc0:	20000140 	.word	0x20000140
 8001cc4:	20000148 	.word	0x20000148
 8001cc8:	2000014c 	.word	0x2000014c
 8001ccc:	20000144 	.word	0x20000144
 8001cd0:	20000154 	.word	0x20000154
 8001cd4:	2000015c 	.word	0x2000015c
 8001cd8:	2000015d 	.word	0x2000015d
 8001cdc:	2000015e 	.word	0x2000015e
 8001ce0:	20000138 	.word	0x20000138
 8001ce4:	c2700000 	.word	0xc2700000
 8001ce8:	20000134 	.word	0x20000134
 8001cec:	c2200000 	.word	0xc2200000
 8001cf0:	446c8000 	.word	0x446c8000
 8001cf4:	41200000 	.word	0x41200000
 8001cf8:	20000124 	.word	0x20000124
 8001cfc:	20000128 	.word	0x20000128
 8001d00:	434c14e4 	.word	0x434c14e4
 8001d04:	3f86872b 	.word	0x3f86872b
 8001d08:	20000050 	.word	0x20000050
 8001d0c:	2000012c 	.word	0x2000012c
 8001d10:	20000130 	.word	0x20000130
 8001d14:	40012c00 	.word	0x40012c00
 8001d18:	c1200000 	.word	0xc1200000
		} else if (pwm1 < -10) {
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4910      	ldr	r1, [pc, #64]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f966 	bl	8000ff4 <__aeabi_fcmplt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			TIM1->CCR3 = -1 * pwm1;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d36:	4c0c      	ldr	r4, [pc, #48]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f9a9 	bl	8001090 <__aeabi_f2uiz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	63e3      	str	r3, [r4, #60]	; 0x3c
			TIM1->CCR4 = 0;
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x2f6>
			TIM1->CCR3 = 0;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = 0;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000012c 	.word	0x2000012c
 8001d64:	c1200000 	.word	0xc1200000
 8001d68:	40012c00 	.word	0x40012c00

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>
	...

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_MspInit+0x5c>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <HAL_MspInit+0x5c>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_MspInit+0x5c>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_MspInit+0x5c>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_MspInit+0x5c>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_MspInit+0x5c>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_MspInit+0x60>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_MspInit+0x60>)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e22:	f000 fb07 	bl	8002434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <CAN1_RX1_IRQHandler+0x10>)
 8001e32:	f000 fe69 	bl	8002b08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000028 	.word	0x20000028

08001e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <TIM2_IRQHandler+0x10>)
 8001e46:	f002 f9b7 	bl	80041b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001a8 	.word	0x200001a8

08001e54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b092      	sub	sp, #72	; 0x48
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	615a      	str	r2, [r3, #20]
 8001e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2220      	movs	r2, #32
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 ffd4 	bl	8004e38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e90:	4b45      	ldr	r3, [pc, #276]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001e92:	4a46      	ldr	r2, [pc, #280]	; (8001fac <MX_TIM1_Init+0x14c>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001e98:	2209      	movs	r2, #9
 8001e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ebc:	483a      	ldr	r0, [pc, #232]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001ebe:	f001 ff59 	bl	8003d74 <HAL_TIM_PWM_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ec8:	f7ff ff50 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4833      	ldr	r0, [pc, #204]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001edc:	f002 fec6 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ee6:	f7ff ff41 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eea:	2360      	movs	r3, #96	; 0x60
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4826      	ldr	r0, [pc, #152]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001f10:	f002 fa5a 	bl	80043c8 <HAL_TIM_PWM_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f1a:	f7ff ff27 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	2204      	movs	r2, #4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4820      	ldr	r0, [pc, #128]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001f28:	f002 fa4e 	bl	80043c8 <HAL_TIM_PWM_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001f32:	f7ff ff1b 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481a      	ldr	r0, [pc, #104]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001f40:	f002 fa42 	bl	80043c8 <HAL_TIM_PWM_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001f4a:	f7ff ff0f 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	220c      	movs	r2, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001f58:	f002 fa36 	bl	80043c8 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001f62:	f7ff ff03 	bl	8001d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001f8a:	f002 fecd 	bl	8004d28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001f94:	f7ff feea 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM1_Init+0x148>)
 8001f9a:	f000 f9ab 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3748      	adds	r7, #72	; 0x48
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000160 	.word	0x20000160
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fd6:	2247      	movs	r2, #71	; 0x47
 8001fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fe2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_TIM2_Init+0x94>)
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff4:	4813      	ldr	r0, [pc, #76]	; (8002044 <MX_TIM2_Init+0x94>)
 8001ff6:	f001 fe1b 	bl	8003c30 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002000:	f7ff feb4 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_TIM2_Init+0x94>)
 8002012:	f002 fa9b 	bl	800454c <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800201c:	f7ff fea6 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_TIM2_Init+0x94>)
 800202e:	f002 fe1d 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002038:	f7ff fe98 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200001a8 	.word	0x200001a8

08002048 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f002 feee 	bl	8004e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <MX_TIM3_Init+0xa0>)
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <MX_TIM3_Init+0xa4>)
 8002068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_TIM3_Init+0xa0>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_TIM3_Init+0xa0>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM3_Init+0xa0>)
 8002078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM3_Init+0xa0>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_TIM3_Init+0xa0>)
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800208a:	2303      	movs	r3, #3
 800208c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002092:	2301      	movs	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020a2:	2301      	movs	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_TIM3_Init+0xa0>)
 80020b6:	f001 ff4f 	bl	8003f58 <HAL_TIM_Encoder_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020c0:	f7ff fe54 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_TIM3_Init+0xa0>)
 80020d2:	f002 fdcb 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020dc:	f7ff fe46 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3730      	adds	r7, #48	; 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200001f0 	.word	0x200001f0
 80020ec:	40000400 	.word	0x40000400

080020f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fe9a 	bl	8004e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <MX_TIM4_Init+0xa0>)
 800210e:	4a21      	ldr	r2, [pc, #132]	; (8002194 <MX_TIM4_Init+0xa4>)
 8002110:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_TIM4_Init+0xa0>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <MX_TIM4_Init+0xa0>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <MX_TIM4_Init+0xa0>)
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_TIM4_Init+0xa0>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_TIM4_Init+0xa0>)
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002132:	2303      	movs	r3, #3
 8002134:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800214a:	2301      	movs	r3, #1
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <MX_TIM4_Init+0xa0>)
 800215e:	f001 fefb 	bl	8003f58 <HAL_TIM_Encoder_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002168:	f7ff fe00 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_TIM4_Init+0xa0>)
 800217a:	f002 fd77 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002184:	f7ff fdf2 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3730      	adds	r7, #48	; 0x30
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000238 	.word	0x20000238
 8002194:	40000800 	.word	0x40000800

08002198 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_TIM_PWM_MspInit+0x34>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10b      	bne.n	80021c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_TIM_PWM_MspInit+0x38>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_TIM_PWM_MspInit+0x38>)
 80021b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021b4:	6193      	str	r3, [r2, #24]
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_TIM_PWM_MspInit+0x38>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40021000 	.word	0x40021000

080021d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d113      	bne.n	800220e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_TIM_Base_MspInit+0x44>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_TIM_Base_MspInit+0x44>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_TIM_Base_MspInit+0x44>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	201c      	movs	r0, #28
 8002204:	f000 ff7b 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002208:	201c      	movs	r0, #28
 800220a:	f000 ff94 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d124      	bne.n	8002286 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	61d3      	str	r3, [r2, #28]
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	4619      	mov	r1, r3
 800227e:	481a      	ldr	r0, [pc, #104]	; (80022e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002280:	f000 ff74 	bl	800316c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002284:	e028      	b.n	80022d8 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_TIM_Encoder_MspInit+0xd0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d123      	bne.n	80022d8 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	61d3      	str	r3, [r2, #28]
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd4>)
 80022d4:	f000 ff4a 	bl	800316c <HAL_GPIO_Init>
}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010800 	.word	0x40010800
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40010c00 	.word	0x40010c00

080022f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_TIM_MspPostInit+0x5c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d118      	bne.n	8002346 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_TIM_MspPostInit+0x60>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_TIM_MspPostInit+0x60>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_TIM_MspPostInit+0x60>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800232c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2302      	movs	r3, #2
 8002338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_TIM_MspPostInit+0x64>)
 8002342:	f000 ff13 	bl	800316c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40010800 	.word	0x40010800

0800235c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800235c:	f7ff fd7a 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002362:	490c      	ldr	r1, [pc, #48]	; (8002394 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002378:	4c09      	ldr	r4, [pc, #36]	; (80023a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f002 fd33 	bl	8004df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800238a:	f7ff fab5 	bl	80018f8 <main>
  bx lr
 800238e:	4770      	bx	lr
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002394:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002398:	08005e70 	.word	0x08005e70
  ldr r2, =_sbss
 800239c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023a0:	20000284 	.word	0x20000284

080023a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC1_2_IRQHandler>
	...

080023a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_Init+0x28>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <HAL_Init+0x28>)
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 fe95 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023be:	200f      	movs	r0, #15
 80023c0:	f000 f808 	bl	80023d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff fcd8 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40022000 	.word	0x40022000

080023d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x54>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_InitTick+0x58>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fead 	bl	8003152 <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e00e      	b.n	8002420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d80a      	bhi.n	800241e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002410:	f000 fe75 	bl	80030fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002414:	4a06      	ldr	r2, [pc, #24]	; (8002430 <HAL_InitTick+0x5c>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000000 	.word	0x20000000
 800242c:	20000008 	.word	0x20000008
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_IncTick+0x1c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_IncTick+0x20>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_IncTick+0x20>)
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	20000008 	.word	0x20000008
 8002454:	20000280 	.word	0x20000280

08002458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_GetTick+0x10>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000280 	.word	0x20000280

0800246c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0ed      	b.n	800265a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe ffd8 	bl	8001440 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a0:	f7ff ffda 	bl	8002458 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a6:	e012      	b.n	80024ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a8:	f7ff ffd6 	bl	8002458 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d90b      	bls.n	80024ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2205      	movs	r2, #5
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0c5      	b.n	800265a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0e5      	beq.n	80024a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0202 	bic.w	r2, r2, #2
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff ffb4 	bl	8002458 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f2:	e012      	b.n	800251a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f4:	f7ff ffb0 	bl	8002458 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b0a      	cmp	r3, #10
 8002500:	d90b      	bls.n	800251a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e09f      	b.n	800265a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e5      	bne.n	80024f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e1b      	ldrb	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d108      	bne.n	8002542 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e007      	b.n	8002552 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7e5b      	ldrb	r3, [r3, #25]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e9b      	ldrb	r3, [r3, #26]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e007      	b.n	80025a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0220 	bic.w	r2, r2, #32
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7edb      	ldrb	r3, [r3, #27]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0210 	bic.w	r2, r2, #16
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0210 	orr.w	r2, r2, #16
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7f1b      	ldrb	r3, [r3, #28]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f5b      	ldrb	r3, [r3, #29]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0204 	orr.w	r2, r2, #4
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e007      	b.n	8002624 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	ea42 0103 	orr.w	r1, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002662:	b480      	push	{r7}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002678:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800267a:	7cfb      	ldrb	r3, [r7, #19]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d003      	beq.n	8002688 <HAL_CAN_ConfigFilter+0x26>
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	2b02      	cmp	r3, #2
 8002684:	f040 80aa 	bne.w	80027dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2201      	movs	r2, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d123      	bne.n	800270a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	401a      	ands	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3248      	adds	r2, #72	; 0x48
 80026ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	3348      	adds	r3, #72	; 0x48
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d122      	bne.n	8002758 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	431a      	orrs	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002732:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3248      	adds	r2, #72	; 0x48
 8002738:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274e:	6979      	ldr	r1, [r7, #20]
 8002750:	3348      	adds	r3, #72	; 0x48
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002772:	e007      	b.n	8002784 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800279e:	e007      	b.n	80027b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ce:	f023 0201 	bic.w	r2, r3, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e006      	b.n	80027ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d12e      	bne.n	8002866 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002820:	f7ff fe1a 	bl	8002458 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002826:	e012      	b.n	800284e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002828:	f7ff fe16 	bl	8002458 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b0a      	cmp	r3, #10
 8002834:	d90b      	bls.n	800284e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2205      	movs	r2, #5
 8002846:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e012      	b.n	8002874 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e006      	b.n	8002874 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d003      	beq.n	80028a0 <HAL_CAN_GetRxMessage+0x24>
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 8103 	bne.w	8002aa6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0f7      	b.n	8002ab4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0e8      	b.n	8002ab4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	331b      	adds	r3, #27
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0204 	and.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	331b      	adds	r3, #27
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0d5b      	lsrs	r3, r3, #21
 8002910:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e00b      	b.n	8002932 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	331b      	adds	r3, #27
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	331b      	adds	r3, #27
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0202 	and.w	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	331b      	adds	r3, #27
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2208      	movs	r2, #8
 8002964:	611a      	str	r2, [r3, #16]
 8002966:	e00b      	b.n	8002980 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	331b      	adds	r3, #27
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	331b      	adds	r3, #27
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	b2da      	uxtb	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	331b      	adds	r3, #27
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	3304      	adds	r3, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0a1a      	lsrs	r2, r3, #8
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0c1a      	lsrs	r2, r3, #16
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	3302      	adds	r3, #2
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e1a      	lsrs	r2, r3, #24
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	3304      	adds	r3, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0a1a      	lsrs	r2, r3, #8
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	3305      	adds	r3, #5
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0c1a      	lsrs	r2, r3, #16
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	3306      	adds	r3, #6
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e1a      	lsrs	r2, r3, #24
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3307      	adds	r3, #7
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0220 	orr.w	r2, r2, #32
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	e007      	b.n	8002aa2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e006      	b.n	8002ab4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ace:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d002      	beq.n	8002adc <HAL_CAN_ActivateNotification+0x1e>
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d109      	bne.n	8002af0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6959      	ldr	r1, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e006      	b.n	8002afe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d07c      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d023      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f983 	bl	8002e76 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b70:	e016      	b.n	8002ba0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
 8002b84:	e00c      	b.n	8002ba0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
 8002b98:	e002      	b.n	8002ba0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f986 	bl	8002eac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f962 	bl	8002e88 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bc4:	e016      	b.n	8002bf4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	e00c      	b.n	8002bf4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
 8002bec:	e002      	b.n	8002bf4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f965 	bl	8002ebe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f941 	bl	8002e9a <HAL_CAN_TxMailbox2CompleteCallback>
 8002c18:	e016      	b.n	8002c48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	e00c      	b.n	8002c48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	e002      	b.n	8002c48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f944 	bl	8002ed0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2208      	movs	r2, #8
 8002c86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f933 	bl	8002ef4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f91b 	bl	8002ee2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2208      	movs	r2, #8
 8002cea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f90a 	bl	8002f06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe fd30 	bl	8001770 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8f3 	bl	8002f18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8eb 	bl	8002f2a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d07b      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d072      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	f043 0302 	orr.w	r3, r3, #2
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d043      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03e      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd6:	2b60      	cmp	r3, #96	; 0x60
 8002dd8:	d02b      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x32a>
 8002dda:	2b60      	cmp	r3, #96	; 0x60
 8002ddc:	d82e      	bhi.n	8002e3c <HAL_CAN_IRQHandler+0x334>
 8002dde:	2b50      	cmp	r3, #80	; 0x50
 8002de0:	d022      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x320>
 8002de2:	2b50      	cmp	r3, #80	; 0x50
 8002de4:	d82a      	bhi.n	8002e3c <HAL_CAN_IRQHandler+0x334>
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d019      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x316>
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d826      	bhi.n	8002e3c <HAL_CAN_IRQHandler+0x334>
 8002dee:	2b30      	cmp	r3, #48	; 0x30
 8002df0:	d010      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x30c>
 8002df2:	2b30      	cmp	r3, #48	; 0x30
 8002df4:	d822      	bhi.n	8002e3c <HAL_CAN_IRQHandler+0x334>
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d002      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x2f8>
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d005      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002dfe:	e01d      	b.n	8002e3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f043 0308 	orr.w	r3, r3, #8
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e08:	e019      	b.n	8002e3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f043 0310 	orr.w	r3, r3, #16
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e12:	e014      	b.n	8002e3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e1c:	e00f      	b.n	8002e3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e26:	e00a      	b.n	8002e3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e30:	e005      	b.n	8002e3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e3a:	e000      	b.n	8002e3e <HAL_CAN_IRQHandler+0x336>
            break;
 8002e3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2204      	movs	r2, #4
 8002e54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f867 	bl	8002f3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
	...

08002f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 0307 	and.w	r3, r3, #7
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	db0b      	blt.n	8002fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <__NVIC_EnableIRQ+0x34>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
         );
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c8:	f7ff ff90 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff2d 	bl	8002f50 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003110:	f7ff ff42 	bl	8002f98 <__NVIC_GetPriorityGrouping>
 8003114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff ff90 	bl	8003040 <NVIC_EncodePriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff5f 	bl	8002fec <__NVIC_SetPriority>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff35 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffa2 	bl	80030a4 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b08b      	sub	sp, #44	; 0x2c
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317e:	e169      	b.n	8003454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003180:	2201      	movs	r2, #1
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 8158 	bne.w	800344e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4a9a      	ldr	r2, [pc, #616]	; (800340c <HAL_GPIO_Init+0x2a0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d05e      	beq.n	8003266 <HAL_GPIO_Init+0xfa>
 80031a8:	4a98      	ldr	r2, [pc, #608]	; (800340c <HAL_GPIO_Init+0x2a0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d875      	bhi.n	800329a <HAL_GPIO_Init+0x12e>
 80031ae:	4a98      	ldr	r2, [pc, #608]	; (8003410 <HAL_GPIO_Init+0x2a4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d058      	beq.n	8003266 <HAL_GPIO_Init+0xfa>
 80031b4:	4a96      	ldr	r2, [pc, #600]	; (8003410 <HAL_GPIO_Init+0x2a4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d86f      	bhi.n	800329a <HAL_GPIO_Init+0x12e>
 80031ba:	4a96      	ldr	r2, [pc, #600]	; (8003414 <HAL_GPIO_Init+0x2a8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d052      	beq.n	8003266 <HAL_GPIO_Init+0xfa>
 80031c0:	4a94      	ldr	r2, [pc, #592]	; (8003414 <HAL_GPIO_Init+0x2a8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d869      	bhi.n	800329a <HAL_GPIO_Init+0x12e>
 80031c6:	4a94      	ldr	r2, [pc, #592]	; (8003418 <HAL_GPIO_Init+0x2ac>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d04c      	beq.n	8003266 <HAL_GPIO_Init+0xfa>
 80031cc:	4a92      	ldr	r2, [pc, #584]	; (8003418 <HAL_GPIO_Init+0x2ac>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d863      	bhi.n	800329a <HAL_GPIO_Init+0x12e>
 80031d2:	4a92      	ldr	r2, [pc, #584]	; (800341c <HAL_GPIO_Init+0x2b0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d046      	beq.n	8003266 <HAL_GPIO_Init+0xfa>
 80031d8:	4a90      	ldr	r2, [pc, #576]	; (800341c <HAL_GPIO_Init+0x2b0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d85d      	bhi.n	800329a <HAL_GPIO_Init+0x12e>
 80031de:	2b12      	cmp	r3, #18
 80031e0:	d82a      	bhi.n	8003238 <HAL_GPIO_Init+0xcc>
 80031e2:	2b12      	cmp	r3, #18
 80031e4:	d859      	bhi.n	800329a <HAL_GPIO_Init+0x12e>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_GPIO_Init+0x80>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003267 	.word	0x08003267
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003253 	.word	0x08003253
 80031f8:	08003295 	.word	0x08003295
 80031fc:	0800329b 	.word	0x0800329b
 8003200:	0800329b 	.word	0x0800329b
 8003204:	0800329b 	.word	0x0800329b
 8003208:	0800329b 	.word	0x0800329b
 800320c:	0800329b 	.word	0x0800329b
 8003210:	0800329b 	.word	0x0800329b
 8003214:	0800329b 	.word	0x0800329b
 8003218:	0800329b 	.word	0x0800329b
 800321c:	0800329b 	.word	0x0800329b
 8003220:	0800329b 	.word	0x0800329b
 8003224:	0800329b 	.word	0x0800329b
 8003228:	0800329b 	.word	0x0800329b
 800322c:	0800329b 	.word	0x0800329b
 8003230:	08003249 	.word	0x08003249
 8003234:	0800325d 	.word	0x0800325d
 8003238:	4a79      	ldr	r2, [pc, #484]	; (8003420 <HAL_GPIO_Init+0x2b4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800323e:	e02c      	b.n	800329a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	623b      	str	r3, [r7, #32]
          break;
 8003246:	e029      	b.n	800329c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	3304      	adds	r3, #4
 800324e:	623b      	str	r3, [r7, #32]
          break;
 8003250:	e024      	b.n	800329c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	3308      	adds	r3, #8
 8003258:	623b      	str	r3, [r7, #32]
          break;
 800325a:	e01f      	b.n	800329c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	330c      	adds	r3, #12
 8003262:	623b      	str	r3, [r7, #32]
          break;
 8003264:	e01a      	b.n	800329c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800326e:	2304      	movs	r3, #4
 8003270:	623b      	str	r3, [r7, #32]
          break;
 8003272:	e013      	b.n	800329c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800327c:	2308      	movs	r3, #8
 800327e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	611a      	str	r2, [r3, #16]
          break;
 8003286:	e009      	b.n	800329c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003288:	2308      	movs	r3, #8
 800328a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	615a      	str	r2, [r3, #20]
          break;
 8003292:	e003      	b.n	800329c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003294:	2300      	movs	r3, #0
 8003296:	623b      	str	r3, [r7, #32]
          break;
 8003298:	e000      	b.n	800329c <HAL_GPIO_Init+0x130>
          break;
 800329a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2bff      	cmp	r3, #255	; 0xff
 80032a0:	d801      	bhi.n	80032a6 <HAL_GPIO_Init+0x13a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	e001      	b.n	80032aa <HAL_GPIO_Init+0x13e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2bff      	cmp	r3, #255	; 0xff
 80032b0:	d802      	bhi.n	80032b8 <HAL_GPIO_Init+0x14c>
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	e002      	b.n	80032be <HAL_GPIO_Init+0x152>
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	3b08      	subs	r3, #8
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	210f      	movs	r1, #15
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	6a39      	ldr	r1, [r7, #32]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80b1 	beq.w	800344e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032ec:	4b4d      	ldr	r3, [pc, #308]	; (8003424 <HAL_GPIO_Init+0x2b8>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a4c      	ldr	r2, [pc, #304]	; (8003424 <HAL_GPIO_Init+0x2b8>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_GPIO_Init+0x2b8>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003304:	4a48      	ldr	r2, [pc, #288]	; (8003428 <HAL_GPIO_Init+0x2bc>)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a40      	ldr	r2, [pc, #256]	; (800342c <HAL_GPIO_Init+0x2c0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_GPIO_Init+0x1ec>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_GPIO_Init+0x2c4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00d      	beq.n	8003354 <HAL_GPIO_Init+0x1e8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3e      	ldr	r2, [pc, #248]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <HAL_GPIO_Init+0x1e4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3d      	ldr	r2, [pc, #244]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_GPIO_Init+0x1e0>
 8003348:	2303      	movs	r3, #3
 800334a:	e006      	b.n	800335a <HAL_GPIO_Init+0x1ee>
 800334c:	2304      	movs	r3, #4
 800334e:	e004      	b.n	800335a <HAL_GPIO_Init+0x1ee>
 8003350:	2302      	movs	r3, #2
 8003352:	e002      	b.n	800335a <HAL_GPIO_Init+0x1ee>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_GPIO_Init+0x1ee>
 8003358:	2300      	movs	r3, #0
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	f002 0203 	and.w	r2, r2, #3
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	4093      	lsls	r3, r2
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800336a:	492f      	ldr	r1, [pc, #188]	; (8003428 <HAL_GPIO_Init+0x2bc>)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_GPIO_Init+0x2d0>)
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	492c      	ldr	r1, [pc, #176]	; (800343c <HAL_GPIO_Init+0x2d0>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
 8003390:	e006      	b.n	80033a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <HAL_GPIO_Init+0x2d0>)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	43db      	mvns	r3, r3
 800339a:	4928      	ldr	r1, [pc, #160]	; (800343c <HAL_GPIO_Init+0x2d0>)
 800339c:	4013      	ands	r3, r2
 800339e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4922      	ldr	r1, [pc, #136]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	491e      	ldr	r1, [pc, #120]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4918      	ldr	r1, [pc, #96]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4914      	ldr	r1, [pc, #80]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d021      	beq.n	8003440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_GPIO_Init+0x2d0>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_GPIO_Init+0x2d0>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e021      	b.n	800344e <HAL_GPIO_Init+0x2e2>
 800340a:	bf00      	nop
 800340c:	10320000 	.word	0x10320000
 8003410:	10310000 	.word	0x10310000
 8003414:	10220000 	.word	0x10220000
 8003418:	10210000 	.word	0x10210000
 800341c:	10120000 	.word	0x10120000
 8003420:	10110000 	.word	0x10110000
 8003424:	40021000 	.word	0x40021000
 8003428:	40010000 	.word	0x40010000
 800342c:	40010800 	.word	0x40010800
 8003430:	40010c00 	.word	0x40010c00
 8003434:	40011000 	.word	0x40011000
 8003438:	40011400 	.word	0x40011400
 800343c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_GPIO_Init+0x304>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	43db      	mvns	r3, r3
 8003448:	4909      	ldr	r1, [pc, #36]	; (8003470 <HAL_GPIO_Init+0x304>)
 800344a:	4013      	ands	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	3301      	adds	r3, #1
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	f47f ae8e 	bne.w	8003180 <HAL_GPIO_Init+0x14>
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	372c      	adds	r7, #44	; 0x2c
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40010400 	.word	0x40010400

08003474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e272      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8087 	beq.w	80035a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003494:	4b92      	ldr	r3, [pc, #584]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b04      	cmp	r3, #4
 800349e:	d00c      	beq.n	80034ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a0:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d112      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5e>
 80034ac:	4b8c      	ldr	r3, [pc, #560]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ba:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d06c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x12c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d168      	bne.n	80035a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e24c      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x76>
 80034dc:	4b80      	ldr	r3, [pc, #512]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a7f      	ldr	r2, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e02e      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x98>
 80034f2:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0xbc>
 8003516:	4b72      	ldr	r3, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a71      	ldr	r2, [pc, #452]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 8003530:	4b6b      	ldr	r3, [pc, #428]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a67      	ldr	r2, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe ff82 	bl	8002458 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe ff7e 	bl	8002458 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e200      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xe4>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe ff6e 	bl	8002458 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe ff6a 	bl	8002458 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1ec      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x10c>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ae:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x18c>
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x176>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c0      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4939      	ldr	r1, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe ff23 	bl	8002458 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7fe ff1f 	bl	8002458 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a1      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe ff02 	bl	8002458 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7fe fefe 	bl	8002458 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e180      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d03a      	beq.n	80036f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d019      	beq.n	80036be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x274>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7fe fee2 	bl	8002458 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7fe fede 	bl	8002458 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e160      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f000 fa9c 	bl	8003bf4 <RCC_Delay>
 80036bc:	e01c      	b.n	80036f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x274>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c4:	f7fe fec8 	bl	8002458 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ca:	e00f      	b.n	80036ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe fec4 	bl	8002458 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d908      	bls.n	80036ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e146      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	42420000 	.word	0x42420000
 80036e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b92      	ldr	r3, [pc, #584]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e9      	bne.n	80036cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a6 	beq.w	8003852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b8b      	ldr	r3, [pc, #556]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a87      	ldr	r2, [pc, #540]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	4b85      	ldr	r3, [pc, #532]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b82      	ldr	r3, [pc, #520]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373e:	4b7f      	ldr	r3, [pc, #508]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7e      	ldr	r2, [pc, #504]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fe fe85 	bl	8002458 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fe fe81 	bl	8002458 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	; 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e103      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b75      	ldr	r3, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x312>
 8003778:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a6e      	ldr	r2, [pc, #440]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	e02d      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x334>
 800378e:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a69      	ldr	r2, [pc, #420]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	4b67      	ldr	r3, [pc, #412]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a66      	ldr	r2, [pc, #408]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6213      	str	r3, [r2, #32]
 80037a6:	e01c      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x356>
 80037b0:	4b61      	ldr	r3, [pc, #388]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a5d      	ldr	r2, [pc, #372]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e00b      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 80037ca:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a5a      	ldr	r2, [pc, #360]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	4b58      	ldr	r3, [pc, #352]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fe35 	bl	8002458 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fe fe31 	bl	8002458 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0b1      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ee      	beq.n	80037f2 <HAL_RCC_OscConfig+0x37e>
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe fe1f 	bl	8002458 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fe1b 	bl	8002458 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e09b      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	4b40      	ldr	r3, [pc, #256]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ee      	bne.n	800381e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003846:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8087 	beq.w	800396a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d061      	beq.n	800392c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d146      	bne.n	80038fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b33      	ldr	r3, [pc, #204]	; (8003940 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fe fdef 	bl	8002458 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fe fdeb 	bl	8002458 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e06d      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003890:	4b29      	ldr	r3, [pc, #164]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d108      	bne.n	80038b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4921      	ldr	r1, [pc, #132]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a19      	ldr	r1, [r3, #32]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	430b      	orrs	r3, r1
 80038ca:	491b      	ldr	r1, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fe fdbf 	bl	8002458 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe fdbb 	bl	8002458 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x46a>
 80038fc:	e035      	b.n	800396a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_OscConfig+0x4cc>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe fda8 	bl	8002458 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe fda4 	bl	8002458 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e026      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x498>
 800392a:	e01e      	b.n	800396a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e019      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
 8003940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_OscConfig+0x500>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	429a      	cmp	r2, r3
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d0      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d910      	bls.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b67      	ldr	r3, [pc, #412]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4965      	ldr	r1, [pc, #404]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b63      	ldr	r3, [pc, #396]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b8      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ec:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	494d      	ldr	r1, [pc, #308]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d040      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e073      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06b      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4936      	ldr	r1, [pc, #216]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fe fcf6 	bl	8002458 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fe fcf2 	bl	8002458 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e053      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d210      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4922      	ldr	r1, [pc, #136]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	490e      	ldr	r1, [pc, #56]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b06:	f000 f821 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1cc>)
 8003b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fc54 	bl	80023d4 <HAL_InitTick>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08005a74 	.word	0x08005a74
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000004 	.word	0x20000004

08003b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x30>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x36>
 8003b7a:	e027      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b7e:	613b      	str	r3, [r7, #16]
      break;
 8003b80:	e027      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b8c:	5cd3      	ldrb	r3, [r2, r3]
 8003b8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0c5b      	lsrs	r3, r3, #17
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bae:	fb03 f202 	mul.w	r2, r3, r2
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e004      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	613b      	str	r3, [r7, #16]
      break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bce:	613b      	str	r3, [r7, #16]
      break;
 8003bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd2:	693b      	ldr	r3, [r7, #16]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	007a1200 	.word	0x007a1200
 8003be8:	08005a84 	.word	0x08005a84
 8003bec:	08005a94 	.word	0x08005a94
 8003bf0:	003d0900 	.word	0x003d0900

08003bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <RCC_Delay+0x34>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <RCC_Delay+0x38>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a5b      	lsrs	r3, r3, #9
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c10:	bf00      	nop
  }
  while (Delay --);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f9      	bne.n	8003c10 <RCC_Delay+0x1c>
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	10624dd3 	.word	0x10624dd3

08003c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e041      	b.n	8003cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe fabc 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f000 fd58 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d001      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e03a      	b.n	8003d5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_TIM_Base_Start_IT+0x98>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x58>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d009      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x58>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_TIM_Base_Start_IT+0x9c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x58>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d111      	bne.n	8003d4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d010      	beq.n	8003d5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	e007      	b.n	8003d5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800

08003d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e041      	b.n	8003e0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fe f9fc 	bl	8002198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 fcb6 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_TIM_PWM_Start+0x24>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e022      	b.n	8003e7e <HAL_TIM_PWM_Start+0x6a>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d109      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x3e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e015      	b.n	8003e7e <HAL_TIM_PWM_Start+0x6a>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d109      	bne.n	8003e6c <HAL_TIM_PWM_Start+0x58>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e008      	b.n	8003e7e <HAL_TIM_PWM_Start+0x6a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e05e      	b.n	8003f44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0x82>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e94:	e013      	b.n	8003ebe <HAL_TIM_PWM_Start+0xaa>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0x92>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea4:	e00b      	b.n	8003ebe <HAL_TIM_PWM_Start+0xaa>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0xa2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	e003      	b.n	8003ebe <HAL_TIM_PWM_Start+0xaa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 feac 	bl	8004c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <HAL_TIM_PWM_Start+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_TIM_PWM_Start+0x138>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00e      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xfa>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d009      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xfa>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <HAL_TIM_PWM_Start+0x13c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xfa>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <HAL_TIM_PWM_Start+0x140>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d010      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	e007      	b.n	8003f42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800

08003f58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e093      	b.n	8004094 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe f94b 	bl	800221c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9c:	f023 0307 	bic.w	r3, r3, #7
 8003fa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f000 fbb9 	bl	8004724 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	4313      	orrs	r3, r2
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ff8:	f023 030c 	bic.w	r3, r3, #12
 8003ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	4313      	orrs	r3, r2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	011a      	lsls	r2, r3, #4
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	031b      	lsls	r3, r3, #12
 8004028:	4313      	orrs	r3, r2
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	4313      	orrs	r3, r2
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d102      	bne.n	80040d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040d2:	7b7b      	ldrb	r3, [r7, #13]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e069      	b.n	80041b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ec:	e031      	b.n	8004152 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d110      	bne.n	8004116 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040fa:	7b3b      	ldrb	r3, [r7, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e055      	b.n	80041b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004114:	e01d      	b.n	8004152 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d108      	bne.n	800412e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004122:	7b7b      	ldrb	r3, [r7, #13]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d102      	bne.n	800412e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004128:	7b3b      	ldrb	r3, [r7, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d001      	beq.n	8004132 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03e      	b.n	80041b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_TIM_Encoder_Start+0xc4>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b04      	cmp	r3, #4
 800415c:	d008      	beq.n	8004170 <HAL_TIM_Encoder_Start+0xd4>
 800415e:	e00f      	b.n	8004180 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fd5b 	bl	8004c24 <TIM_CCxChannelCmd>
      break;
 800416e:	e016      	b.n	800419e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	2104      	movs	r1, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fd53 	bl	8004c24 <TIM_CCxChannelCmd>
      break;
 800417e:	e00e      	b.n	800419e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fd4b 	bl	8004c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	2104      	movs	r1, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fd44 	bl	8004c24 <TIM_CCxChannelCmd>
      break;
 800419c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0202 	mvn.w	r2, #2
 80041e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa76 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa69 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa78 	bl	80046fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b04      	cmp	r3, #4
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b04      	cmp	r3, #4
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0204 	mvn.w	r2, #4
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa4c 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa3f 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa4e 	bl	80046fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b08      	cmp	r3, #8
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0208 	mvn.w	r2, #8
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2204      	movs	r2, #4
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa22 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fa15 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa24 	bl	80046fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0210 	mvn.w	r2, #16
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2208      	movs	r2, #8
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9f8 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f9eb 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f9fa 	bl	80046fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10e      	bne.n	800433c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0201 	mvn.w	r2, #1
 8004334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd fb92 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fd3a 	bl	8004ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f9be 	bl	8004710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d10e      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d107      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0220 	mvn.w	r2, #32
 80043b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fd05 	bl	8004dca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0ae      	b.n	8004544 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	f200 809f 	bhi.w	8004534 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004535 	.word	0x08004535
 8004404:	08004535 	.word	0x08004535
 8004408:	08004535 	.word	0x08004535
 800440c:	08004471 	.word	0x08004471
 8004410:	08004535 	.word	0x08004535
 8004414:	08004535 	.word	0x08004535
 8004418:	08004535 	.word	0x08004535
 800441c:	080044b3 	.word	0x080044b3
 8004420:	08004535 	.word	0x08004535
 8004424:	08004535 	.word	0x08004535
 8004428:	08004535 	.word	0x08004535
 800442c:	080044f3 	.word	0x080044f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f9d6 	bl	80047e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0208 	orr.w	r2, r2, #8
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0204 	bic.w	r2, r2, #4
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	619a      	str	r2, [r3, #24]
      break;
 800446e:	e064      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fa1c 	bl	80048b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	021a      	lsls	r2, r3, #8
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	619a      	str	r2, [r3, #24]
      break;
 80044b0:	e043      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fa65 	bl	8004988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0208 	orr.w	r2, r2, #8
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0204 	bic.w	r2, r2, #4
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	61da      	str	r2, [r3, #28]
      break;
 80044f0:	e023      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 faaf 	bl	8004a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69d9      	ldr	r1, [r3, #28]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	021a      	lsls	r2, r3, #8
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	61da      	str	r2, [r3, #28]
      break;
 8004532:	e002      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIM_ConfigClockSource+0x1c>
 8004564:	2302      	movs	r3, #2
 8004566:	e0b4      	b.n	80046d2 <HAL_TIM_ConfigClockSource+0x186>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800458e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d03e      	beq.n	8004620 <HAL_TIM_ConfigClockSource+0xd4>
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	f200 8087 	bhi.w	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ae:	f000 8086 	beq.w	80046be <HAL_TIM_ConfigClockSource+0x172>
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	d87f      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b70      	cmp	r3, #112	; 0x70
 80045ba:	d01a      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xa6>
 80045bc:	2b70      	cmp	r3, #112	; 0x70
 80045be:	d87b      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b60      	cmp	r3, #96	; 0x60
 80045c2:	d050      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x11a>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d877      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b50      	cmp	r3, #80	; 0x50
 80045ca:	d03c      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0xfa>
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d873      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d058      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x13a>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d86f      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b30      	cmp	r3, #48	; 0x30
 80045da:	d064      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d86b      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d060      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d867      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d05c      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x15a>
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d05a      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x15a>
 80045f0:	e062      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6899      	ldr	r1, [r3, #8]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f000 faf0 	bl	8004be6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	609a      	str	r2, [r3, #8]
      break;
 800461e:	e04f      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6899      	ldr	r1, [r3, #8]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f000 fad9 	bl	8004be6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004642:	609a      	str	r2, [r3, #8]
      break;
 8004644:	e03c      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fa50 	bl	8004af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2150      	movs	r1, #80	; 0x50
 800465e:	4618      	mov	r0, r3
 8004660:	f000 faa7 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 8004664:	e02c      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	461a      	mov	r2, r3
 8004674:	f000 fa6e 	bl	8004b54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2160      	movs	r1, #96	; 0x60
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fa97 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 8004684:	e01c      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	461a      	mov	r2, r3
 8004694:	f000 fa30 	bl	8004af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fa87 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80046a4:	e00c      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f000 fa7e 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80046b6:	e003      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e000      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
	...

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <TIM_Base_SetConfig+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00b      	beq.n	8004754 <TIM_Base_SetConfig+0x30>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d007      	beq.n	8004754 <TIM_Base_SetConfig+0x30>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <TIM_Base_SetConfig+0xbc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0x30>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <TIM_Base_SetConfig+0xc0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <TIM_Base_SetConfig+0xb8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x62>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x62>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <TIM_Base_SetConfig+0xbc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <TIM_Base_SetConfig+0xc0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <TIM_Base_SetConfig+0xb8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	615a      	str	r2, [r3, #20]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800

080047e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 0201 	bic.w	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 0302 	bic.w	r3, r3, #2
 8004830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <TIM_OC1_SetConfig+0xc8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10c      	bne.n	800485e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0308 	bic.w	r3, r3, #8
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <TIM_OC1_SetConfig+0xc8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d111      	bne.n	800488a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00

080048b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f023 0210 	bic.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0320 	bic.w	r3, r3, #32
 80048fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <TIM_OC2_SetConfig+0xd0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10d      	bne.n	8004930 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a14      	ldr	r2, [pc, #80]	; (8004984 <TIM_OC2_SetConfig+0xd0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d113      	bne.n	8004960 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00

08004988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <TIM_OC3_SetConfig+0xd0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10d      	bne.n	8004a02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <TIM_OC3_SetConfig+0xd0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d113      	bne.n	8004a32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00

08004a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	031b      	lsls	r3, r3, #12
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <TIM_OC4_SetConfig+0x98>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d109      	bne.n	8004ad0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00

08004af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 030a 	bic.w	r3, r3, #10
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f023 0210 	bic.w	r2, r3, #16
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	031b      	lsls	r3, r3, #12
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f043 0307 	orr.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b087      	sub	sp, #28
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	021a      	lsls	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	609a      	str	r2, [r3, #8]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2201      	movs	r2, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	401a      	ands	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e046      	b.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10c      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800

08004d28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e03d      	b.n	8004dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
	...

08004df0 <__libc_init_array>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	2600      	movs	r6, #0
 8004df4:	4d0c      	ldr	r5, [pc, #48]	; (8004e28 <__libc_init_array+0x38>)
 8004df6:	4c0d      	ldr	r4, [pc, #52]	; (8004e2c <__libc_init_array+0x3c>)
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	42a6      	cmp	r6, r4
 8004dfe:	d109      	bne.n	8004e14 <__libc_init_array+0x24>
 8004e00:	f000 fe2c 	bl	8005a5c <_init>
 8004e04:	2600      	movs	r6, #0
 8004e06:	4d0a      	ldr	r5, [pc, #40]	; (8004e30 <__libc_init_array+0x40>)
 8004e08:	4c0a      	ldr	r4, [pc, #40]	; (8004e34 <__libc_init_array+0x44>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	42a6      	cmp	r6, r4
 8004e10:	d105      	bne.n	8004e1e <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e18:	4798      	blx	r3
 8004e1a:	3601      	adds	r6, #1
 8004e1c:	e7ee      	b.n	8004dfc <__libc_init_array+0xc>
 8004e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e22:	4798      	blx	r3
 8004e24:	3601      	adds	r6, #1
 8004e26:	e7f2      	b.n	8004e0e <__libc_init_array+0x1e>
 8004e28:	08005e68 	.word	0x08005e68
 8004e2c:	08005e68 	.word	0x08005e68
 8004e30:	08005e68 	.word	0x08005e68
 8004e34:	08005e6c 	.word	0x08005e6c

08004e38 <memset>:
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4402      	add	r2, r0
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d100      	bne.n	8004e42 <memset+0xa>
 8004e40:	4770      	bx	lr
 8004e42:	f803 1b01 	strb.w	r1, [r3], #1
 8004e46:	e7f9      	b.n	8004e3c <memset+0x4>

08004e48 <cosf>:
 8004e48:	b507      	push	{r0, r1, r2, lr}
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <cosf+0x6c>)
 8004e4c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004e50:	4293      	cmp	r3, r2
 8004e52:	4601      	mov	r1, r0
 8004e54:	dc05      	bgt.n	8004e62 <cosf+0x1a>
 8004e56:	2100      	movs	r1, #0
 8004e58:	b003      	add	sp, #12
 8004e5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e5e:	f000 b9c3 	b.w	80051e8 <__kernel_cosf>
 8004e62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e66:	db04      	blt.n	8004e72 <cosf+0x2a>
 8004e68:	f7fb fe1c 	bl	8000aa4 <__aeabi_fsub>
 8004e6c:	b003      	add	sp, #12
 8004e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e72:	4669      	mov	r1, sp
 8004e74:	f000 f85a 	bl	8004f2c <__ieee754_rem_pio2f>
 8004e78:	f000 0203 	and.w	r2, r0, #3
 8004e7c:	2a01      	cmp	r2, #1
 8004e7e:	d007      	beq.n	8004e90 <cosf+0x48>
 8004e80:	2a02      	cmp	r2, #2
 8004e82:	d00c      	beq.n	8004e9e <cosf+0x56>
 8004e84:	b982      	cbnz	r2, 8004ea8 <cosf+0x60>
 8004e86:	9901      	ldr	r1, [sp, #4]
 8004e88:	9800      	ldr	r0, [sp, #0]
 8004e8a:	f000 f9ad 	bl	80051e8 <__kernel_cosf>
 8004e8e:	e7ed      	b.n	8004e6c <cosf+0x24>
 8004e90:	9901      	ldr	r1, [sp, #4]
 8004e92:	9800      	ldr	r0, [sp, #0]
 8004e94:	f000 fcda 	bl	800584c <__kernel_sinf>
 8004e98:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004e9c:	e7e6      	b.n	8004e6c <cosf+0x24>
 8004e9e:	9901      	ldr	r1, [sp, #4]
 8004ea0:	9800      	ldr	r0, [sp, #0]
 8004ea2:	f000 f9a1 	bl	80051e8 <__kernel_cosf>
 8004ea6:	e7f7      	b.n	8004e98 <cosf+0x50>
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	9901      	ldr	r1, [sp, #4]
 8004eac:	9800      	ldr	r0, [sp, #0]
 8004eae:	f000 fccd 	bl	800584c <__kernel_sinf>
 8004eb2:	e7db      	b.n	8004e6c <cosf+0x24>
 8004eb4:	3f490fd8 	.word	0x3f490fd8

08004eb8 <sinf>:
 8004eb8:	b507      	push	{r0, r1, r2, lr}
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <sinf+0x70>)
 8004ebc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	dc06      	bgt.n	8004ed4 <sinf+0x1c>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	b003      	add	sp, #12
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	f000 bcbc 	b.w	800584c <__kernel_sinf>
 8004ed4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004ed8:	db04      	blt.n	8004ee4 <sinf+0x2c>
 8004eda:	f7fb fde3 	bl	8000aa4 <__aeabi_fsub>
 8004ede:	b003      	add	sp, #12
 8004ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ee4:	4669      	mov	r1, sp
 8004ee6:	f000 f821 	bl	8004f2c <__ieee754_rem_pio2f>
 8004eea:	f000 0003 	and.w	r0, r0, #3
 8004eee:	2801      	cmp	r0, #1
 8004ef0:	d008      	beq.n	8004f04 <sinf+0x4c>
 8004ef2:	2802      	cmp	r0, #2
 8004ef4:	d00b      	beq.n	8004f0e <sinf+0x56>
 8004ef6:	b990      	cbnz	r0, 8004f1e <sinf+0x66>
 8004ef8:	2201      	movs	r2, #1
 8004efa:	9901      	ldr	r1, [sp, #4]
 8004efc:	9800      	ldr	r0, [sp, #0]
 8004efe:	f000 fca5 	bl	800584c <__kernel_sinf>
 8004f02:	e7ec      	b.n	8004ede <sinf+0x26>
 8004f04:	9901      	ldr	r1, [sp, #4]
 8004f06:	9800      	ldr	r0, [sp, #0]
 8004f08:	f000 f96e 	bl	80051e8 <__kernel_cosf>
 8004f0c:	e7e7      	b.n	8004ede <sinf+0x26>
 8004f0e:	2201      	movs	r2, #1
 8004f10:	9901      	ldr	r1, [sp, #4]
 8004f12:	9800      	ldr	r0, [sp, #0]
 8004f14:	f000 fc9a 	bl	800584c <__kernel_sinf>
 8004f18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004f1c:	e7df      	b.n	8004ede <sinf+0x26>
 8004f1e:	9901      	ldr	r1, [sp, #4]
 8004f20:	9800      	ldr	r0, [sp, #0]
 8004f22:	f000 f961 	bl	80051e8 <__kernel_cosf>
 8004f26:	e7f7      	b.n	8004f18 <sinf+0x60>
 8004f28:	3f490fd8 	.word	0x3f490fd8

08004f2c <__ieee754_rem_pio2f>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	4aa0      	ldr	r2, [pc, #640]	; (80051b4 <__ieee754_rem_pio2f+0x288>)
 8004f32:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004f36:	4296      	cmp	r6, r2
 8004f38:	460c      	mov	r4, r1
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	dc04      	bgt.n	8004f4a <__ieee754_rem_pio2f+0x1e>
 8004f40:	2300      	movs	r3, #0
 8004f42:	6008      	str	r0, [r1, #0]
 8004f44:	604b      	str	r3, [r1, #4]
 8004f46:	2500      	movs	r5, #0
 8004f48:	e01a      	b.n	8004f80 <__ieee754_rem_pio2f+0x54>
 8004f4a:	4a9b      	ldr	r2, [pc, #620]	; (80051b8 <__ieee754_rem_pio2f+0x28c>)
 8004f4c:	4296      	cmp	r6, r2
 8004f4e:	dc4b      	bgt.n	8004fe8 <__ieee754_rem_pio2f+0xbc>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	499a      	ldr	r1, [pc, #616]	; (80051bc <__ieee754_rem_pio2f+0x290>)
 8004f54:	4f9a      	ldr	r7, [pc, #616]	; (80051c0 <__ieee754_rem_pio2f+0x294>)
 8004f56:	f026 060f 	bic.w	r6, r6, #15
 8004f5a:	dd23      	ble.n	8004fa4 <__ieee754_rem_pio2f+0x78>
 8004f5c:	f7fb fda2 	bl	8000aa4 <__aeabi_fsub>
 8004f60:	42be      	cmp	r6, r7
 8004f62:	4605      	mov	r5, r0
 8004f64:	d010      	beq.n	8004f88 <__ieee754_rem_pio2f+0x5c>
 8004f66:	4997      	ldr	r1, [pc, #604]	; (80051c4 <__ieee754_rem_pio2f+0x298>)
 8004f68:	f7fb fd9c 	bl	8000aa4 <__aeabi_fsub>
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	6020      	str	r0, [r4, #0]
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7fb fd97 	bl	8000aa4 <__aeabi_fsub>
 8004f76:	4993      	ldr	r1, [pc, #588]	; (80051c4 <__ieee754_rem_pio2f+0x298>)
 8004f78:	f7fb fd94 	bl	8000aa4 <__aeabi_fsub>
 8004f7c:	2501      	movs	r5, #1
 8004f7e:	6060      	str	r0, [r4, #4]
 8004f80:	4628      	mov	r0, r5
 8004f82:	b007      	add	sp, #28
 8004f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f88:	498f      	ldr	r1, [pc, #572]	; (80051c8 <__ieee754_rem_pio2f+0x29c>)
 8004f8a:	f7fb fd8b 	bl	8000aa4 <__aeabi_fsub>
 8004f8e:	498f      	ldr	r1, [pc, #572]	; (80051cc <__ieee754_rem_pio2f+0x2a0>)
 8004f90:	4605      	mov	r5, r0
 8004f92:	f7fb fd87 	bl	8000aa4 <__aeabi_fsub>
 8004f96:	4601      	mov	r1, r0
 8004f98:	6020      	str	r0, [r4, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f7fb fd82 	bl	8000aa4 <__aeabi_fsub>
 8004fa0:	498a      	ldr	r1, [pc, #552]	; (80051cc <__ieee754_rem_pio2f+0x2a0>)
 8004fa2:	e7e9      	b.n	8004f78 <__ieee754_rem_pio2f+0x4c>
 8004fa4:	f7fb fd80 	bl	8000aa8 <__addsf3>
 8004fa8:	42be      	cmp	r6, r7
 8004faa:	4605      	mov	r5, r0
 8004fac:	d00e      	beq.n	8004fcc <__ieee754_rem_pio2f+0xa0>
 8004fae:	4985      	ldr	r1, [pc, #532]	; (80051c4 <__ieee754_rem_pio2f+0x298>)
 8004fb0:	f7fb fd7a 	bl	8000aa8 <__addsf3>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	6020      	str	r0, [r4, #0]
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7fb fd73 	bl	8000aa4 <__aeabi_fsub>
 8004fbe:	4981      	ldr	r1, [pc, #516]	; (80051c4 <__ieee754_rem_pio2f+0x298>)
 8004fc0:	f7fb fd72 	bl	8000aa8 <__addsf3>
 8004fc4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004fc8:	6060      	str	r0, [r4, #4]
 8004fca:	e7d9      	b.n	8004f80 <__ieee754_rem_pio2f+0x54>
 8004fcc:	497e      	ldr	r1, [pc, #504]	; (80051c8 <__ieee754_rem_pio2f+0x29c>)
 8004fce:	f7fb fd6b 	bl	8000aa8 <__addsf3>
 8004fd2:	497e      	ldr	r1, [pc, #504]	; (80051cc <__ieee754_rem_pio2f+0x2a0>)
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	f7fb fd67 	bl	8000aa8 <__addsf3>
 8004fda:	4601      	mov	r1, r0
 8004fdc:	6020      	str	r0, [r4, #0]
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f7fb fd60 	bl	8000aa4 <__aeabi_fsub>
 8004fe4:	4979      	ldr	r1, [pc, #484]	; (80051cc <__ieee754_rem_pio2f+0x2a0>)
 8004fe6:	e7eb      	b.n	8004fc0 <__ieee754_rem_pio2f+0x94>
 8004fe8:	4a79      	ldr	r2, [pc, #484]	; (80051d0 <__ieee754_rem_pio2f+0x2a4>)
 8004fea:	4296      	cmp	r6, r2
 8004fec:	f300 8091 	bgt.w	8005112 <__ieee754_rem_pio2f+0x1e6>
 8004ff0:	f000 fca2 	bl	8005938 <fabsf>
 8004ff4:	4977      	ldr	r1, [pc, #476]	; (80051d4 <__ieee754_rem_pio2f+0x2a8>)
 8004ff6:	4607      	mov	r7, r0
 8004ff8:	f7fb fe5e 	bl	8000cb8 <__aeabi_fmul>
 8004ffc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005000:	f7fb fd52 	bl	8000aa8 <__addsf3>
 8005004:	f7fc f81e 	bl	8001044 <__aeabi_f2iz>
 8005008:	4605      	mov	r5, r0
 800500a:	f7fb fe01 	bl	8000c10 <__aeabi_i2f>
 800500e:	496b      	ldr	r1, [pc, #428]	; (80051bc <__ieee754_rem_pio2f+0x290>)
 8005010:	4681      	mov	r9, r0
 8005012:	f7fb fe51 	bl	8000cb8 <__aeabi_fmul>
 8005016:	4601      	mov	r1, r0
 8005018:	4638      	mov	r0, r7
 800501a:	f7fb fd43 	bl	8000aa4 <__aeabi_fsub>
 800501e:	4969      	ldr	r1, [pc, #420]	; (80051c4 <__ieee754_rem_pio2f+0x298>)
 8005020:	4680      	mov	r8, r0
 8005022:	4648      	mov	r0, r9
 8005024:	f7fb fe48 	bl	8000cb8 <__aeabi_fmul>
 8005028:	2d1f      	cmp	r5, #31
 800502a:	4607      	mov	r7, r0
 800502c:	dc0c      	bgt.n	8005048 <__ieee754_rem_pio2f+0x11c>
 800502e:	4a6a      	ldr	r2, [pc, #424]	; (80051d8 <__ieee754_rem_pio2f+0x2ac>)
 8005030:	1e69      	subs	r1, r5, #1
 8005032:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005036:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <__ieee754_rem_pio2f+0x11c>
 800503e:	4639      	mov	r1, r7
 8005040:	4640      	mov	r0, r8
 8005042:	f7fb fd2f 	bl	8000aa4 <__aeabi_fsub>
 8005046:	e00b      	b.n	8005060 <__ieee754_rem_pio2f+0x134>
 8005048:	4639      	mov	r1, r7
 800504a:	4640      	mov	r0, r8
 800504c:	f7fb fd2a 	bl	8000aa4 <__aeabi_fsub>
 8005050:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005054:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8005058:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800505c:	2e08      	cmp	r6, #8
 800505e:	dc01      	bgt.n	8005064 <__ieee754_rem_pio2f+0x138>
 8005060:	6020      	str	r0, [r4, #0]
 8005062:	e026      	b.n	80050b2 <__ieee754_rem_pio2f+0x186>
 8005064:	4958      	ldr	r1, [pc, #352]	; (80051c8 <__ieee754_rem_pio2f+0x29c>)
 8005066:	4648      	mov	r0, r9
 8005068:	f7fb fe26 	bl	8000cb8 <__aeabi_fmul>
 800506c:	4607      	mov	r7, r0
 800506e:	4601      	mov	r1, r0
 8005070:	4640      	mov	r0, r8
 8005072:	f7fb fd17 	bl	8000aa4 <__aeabi_fsub>
 8005076:	4601      	mov	r1, r0
 8005078:	4606      	mov	r6, r0
 800507a:	4640      	mov	r0, r8
 800507c:	f7fb fd12 	bl	8000aa4 <__aeabi_fsub>
 8005080:	4639      	mov	r1, r7
 8005082:	f7fb fd0f 	bl	8000aa4 <__aeabi_fsub>
 8005086:	4607      	mov	r7, r0
 8005088:	4950      	ldr	r1, [pc, #320]	; (80051cc <__ieee754_rem_pio2f+0x2a0>)
 800508a:	4648      	mov	r0, r9
 800508c:	f7fb fe14 	bl	8000cb8 <__aeabi_fmul>
 8005090:	4639      	mov	r1, r7
 8005092:	f7fb fd07 	bl	8000aa4 <__aeabi_fsub>
 8005096:	4601      	mov	r1, r0
 8005098:	4607      	mov	r7, r0
 800509a:	4630      	mov	r0, r6
 800509c:	f7fb fd02 	bl	8000aa4 <__aeabi_fsub>
 80050a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80050a4:	ebab 0b03 	sub.w	fp, fp, r3
 80050a8:	f1bb 0f19 	cmp.w	fp, #25
 80050ac:	dc16      	bgt.n	80050dc <__ieee754_rem_pio2f+0x1b0>
 80050ae:	46b0      	mov	r8, r6
 80050b0:	6020      	str	r0, [r4, #0]
 80050b2:	6826      	ldr	r6, [r4, #0]
 80050b4:	4640      	mov	r0, r8
 80050b6:	4631      	mov	r1, r6
 80050b8:	f7fb fcf4 	bl	8000aa4 <__aeabi_fsub>
 80050bc:	4639      	mov	r1, r7
 80050be:	f7fb fcf1 	bl	8000aa4 <__aeabi_fsub>
 80050c2:	f1ba 0f00 	cmp.w	sl, #0
 80050c6:	6060      	str	r0, [r4, #4]
 80050c8:	f6bf af5a 	bge.w	8004f80 <__ieee754_rem_pio2f+0x54>
 80050cc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80050d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80050d4:	6026      	str	r6, [r4, #0]
 80050d6:	6060      	str	r0, [r4, #4]
 80050d8:	426d      	negs	r5, r5
 80050da:	e751      	b.n	8004f80 <__ieee754_rem_pio2f+0x54>
 80050dc:	493f      	ldr	r1, [pc, #252]	; (80051dc <__ieee754_rem_pio2f+0x2b0>)
 80050de:	4648      	mov	r0, r9
 80050e0:	f7fb fdea 	bl	8000cb8 <__aeabi_fmul>
 80050e4:	4607      	mov	r7, r0
 80050e6:	4601      	mov	r1, r0
 80050e8:	4630      	mov	r0, r6
 80050ea:	f7fb fcdb 	bl	8000aa4 <__aeabi_fsub>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4680      	mov	r8, r0
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7fb fcd6 	bl	8000aa4 <__aeabi_fsub>
 80050f8:	4639      	mov	r1, r7
 80050fa:	f7fb fcd3 	bl	8000aa4 <__aeabi_fsub>
 80050fe:	4606      	mov	r6, r0
 8005100:	4937      	ldr	r1, [pc, #220]	; (80051e0 <__ieee754_rem_pio2f+0x2b4>)
 8005102:	4648      	mov	r0, r9
 8005104:	f7fb fdd8 	bl	8000cb8 <__aeabi_fmul>
 8005108:	4631      	mov	r1, r6
 800510a:	f7fb fccb 	bl	8000aa4 <__aeabi_fsub>
 800510e:	4607      	mov	r7, r0
 8005110:	e795      	b.n	800503e <__ieee754_rem_pio2f+0x112>
 8005112:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005116:	db05      	blt.n	8005124 <__ieee754_rem_pio2f+0x1f8>
 8005118:	4601      	mov	r1, r0
 800511a:	f7fb fcc3 	bl	8000aa4 <__aeabi_fsub>
 800511e:	6060      	str	r0, [r4, #4]
 8005120:	6020      	str	r0, [r4, #0]
 8005122:	e710      	b.n	8004f46 <__ieee754_rem_pio2f+0x1a>
 8005124:	15f7      	asrs	r7, r6, #23
 8005126:	3f86      	subs	r7, #134	; 0x86
 8005128:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800512c:	4630      	mov	r0, r6
 800512e:	f7fb ff89 	bl	8001044 <__aeabi_f2iz>
 8005132:	f7fb fd6d 	bl	8000c10 <__aeabi_i2f>
 8005136:	4601      	mov	r1, r0
 8005138:	9003      	str	r0, [sp, #12]
 800513a:	4630      	mov	r0, r6
 800513c:	f7fb fcb2 	bl	8000aa4 <__aeabi_fsub>
 8005140:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005144:	f7fb fdb8 	bl	8000cb8 <__aeabi_fmul>
 8005148:	4606      	mov	r6, r0
 800514a:	f7fb ff7b 	bl	8001044 <__aeabi_f2iz>
 800514e:	f7fb fd5f 	bl	8000c10 <__aeabi_i2f>
 8005152:	4601      	mov	r1, r0
 8005154:	9004      	str	r0, [sp, #16]
 8005156:	4605      	mov	r5, r0
 8005158:	4630      	mov	r0, r6
 800515a:	f7fb fca3 	bl	8000aa4 <__aeabi_fsub>
 800515e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005162:	f7fb fda9 	bl	8000cb8 <__aeabi_fmul>
 8005166:	2100      	movs	r1, #0
 8005168:	9005      	str	r0, [sp, #20]
 800516a:	f7fb ff39 	bl	8000fe0 <__aeabi_fcmpeq>
 800516e:	b1f0      	cbz	r0, 80051ae <__ieee754_rem_pio2f+0x282>
 8005170:	2100      	movs	r1, #0
 8005172:	4628      	mov	r0, r5
 8005174:	f7fb ff34 	bl	8000fe0 <__aeabi_fcmpeq>
 8005178:	2800      	cmp	r0, #0
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2302      	moveq	r3, #2
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <__ieee754_rem_pio2f+0x2b8>)
 8005182:	4621      	mov	r1, r4
 8005184:	9201      	str	r2, [sp, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	a803      	add	r0, sp, #12
 800518a:	9200      	str	r2, [sp, #0]
 800518c:	463a      	mov	r2, r7
 800518e:	f000 f8ab 	bl	80052e8 <__kernel_rem_pio2f>
 8005192:	f1ba 0f00 	cmp.w	sl, #0
 8005196:	4605      	mov	r5, r0
 8005198:	f6bf aef2 	bge.w	8004f80 <__ieee754_rem_pio2f+0x54>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051aa:	6063      	str	r3, [r4, #4]
 80051ac:	e794      	b.n	80050d8 <__ieee754_rem_pio2f+0x1ac>
 80051ae:	2303      	movs	r3, #3
 80051b0:	e7e6      	b.n	8005180 <__ieee754_rem_pio2f+0x254>
 80051b2:	bf00      	nop
 80051b4:	3f490fd8 	.word	0x3f490fd8
 80051b8:	4016cbe3 	.word	0x4016cbe3
 80051bc:	3fc90f80 	.word	0x3fc90f80
 80051c0:	3fc90fd0 	.word	0x3fc90fd0
 80051c4:	37354443 	.word	0x37354443
 80051c8:	37354400 	.word	0x37354400
 80051cc:	2e85a308 	.word	0x2e85a308
 80051d0:	43490f80 	.word	0x43490f80
 80051d4:	3f22f984 	.word	0x3f22f984
 80051d8:	08005a98 	.word	0x08005a98
 80051dc:	2e85a300 	.word	0x2e85a300
 80051e0:	248d3132 	.word	0x248d3132
 80051e4:	08005b18 	.word	0x08005b18

080051e8 <__kernel_cosf>:
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80051f0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80051f4:	4606      	mov	r6, r0
 80051f6:	4688      	mov	r8, r1
 80051f8:	da03      	bge.n	8005202 <__kernel_cosf+0x1a>
 80051fa:	f7fb ff23 	bl	8001044 <__aeabi_f2iz>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d05c      	beq.n	80052bc <__kernel_cosf+0xd4>
 8005202:	4631      	mov	r1, r6
 8005204:	4630      	mov	r0, r6
 8005206:	f7fb fd57 	bl	8000cb8 <__aeabi_fmul>
 800520a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800520e:	4605      	mov	r5, r0
 8005210:	f7fb fd52 	bl	8000cb8 <__aeabi_fmul>
 8005214:	492b      	ldr	r1, [pc, #172]	; (80052c4 <__kernel_cosf+0xdc>)
 8005216:	4607      	mov	r7, r0
 8005218:	4628      	mov	r0, r5
 800521a:	f7fb fd4d 	bl	8000cb8 <__aeabi_fmul>
 800521e:	492a      	ldr	r1, [pc, #168]	; (80052c8 <__kernel_cosf+0xe0>)
 8005220:	f7fb fc42 	bl	8000aa8 <__addsf3>
 8005224:	4629      	mov	r1, r5
 8005226:	f7fb fd47 	bl	8000cb8 <__aeabi_fmul>
 800522a:	4928      	ldr	r1, [pc, #160]	; (80052cc <__kernel_cosf+0xe4>)
 800522c:	f7fb fc3a 	bl	8000aa4 <__aeabi_fsub>
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fd41 	bl	8000cb8 <__aeabi_fmul>
 8005236:	4926      	ldr	r1, [pc, #152]	; (80052d0 <__kernel_cosf+0xe8>)
 8005238:	f7fb fc36 	bl	8000aa8 <__addsf3>
 800523c:	4629      	mov	r1, r5
 800523e:	f7fb fd3b 	bl	8000cb8 <__aeabi_fmul>
 8005242:	4924      	ldr	r1, [pc, #144]	; (80052d4 <__kernel_cosf+0xec>)
 8005244:	f7fb fc2e 	bl	8000aa4 <__aeabi_fsub>
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb fd35 	bl	8000cb8 <__aeabi_fmul>
 800524e:	4922      	ldr	r1, [pc, #136]	; (80052d8 <__kernel_cosf+0xf0>)
 8005250:	f7fb fc2a 	bl	8000aa8 <__addsf3>
 8005254:	4629      	mov	r1, r5
 8005256:	f7fb fd2f 	bl	8000cb8 <__aeabi_fmul>
 800525a:	4629      	mov	r1, r5
 800525c:	f7fb fd2c 	bl	8000cb8 <__aeabi_fmul>
 8005260:	4641      	mov	r1, r8
 8005262:	4605      	mov	r5, r0
 8005264:	4630      	mov	r0, r6
 8005266:	f7fb fd27 	bl	8000cb8 <__aeabi_fmul>
 800526a:	4601      	mov	r1, r0
 800526c:	4628      	mov	r0, r5
 800526e:	f7fb fc19 	bl	8000aa4 <__aeabi_fsub>
 8005272:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <__kernel_cosf+0xf4>)
 8005274:	4605      	mov	r5, r0
 8005276:	429c      	cmp	r4, r3
 8005278:	dc0a      	bgt.n	8005290 <__kernel_cosf+0xa8>
 800527a:	4601      	mov	r1, r0
 800527c:	4638      	mov	r0, r7
 800527e:	f7fb fc11 	bl	8000aa4 <__aeabi_fsub>
 8005282:	4601      	mov	r1, r0
 8005284:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005288:	f7fb fc0c 	bl	8000aa4 <__aeabi_fsub>
 800528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <__kernel_cosf+0xf8>)
 8005292:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005296:	429c      	cmp	r4, r3
 8005298:	bfcc      	ite	gt
 800529a:	4c12      	ldrgt	r4, [pc, #72]	; (80052e4 <__kernel_cosf+0xfc>)
 800529c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80052a0:	4621      	mov	r1, r4
 80052a2:	f7fb fbff 	bl	8000aa4 <__aeabi_fsub>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4606      	mov	r6, r0
 80052aa:	4638      	mov	r0, r7
 80052ac:	f7fb fbfa 	bl	8000aa4 <__aeabi_fsub>
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fbf7 	bl	8000aa4 <__aeabi_fsub>
 80052b6:	4601      	mov	r1, r0
 80052b8:	4630      	mov	r0, r6
 80052ba:	e7e5      	b.n	8005288 <__kernel_cosf+0xa0>
 80052bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80052c0:	e7e4      	b.n	800528c <__kernel_cosf+0xa4>
 80052c2:	bf00      	nop
 80052c4:	ad47d74e 	.word	0xad47d74e
 80052c8:	310f74f6 	.word	0x310f74f6
 80052cc:	3493f27c 	.word	0x3493f27c
 80052d0:	37d00d01 	.word	0x37d00d01
 80052d4:	3ab60b61 	.word	0x3ab60b61
 80052d8:	3d2aaaab 	.word	0x3d2aaaab
 80052dc:	3e999999 	.word	0x3e999999
 80052e0:	3f480000 	.word	0x3f480000
 80052e4:	3e900000 	.word	0x3e900000

080052e8 <__kernel_rem_pio2f>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	b0db      	sub	sp, #364	; 0x16c
 80052ee:	9202      	str	r2, [sp, #8]
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80052f4:	4bb2      	ldr	r3, [pc, #712]	; (80055c0 <__kernel_rem_pio2f+0x2d8>)
 80052f6:	9005      	str	r0, [sp, #20]
 80052f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fc:	9100      	str	r1, [sp, #0]
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	9b04      	ldr	r3, [sp, #16]
 8005302:	3b01      	subs	r3, #1
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	9b02      	ldr	r3, [sp, #8]
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	f2c0 809b 	blt.w	8005444 <__kernel_rem_pio2f+0x15c>
 800530e:	1edc      	subs	r4, r3, #3
 8005310:	bf48      	it	mi
 8005312:	1d1c      	addmi	r4, r3, #4
 8005314:	10e4      	asrs	r4, r4, #3
 8005316:	2500      	movs	r5, #0
 8005318:	f04f 0b00 	mov.w	fp, #0
 800531c:	1c67      	adds	r7, r4, #1
 800531e:	00fb      	lsls	r3, r7, #3
 8005320:	9306      	str	r3, [sp, #24]
 8005322:	9b02      	ldr	r3, [sp, #8]
 8005324:	9a03      	ldr	r2, [sp, #12]
 8005326:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	eba4 0802 	sub.w	r8, r4, r2
 8005330:	eb03 0902 	add.w	r9, r3, r2
 8005334:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005336:	ae1e      	add	r6, sp, #120	; 0x78
 8005338:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800533c:	454d      	cmp	r5, r9
 800533e:	f340 8083 	ble.w	8005448 <__kernel_rem_pio2f+0x160>
 8005342:	9a04      	ldr	r2, [sp, #16]
 8005344:	ab1e      	add	r3, sp, #120	; 0x78
 8005346:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800534a:	f04f 0900 	mov.w	r9, #0
 800534e:	2300      	movs	r3, #0
 8005350:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8005354:	9a01      	ldr	r2, [sp, #4]
 8005356:	4591      	cmp	r9, r2
 8005358:	f340 809e 	ble.w	8005498 <__kernel_rem_pio2f+0x1b0>
 800535c:	4613      	mov	r3, r2
 800535e:	aa0a      	add	r2, sp, #40	; 0x28
 8005360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005364:	9308      	str	r3, [sp, #32]
 8005366:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005368:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800536c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005370:	9307      	str	r3, [sp, #28]
 8005372:	ac0a      	add	r4, sp, #40	; 0x28
 8005374:	4626      	mov	r6, r4
 8005376:	46c3      	mov	fp, r8
 8005378:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800537c:	ab5a      	add	r3, sp, #360	; 0x168
 800537e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8005382:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8005386:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800538a:	f1bb 0f00 	cmp.w	fp, #0
 800538e:	f300 8088 	bgt.w	80054a2 <__kernel_rem_pio2f+0x1ba>
 8005392:	4639      	mov	r1, r7
 8005394:	4628      	mov	r0, r5
 8005396:	f000 fb15 	bl	80059c4 <scalbnf>
 800539a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800539e:	4605      	mov	r5, r0
 80053a0:	f7fb fc8a 	bl	8000cb8 <__aeabi_fmul>
 80053a4:	f000 facc 	bl	8005940 <floorf>
 80053a8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80053ac:	f7fb fc84 	bl	8000cb8 <__aeabi_fmul>
 80053b0:	4601      	mov	r1, r0
 80053b2:	4628      	mov	r0, r5
 80053b4:	f7fb fb76 	bl	8000aa4 <__aeabi_fsub>
 80053b8:	4605      	mov	r5, r0
 80053ba:	f7fb fe43 	bl	8001044 <__aeabi_f2iz>
 80053be:	4606      	mov	r6, r0
 80053c0:	f7fb fc26 	bl	8000c10 <__aeabi_i2f>
 80053c4:	4601      	mov	r1, r0
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7fb fb6c 	bl	8000aa4 <__aeabi_fsub>
 80053cc:	2f00      	cmp	r7, #0
 80053ce:	4681      	mov	r9, r0
 80053d0:	f340 8086 	ble.w	80054e0 <__kernel_rem_pio2f+0x1f8>
 80053d4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80053d8:	ab0a      	add	r3, sp, #40	; 0x28
 80053da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80053de:	f1c7 0108 	rsb	r1, r7, #8
 80053e2:	fa45 f301 	asr.w	r3, r5, r1
 80053e6:	441e      	add	r6, r3
 80053e8:	408b      	lsls	r3, r1
 80053ea:	1aed      	subs	r5, r5, r3
 80053ec:	f1c7 0007 	rsb	r0, r7, #7
 80053f0:	ab0a      	add	r3, sp, #40	; 0x28
 80053f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80053f6:	4105      	asrs	r5, r0
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	dd7f      	ble.n	80054fc <__kernel_rem_pio2f+0x214>
 80053fc:	2200      	movs	r2, #0
 80053fe:	4692      	mov	sl, r2
 8005400:	3601      	adds	r6, #1
 8005402:	4590      	cmp	r8, r2
 8005404:	f300 80b0 	bgt.w	8005568 <__kernel_rem_pio2f+0x280>
 8005408:	2f00      	cmp	r7, #0
 800540a:	dd05      	ble.n	8005418 <__kernel_rem_pio2f+0x130>
 800540c:	2f01      	cmp	r7, #1
 800540e:	f000 80bd 	beq.w	800558c <__kernel_rem_pio2f+0x2a4>
 8005412:	2f02      	cmp	r7, #2
 8005414:	f000 80c5 	beq.w	80055a2 <__kernel_rem_pio2f+0x2ba>
 8005418:	2d02      	cmp	r5, #2
 800541a:	d16f      	bne.n	80054fc <__kernel_rem_pio2f+0x214>
 800541c:	4649      	mov	r1, r9
 800541e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005422:	f7fb fb3f 	bl	8000aa4 <__aeabi_fsub>
 8005426:	4681      	mov	r9, r0
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	d066      	beq.n	80054fc <__kernel_rem_pio2f+0x214>
 800542e:	4639      	mov	r1, r7
 8005430:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005434:	f000 fac6 	bl	80059c4 <scalbnf>
 8005438:	4601      	mov	r1, r0
 800543a:	4648      	mov	r0, r9
 800543c:	f7fb fb32 	bl	8000aa4 <__aeabi_fsub>
 8005440:	4681      	mov	r9, r0
 8005442:	e05b      	b.n	80054fc <__kernel_rem_pio2f+0x214>
 8005444:	2400      	movs	r4, #0
 8005446:	e766      	b.n	8005316 <__kernel_rem_pio2f+0x2e>
 8005448:	eb18 0f05 	cmn.w	r8, r5
 800544c:	d407      	bmi.n	800545e <__kernel_rem_pio2f+0x176>
 800544e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8005452:	f7fb fbdd 	bl	8000c10 <__aeabi_i2f>
 8005456:	f846 0b04 	str.w	r0, [r6], #4
 800545a:	3501      	adds	r5, #1
 800545c:	e76e      	b.n	800533c <__kernel_rem_pio2f+0x54>
 800545e:	4658      	mov	r0, fp
 8005460:	e7f9      	b.n	8005456 <__kernel_rem_pio2f+0x16e>
 8005462:	9307      	str	r3, [sp, #28]
 8005464:	9b05      	ldr	r3, [sp, #20]
 8005466:	f8da 1000 	ldr.w	r1, [sl]
 800546a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800546e:	f7fb fc23 	bl	8000cb8 <__aeabi_fmul>
 8005472:	4601      	mov	r1, r0
 8005474:	4630      	mov	r0, r6
 8005476:	f7fb fb17 	bl	8000aa8 <__addsf3>
 800547a:	4606      	mov	r6, r0
 800547c:	9b07      	ldr	r3, [sp, #28]
 800547e:	f108 0801 	add.w	r8, r8, #1
 8005482:	9a03      	ldr	r2, [sp, #12]
 8005484:	f1aa 0a04 	sub.w	sl, sl, #4
 8005488:	4590      	cmp	r8, r2
 800548a:	ddea      	ble.n	8005462 <__kernel_rem_pio2f+0x17a>
 800548c:	f84b 6b04 	str.w	r6, [fp], #4
 8005490:	f109 0901 	add.w	r9, r9, #1
 8005494:	3504      	adds	r5, #4
 8005496:	e75d      	b.n	8005354 <__kernel_rem_pio2f+0x6c>
 8005498:	46aa      	mov	sl, r5
 800549a:	461e      	mov	r6, r3
 800549c:	f04f 0800 	mov.w	r8, #0
 80054a0:	e7ef      	b.n	8005482 <__kernel_rem_pio2f+0x19a>
 80054a2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80054a6:	4628      	mov	r0, r5
 80054a8:	f7fb fc06 	bl	8000cb8 <__aeabi_fmul>
 80054ac:	f7fb fdca 	bl	8001044 <__aeabi_f2iz>
 80054b0:	f7fb fbae 	bl	8000c10 <__aeabi_i2f>
 80054b4:	4649      	mov	r1, r9
 80054b6:	9009      	str	r0, [sp, #36]	; 0x24
 80054b8:	f7fb fbfe 	bl	8000cb8 <__aeabi_fmul>
 80054bc:	4601      	mov	r1, r0
 80054be:	4628      	mov	r0, r5
 80054c0:	f7fb faf0 	bl	8000aa4 <__aeabi_fsub>
 80054c4:	f7fb fdbe 	bl	8001044 <__aeabi_f2iz>
 80054c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80054ce:	f846 0b04 	str.w	r0, [r6], #4
 80054d2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fb fae6 	bl	8000aa8 <__addsf3>
 80054dc:	4605      	mov	r5, r0
 80054de:	e754      	b.n	800538a <__kernel_rem_pio2f+0xa2>
 80054e0:	d106      	bne.n	80054f0 <__kernel_rem_pio2f+0x208>
 80054e2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80054e6:	aa0a      	add	r2, sp, #40	; 0x28
 80054e8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80054ec:	11ed      	asrs	r5, r5, #7
 80054ee:	e783      	b.n	80053f8 <__kernel_rem_pio2f+0x110>
 80054f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80054f4:	f7fb fd92 	bl	800101c <__aeabi_fcmpge>
 80054f8:	4605      	mov	r5, r0
 80054fa:	bb98      	cbnz	r0, 8005564 <__kernel_rem_pio2f+0x27c>
 80054fc:	2100      	movs	r1, #0
 80054fe:	4648      	mov	r0, r9
 8005500:	f7fb fd6e 	bl	8000fe0 <__aeabi_fcmpeq>
 8005504:	2800      	cmp	r0, #0
 8005506:	f000 8098 	beq.w	800563a <__kernel_rem_pio2f+0x352>
 800550a:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800550e:	4623      	mov	r3, r4
 8005510:	2200      	movs	r2, #0
 8005512:	9901      	ldr	r1, [sp, #4]
 8005514:	428b      	cmp	r3, r1
 8005516:	da4c      	bge.n	80055b2 <__kernel_rem_pio2f+0x2ca>
 8005518:	2a00      	cmp	r2, #0
 800551a:	d07a      	beq.n	8005612 <__kernel_rem_pio2f+0x32a>
 800551c:	ab0a      	add	r3, sp, #40	; 0x28
 800551e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005522:	3f08      	subs	r7, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8086 	beq.w	8005636 <__kernel_rem_pio2f+0x34e>
 800552a:	4639      	mov	r1, r7
 800552c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005530:	f000 fa48 	bl	80059c4 <scalbnf>
 8005534:	46a2      	mov	sl, r4
 8005536:	4681      	mov	r9, r0
 8005538:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800553c:	af46      	add	r7, sp, #280	; 0x118
 800553e:	f1ba 0f00 	cmp.w	sl, #0
 8005542:	f280 80af 	bge.w	80056a4 <__kernel_rem_pio2f+0x3bc>
 8005546:	4627      	mov	r7, r4
 8005548:	2200      	movs	r2, #0
 800554a:	2f00      	cmp	r7, #0
 800554c:	f2c0 80d9 	blt.w	8005702 <__kernel_rem_pio2f+0x41a>
 8005550:	a946      	add	r1, sp, #280	; 0x118
 8005552:	4690      	mov	r8, r2
 8005554:	f04f 0a00 	mov.w	sl, #0
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <__kernel_rem_pio2f+0x2dc>)
 800555a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800555e:	eba4 0907 	sub.w	r9, r4, r7
 8005562:	e0c2      	b.n	80056ea <__kernel_rem_pio2f+0x402>
 8005564:	2502      	movs	r5, #2
 8005566:	e749      	b.n	80053fc <__kernel_rem_pio2f+0x114>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f1ba 0f00 	cmp.w	sl, #0
 800556e:	d108      	bne.n	8005582 <__kernel_rem_pio2f+0x29a>
 8005570:	b11b      	cbz	r3, 800557a <__kernel_rem_pio2f+0x292>
 8005572:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	2301      	movs	r3, #1
 800557a:	469a      	mov	sl, r3
 800557c:	3201      	adds	r2, #1
 800557e:	3404      	adds	r4, #4
 8005580:	e73f      	b.n	8005402 <__kernel_rem_pio2f+0x11a>
 8005582:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	4653      	mov	r3, sl
 800558a:	e7f6      	b.n	800557a <__kernel_rem_pio2f+0x292>
 800558c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8005590:	ab0a      	add	r3, sp, #40	; 0x28
 8005592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800559a:	a90a      	add	r1, sp, #40	; 0x28
 800559c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80055a0:	e73a      	b.n	8005418 <__kernel_rem_pio2f+0x130>
 80055a2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80055a6:	ab0a      	add	r3, sp, #40	; 0x28
 80055a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b0:	e7f3      	b.n	800559a <__kernel_rem_pio2f+0x2b2>
 80055b2:	a90a      	add	r1, sp, #40	; 0x28
 80055b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	e7a9      	b.n	8005512 <__kernel_rem_pio2f+0x22a>
 80055be:	bf00      	nop
 80055c0:	08005e5c 	.word	0x08005e5c
 80055c4:	08005e30 	.word	0x08005e30
 80055c8:	3301      	adds	r3, #1
 80055ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80055ce:	2900      	cmp	r1, #0
 80055d0:	d0fa      	beq.n	80055c8 <__kernel_rem_pio2f+0x2e0>
 80055d2:	9a04      	ldr	r2, [sp, #16]
 80055d4:	f108 0501 	add.w	r5, r8, #1
 80055d8:	eb08 0402 	add.w	r4, r8, r2
 80055dc:	aa1e      	add	r2, sp, #120	; 0x78
 80055de:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80055e2:	4498      	add	r8, r3
 80055e4:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80055e8:	45a8      	cmp	r8, r5
 80055ea:	f6ff aec2 	blt.w	8005372 <__kernel_rem_pio2f+0x8a>
 80055ee:	9b07      	ldr	r3, [sp, #28]
 80055f0:	46a3      	mov	fp, r4
 80055f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055f6:	f7fb fb0b 	bl	8000c10 <__aeabi_i2f>
 80055fa:	f04f 0a00 	mov.w	sl, #0
 80055fe:	2600      	movs	r6, #0
 8005600:	6020      	str	r0, [r4, #0]
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	459a      	cmp	sl, r3
 8005606:	dd07      	ble.n	8005618 <__kernel_rem_pio2f+0x330>
 8005608:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800560c:	3404      	adds	r4, #4
 800560e:	3501      	adds	r5, #1
 8005610:	e7ea      	b.n	80055e8 <__kernel_rem_pio2f+0x300>
 8005612:	2301      	movs	r3, #1
 8005614:	9a08      	ldr	r2, [sp, #32]
 8005616:	e7d8      	b.n	80055ca <__kernel_rem_pio2f+0x2e2>
 8005618:	9b05      	ldr	r3, [sp, #20]
 800561a:	f85b 0904 	ldr.w	r0, [fp], #-4
 800561e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8005622:	f7fb fb49 	bl	8000cb8 <__aeabi_fmul>
 8005626:	4601      	mov	r1, r0
 8005628:	4630      	mov	r0, r6
 800562a:	f7fb fa3d 	bl	8000aa8 <__addsf3>
 800562e:	f10a 0a01 	add.w	sl, sl, #1
 8005632:	4606      	mov	r6, r0
 8005634:	e7e5      	b.n	8005602 <__kernel_rem_pio2f+0x31a>
 8005636:	3c01      	subs	r4, #1
 8005638:	e770      	b.n	800551c <__kernel_rem_pio2f+0x234>
 800563a:	9b06      	ldr	r3, [sp, #24]
 800563c:	9a02      	ldr	r2, [sp, #8]
 800563e:	4648      	mov	r0, r9
 8005640:	1a99      	subs	r1, r3, r2
 8005642:	f000 f9bf 	bl	80059c4 <scalbnf>
 8005646:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800564a:	4604      	mov	r4, r0
 800564c:	f7fb fce6 	bl	800101c <__aeabi_fcmpge>
 8005650:	b300      	cbz	r0, 8005694 <__kernel_rem_pio2f+0x3ac>
 8005652:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005656:	4620      	mov	r0, r4
 8005658:	f7fb fb2e 	bl	8000cb8 <__aeabi_fmul>
 800565c:	f7fb fcf2 	bl	8001044 <__aeabi_f2iz>
 8005660:	f7fb fad6 	bl	8000c10 <__aeabi_i2f>
 8005664:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005668:	4681      	mov	r9, r0
 800566a:	f7fb fb25 	bl	8000cb8 <__aeabi_fmul>
 800566e:	4601      	mov	r1, r0
 8005670:	4620      	mov	r0, r4
 8005672:	f7fb fa17 	bl	8000aa4 <__aeabi_fsub>
 8005676:	f7fb fce5 	bl	8001044 <__aeabi_f2iz>
 800567a:	ab0a      	add	r3, sp, #40	; 0x28
 800567c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005680:	4648      	mov	r0, r9
 8005682:	f7fb fcdf 	bl	8001044 <__aeabi_f2iz>
 8005686:	f108 0401 	add.w	r4, r8, #1
 800568a:	ab0a      	add	r3, sp, #40	; 0x28
 800568c:	3708      	adds	r7, #8
 800568e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005692:	e74a      	b.n	800552a <__kernel_rem_pio2f+0x242>
 8005694:	4620      	mov	r0, r4
 8005696:	f7fb fcd5 	bl	8001044 <__aeabi_f2iz>
 800569a:	ab0a      	add	r3, sp, #40	; 0x28
 800569c:	4644      	mov	r4, r8
 800569e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80056a2:	e742      	b.n	800552a <__kernel_rem_pio2f+0x242>
 80056a4:	ab0a      	add	r3, sp, #40	; 0x28
 80056a6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80056aa:	f7fb fab1 	bl	8000c10 <__aeabi_i2f>
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fb fb02 	bl	8000cb8 <__aeabi_fmul>
 80056b4:	4641      	mov	r1, r8
 80056b6:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80056ba:	4648      	mov	r0, r9
 80056bc:	f7fb fafc 	bl	8000cb8 <__aeabi_fmul>
 80056c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80056c4:	4681      	mov	r9, r0
 80056c6:	e73a      	b.n	800553e <__kernel_rem_pio2f+0x256>
 80056c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80056cc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80056d0:	9203      	str	r2, [sp, #12]
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	f7fb faf0 	bl	8000cb8 <__aeabi_fmul>
 80056d8:	4601      	mov	r1, r0
 80056da:	4640      	mov	r0, r8
 80056dc:	f7fb f9e4 	bl	8000aa8 <__addsf3>
 80056e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80056e4:	4680      	mov	r8, r0
 80056e6:	f10a 0a01 	add.w	sl, sl, #1
 80056ea:	9901      	ldr	r1, [sp, #4]
 80056ec:	458a      	cmp	sl, r1
 80056ee:	dc01      	bgt.n	80056f4 <__kernel_rem_pio2f+0x40c>
 80056f0:	45ca      	cmp	sl, r9
 80056f2:	dde9      	ble.n	80056c8 <__kernel_rem_pio2f+0x3e0>
 80056f4:	ab5a      	add	r3, sp, #360	; 0x168
 80056f6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80056fa:	f849 8ca0 	str.w	r8, [r9, #-160]
 80056fe:	3f01      	subs	r7, #1
 8005700:	e723      	b.n	800554a <__kernel_rem_pio2f+0x262>
 8005702:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8005704:	2b02      	cmp	r3, #2
 8005706:	dc07      	bgt.n	8005718 <__kernel_rem_pio2f+0x430>
 8005708:	2b00      	cmp	r3, #0
 800570a:	dc4d      	bgt.n	80057a8 <__kernel_rem_pio2f+0x4c0>
 800570c:	d02e      	beq.n	800576c <__kernel_rem_pio2f+0x484>
 800570e:	f006 0007 	and.w	r0, r6, #7
 8005712:	b05b      	add	sp, #364	; 0x16c
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800571a:	2b03      	cmp	r3, #3
 800571c:	d1f7      	bne.n	800570e <__kernel_rem_pio2f+0x426>
 800571e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8005722:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8005726:	46b8      	mov	r8, r7
 8005728:	46a2      	mov	sl, r4
 800572a:	f1ba 0f00 	cmp.w	sl, #0
 800572e:	dc48      	bgt.n	80057c2 <__kernel_rem_pio2f+0x4da>
 8005730:	46a1      	mov	r9, r4
 8005732:	f1b9 0f01 	cmp.w	r9, #1
 8005736:	dc5f      	bgt.n	80057f8 <__kernel_rem_pio2f+0x510>
 8005738:	2000      	movs	r0, #0
 800573a:	2c01      	cmp	r4, #1
 800573c:	dc75      	bgt.n	800582a <__kernel_rem_pio2f+0x542>
 800573e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8005740:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8005742:	2d00      	cmp	r5, #0
 8005744:	d177      	bne.n	8005836 <__kernel_rem_pio2f+0x54e>
 8005746:	9900      	ldr	r1, [sp, #0]
 8005748:	600a      	str	r2, [r1, #0]
 800574a:	460a      	mov	r2, r1
 800574c:	604b      	str	r3, [r1, #4]
 800574e:	6090      	str	r0, [r2, #8]
 8005750:	e7dd      	b.n	800570e <__kernel_rem_pio2f+0x426>
 8005752:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8005756:	f7fb f9a7 	bl	8000aa8 <__addsf3>
 800575a:	3c01      	subs	r4, #1
 800575c:	2c00      	cmp	r4, #0
 800575e:	daf8      	bge.n	8005752 <__kernel_rem_pio2f+0x46a>
 8005760:	b10d      	cbz	r5, 8005766 <__kernel_rem_pio2f+0x47e>
 8005762:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005766:	9b00      	ldr	r3, [sp, #0]
 8005768:	6018      	str	r0, [r3, #0]
 800576a:	e7d0      	b.n	800570e <__kernel_rem_pio2f+0x426>
 800576c:	2000      	movs	r0, #0
 800576e:	af32      	add	r7, sp, #200	; 0xc8
 8005770:	e7f4      	b.n	800575c <__kernel_rem_pio2f+0x474>
 8005772:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8005776:	f7fb f997 	bl	8000aa8 <__addsf3>
 800577a:	3f01      	subs	r7, #1
 800577c:	2f00      	cmp	r7, #0
 800577e:	daf8      	bge.n	8005772 <__kernel_rem_pio2f+0x48a>
 8005780:	b1bd      	cbz	r5, 80057b2 <__kernel_rem_pio2f+0x4ca>
 8005782:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8005786:	9a00      	ldr	r2, [sp, #0]
 8005788:	4601      	mov	r1, r0
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800578e:	f7fb f989 	bl	8000aa4 <__aeabi_fsub>
 8005792:	2701      	movs	r7, #1
 8005794:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8005798:	42bc      	cmp	r4, r7
 800579a:	da0c      	bge.n	80057b6 <__kernel_rem_pio2f+0x4ce>
 800579c:	b10d      	cbz	r5, 80057a2 <__kernel_rem_pio2f+0x4ba>
 800579e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80057a2:	9b00      	ldr	r3, [sp, #0]
 80057a4:	6058      	str	r0, [r3, #4]
 80057a6:	e7b2      	b.n	800570e <__kernel_rem_pio2f+0x426>
 80057a8:	4627      	mov	r7, r4
 80057aa:	2000      	movs	r0, #0
 80057ac:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80057b0:	e7e4      	b.n	800577c <__kernel_rem_pio2f+0x494>
 80057b2:	4603      	mov	r3, r0
 80057b4:	e7e7      	b.n	8005786 <__kernel_rem_pio2f+0x49e>
 80057b6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80057ba:	f7fb f975 	bl	8000aa8 <__addsf3>
 80057be:	3701      	adds	r7, #1
 80057c0:	e7ea      	b.n	8005798 <__kernel_rem_pio2f+0x4b0>
 80057c2:	f8d8 3000 	ldr.w	r3, [r8]
 80057c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	9302      	str	r3, [sp, #8]
 80057d0:	9201      	str	r2, [sp, #4]
 80057d2:	f7fb f969 	bl	8000aa8 <__addsf3>
 80057d6:	9a01      	ldr	r2, [sp, #4]
 80057d8:	4601      	mov	r1, r0
 80057da:	4681      	mov	r9, r0
 80057dc:	4610      	mov	r0, r2
 80057de:	f7fb f961 	bl	8000aa4 <__aeabi_fsub>
 80057e2:	9b02      	ldr	r3, [sp, #8]
 80057e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057e8:	4619      	mov	r1, r3
 80057ea:	f7fb f95d 	bl	8000aa8 <__addsf3>
 80057ee:	f848 0904 	str.w	r0, [r8], #-4
 80057f2:	f8c8 9000 	str.w	r9, [r8]
 80057f6:	e798      	b.n	800572a <__kernel_rem_pio2f+0x442>
 80057f8:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80057fc:	f8d7 a000 	ldr.w	sl, [r7]
 8005800:	4618      	mov	r0, r3
 8005802:	4651      	mov	r1, sl
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	f7fb f94f 	bl	8000aa8 <__addsf3>
 800580a:	9b01      	ldr	r3, [sp, #4]
 800580c:	4601      	mov	r1, r0
 800580e:	4680      	mov	r8, r0
 8005810:	4618      	mov	r0, r3
 8005812:	f7fb f947 	bl	8000aa4 <__aeabi_fsub>
 8005816:	4651      	mov	r1, sl
 8005818:	f7fb f946 	bl	8000aa8 <__addsf3>
 800581c:	f847 0904 	str.w	r0, [r7], #-4
 8005820:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005824:	f8c7 8000 	str.w	r8, [r7]
 8005828:	e783      	b.n	8005732 <__kernel_rem_pio2f+0x44a>
 800582a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800582e:	f7fb f93b 	bl	8000aa8 <__addsf3>
 8005832:	3c01      	subs	r4, #1
 8005834:	e781      	b.n	800573a <__kernel_rem_pio2f+0x452>
 8005836:	9900      	ldr	r1, [sp, #0]
 8005838:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800583c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005840:	600a      	str	r2, [r1, #0]
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	460a      	mov	r2, r1
 8005846:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800584a:	e780      	b.n	800574e <__kernel_rem_pio2f+0x466>

0800584c <__kernel_sinf>:
 800584c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005850:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005854:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005858:	4604      	mov	r4, r0
 800585a:	460f      	mov	r7, r1
 800585c:	4691      	mov	r9, r2
 800585e:	da03      	bge.n	8005868 <__kernel_sinf+0x1c>
 8005860:	f7fb fbf0 	bl	8001044 <__aeabi_f2iz>
 8005864:	2800      	cmp	r0, #0
 8005866:	d035      	beq.n	80058d4 <__kernel_sinf+0x88>
 8005868:	4621      	mov	r1, r4
 800586a:	4620      	mov	r0, r4
 800586c:	f7fb fa24 	bl	8000cb8 <__aeabi_fmul>
 8005870:	4605      	mov	r5, r0
 8005872:	4601      	mov	r1, r0
 8005874:	4620      	mov	r0, r4
 8005876:	f7fb fa1f 	bl	8000cb8 <__aeabi_fmul>
 800587a:	4929      	ldr	r1, [pc, #164]	; (8005920 <__kernel_sinf+0xd4>)
 800587c:	4606      	mov	r6, r0
 800587e:	4628      	mov	r0, r5
 8005880:	f7fb fa1a 	bl	8000cb8 <__aeabi_fmul>
 8005884:	4927      	ldr	r1, [pc, #156]	; (8005924 <__kernel_sinf+0xd8>)
 8005886:	f7fb f90d 	bl	8000aa4 <__aeabi_fsub>
 800588a:	4629      	mov	r1, r5
 800588c:	f7fb fa14 	bl	8000cb8 <__aeabi_fmul>
 8005890:	4925      	ldr	r1, [pc, #148]	; (8005928 <__kernel_sinf+0xdc>)
 8005892:	f7fb f909 	bl	8000aa8 <__addsf3>
 8005896:	4629      	mov	r1, r5
 8005898:	f7fb fa0e 	bl	8000cb8 <__aeabi_fmul>
 800589c:	4923      	ldr	r1, [pc, #140]	; (800592c <__kernel_sinf+0xe0>)
 800589e:	f7fb f901 	bl	8000aa4 <__aeabi_fsub>
 80058a2:	4629      	mov	r1, r5
 80058a4:	f7fb fa08 	bl	8000cb8 <__aeabi_fmul>
 80058a8:	4921      	ldr	r1, [pc, #132]	; (8005930 <__kernel_sinf+0xe4>)
 80058aa:	f7fb f8fd 	bl	8000aa8 <__addsf3>
 80058ae:	4680      	mov	r8, r0
 80058b0:	f1b9 0f00 	cmp.w	r9, #0
 80058b4:	d111      	bne.n	80058da <__kernel_sinf+0x8e>
 80058b6:	4601      	mov	r1, r0
 80058b8:	4628      	mov	r0, r5
 80058ba:	f7fb f9fd 	bl	8000cb8 <__aeabi_fmul>
 80058be:	491d      	ldr	r1, [pc, #116]	; (8005934 <__kernel_sinf+0xe8>)
 80058c0:	f7fb f8f0 	bl	8000aa4 <__aeabi_fsub>
 80058c4:	4631      	mov	r1, r6
 80058c6:	f7fb f9f7 	bl	8000cb8 <__aeabi_fmul>
 80058ca:	4601      	mov	r1, r0
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7fb f8eb 	bl	8000aa8 <__addsf3>
 80058d2:	4604      	mov	r4, r0
 80058d4:	4620      	mov	r0, r4
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80058de:	4638      	mov	r0, r7
 80058e0:	f7fb f9ea 	bl	8000cb8 <__aeabi_fmul>
 80058e4:	4641      	mov	r1, r8
 80058e6:	4681      	mov	r9, r0
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7fb f9e5 	bl	8000cb8 <__aeabi_fmul>
 80058ee:	4601      	mov	r1, r0
 80058f0:	4648      	mov	r0, r9
 80058f2:	f7fb f8d7 	bl	8000aa4 <__aeabi_fsub>
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fb f9de 	bl	8000cb8 <__aeabi_fmul>
 80058fc:	4639      	mov	r1, r7
 80058fe:	f7fb f8d1 	bl	8000aa4 <__aeabi_fsub>
 8005902:	490c      	ldr	r1, [pc, #48]	; (8005934 <__kernel_sinf+0xe8>)
 8005904:	4605      	mov	r5, r0
 8005906:	4630      	mov	r0, r6
 8005908:	f7fb f9d6 	bl	8000cb8 <__aeabi_fmul>
 800590c:	4601      	mov	r1, r0
 800590e:	4628      	mov	r0, r5
 8005910:	f7fb f8ca 	bl	8000aa8 <__addsf3>
 8005914:	4601      	mov	r1, r0
 8005916:	4620      	mov	r0, r4
 8005918:	f7fb f8c4 	bl	8000aa4 <__aeabi_fsub>
 800591c:	e7d9      	b.n	80058d2 <__kernel_sinf+0x86>
 800591e:	bf00      	nop
 8005920:	2f2ec9d3 	.word	0x2f2ec9d3
 8005924:	32d72f34 	.word	0x32d72f34
 8005928:	3638ef1b 	.word	0x3638ef1b
 800592c:	39500d01 	.word	0x39500d01
 8005930:	3c088889 	.word	0x3c088889
 8005934:	3e2aaaab 	.word	0x3e2aaaab

08005938 <fabsf>:
 8005938:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800593c:	4770      	bx	lr
	...

08005940 <floorf>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005946:	3d7f      	subs	r5, #127	; 0x7f
 8005948:	2d16      	cmp	r5, #22
 800594a:	4601      	mov	r1, r0
 800594c:	4604      	mov	r4, r0
 800594e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005952:	dc26      	bgt.n	80059a2 <floorf+0x62>
 8005954:	2d00      	cmp	r5, #0
 8005956:	da0e      	bge.n	8005976 <floorf+0x36>
 8005958:	4917      	ldr	r1, [pc, #92]	; (80059b8 <floorf+0x78>)
 800595a:	f7fb f8a5 	bl	8000aa8 <__addsf3>
 800595e:	2100      	movs	r1, #0
 8005960:	f7fb fb66 	bl	8001030 <__aeabi_fcmpgt>
 8005964:	b128      	cbz	r0, 8005972 <floorf+0x32>
 8005966:	2c00      	cmp	r4, #0
 8005968:	da23      	bge.n	80059b2 <floorf+0x72>
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <floorf+0x7c>)
 800596c:	2e00      	cmp	r6, #0
 800596e:	bf18      	it	ne
 8005970:	461c      	movne	r4, r3
 8005972:	4621      	mov	r1, r4
 8005974:	e01b      	b.n	80059ae <floorf+0x6e>
 8005976:	4e12      	ldr	r6, [pc, #72]	; (80059c0 <floorf+0x80>)
 8005978:	412e      	asrs	r6, r5
 800597a:	4230      	tst	r0, r6
 800597c:	d017      	beq.n	80059ae <floorf+0x6e>
 800597e:	490e      	ldr	r1, [pc, #56]	; (80059b8 <floorf+0x78>)
 8005980:	f7fb f892 	bl	8000aa8 <__addsf3>
 8005984:	2100      	movs	r1, #0
 8005986:	f7fb fb53 	bl	8001030 <__aeabi_fcmpgt>
 800598a:	2800      	cmp	r0, #0
 800598c:	d0f1      	beq.n	8005972 <floorf+0x32>
 800598e:	2c00      	cmp	r4, #0
 8005990:	bfbe      	ittt	lt
 8005992:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8005996:	fa43 f505 	asrlt.w	r5, r3, r5
 800599a:	1964      	addlt	r4, r4, r5
 800599c:	ea24 0406 	bic.w	r4, r4, r6
 80059a0:	e7e7      	b.n	8005972 <floorf+0x32>
 80059a2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80059a6:	d302      	bcc.n	80059ae <floorf+0x6e>
 80059a8:	f7fb f87e 	bl	8000aa8 <__addsf3>
 80059ac:	4601      	mov	r1, r0
 80059ae:	4608      	mov	r0, r1
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	2400      	movs	r4, #0
 80059b4:	e7dd      	b.n	8005972 <floorf+0x32>
 80059b6:	bf00      	nop
 80059b8:	7149f2ca 	.word	0x7149f2ca
 80059bc:	bf800000 	.word	0xbf800000
 80059c0:	007fffff 	.word	0x007fffff

080059c4 <scalbnf>:
 80059c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4603      	mov	r3, r0
 80059cc:	460d      	mov	r5, r1
 80059ce:	4604      	mov	r4, r0
 80059d0:	d02a      	beq.n	8005a28 <scalbnf+0x64>
 80059d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80059d6:	d304      	bcc.n	80059e2 <scalbnf+0x1e>
 80059d8:	4601      	mov	r1, r0
 80059da:	f7fb f865 	bl	8000aa8 <__addsf3>
 80059de:	4603      	mov	r3, r0
 80059e0:	e022      	b.n	8005a28 <scalbnf+0x64>
 80059e2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80059e6:	d117      	bne.n	8005a18 <scalbnf+0x54>
 80059e8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80059ec:	f7fb f964 	bl	8000cb8 <__aeabi_fmul>
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <scalbnf+0x8c>)
 80059f2:	4603      	mov	r3, r0
 80059f4:	4295      	cmp	r5, r2
 80059f6:	db0b      	blt.n	8005a10 <scalbnf+0x4c>
 80059f8:	4604      	mov	r4, r0
 80059fa:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80059fe:	3a19      	subs	r2, #25
 8005a00:	442a      	add	r2, r5
 8005a02:	2afe      	cmp	r2, #254	; 0xfe
 8005a04:	dd0a      	ble.n	8005a1c <scalbnf+0x58>
 8005a06:	4913      	ldr	r1, [pc, #76]	; (8005a54 <scalbnf+0x90>)
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f361 001e 	bfi	r0, r1, #0, #31
 8005a0e:	e000      	b.n	8005a12 <scalbnf+0x4e>
 8005a10:	4911      	ldr	r1, [pc, #68]	; (8005a58 <scalbnf+0x94>)
 8005a12:	f7fb f951 	bl	8000cb8 <__aeabi_fmul>
 8005a16:	e7e2      	b.n	80059de <scalbnf+0x1a>
 8005a18:	0dd2      	lsrs	r2, r2, #23
 8005a1a:	e7f1      	b.n	8005a00 <scalbnf+0x3c>
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	dd05      	ble.n	8005a2c <scalbnf+0x68>
 8005a20:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8005a24:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8005a28:	4618      	mov	r0, r3
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	f112 0f16 	cmn.w	r2, #22
 8005a30:	da05      	bge.n	8005a3e <scalbnf+0x7a>
 8005a32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005a36:	4295      	cmp	r5, r2
 8005a38:	dce5      	bgt.n	8005a06 <scalbnf+0x42>
 8005a3a:	4907      	ldr	r1, [pc, #28]	; (8005a58 <scalbnf+0x94>)
 8005a3c:	e7e4      	b.n	8005a08 <scalbnf+0x44>
 8005a3e:	3219      	adds	r2, #25
 8005a40:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8005a44:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8005a48:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8005a4c:	e7e1      	b.n	8005a12 <scalbnf+0x4e>
 8005a4e:	bf00      	nop
 8005a50:	ffff3cb0 	.word	0xffff3cb0
 8005a54:	7149f2ca 	.word	0x7149f2ca
 8005a58:	0da24260 	.word	0x0da24260

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
