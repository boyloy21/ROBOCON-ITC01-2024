
Uldrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be0  08007be0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007be8  08007be8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004c60  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c70  20004c70  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4c5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d33  00000000  00000000  0003a505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d8  00000000  00000000  0003f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024946  00000000  00000000  00040ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185d9  00000000  00000000  000654e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18bc  00000000  00000000  0007dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015f37b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005934  00000000  00000000  0015f3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b30 	.word	0x08007b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007b30 	.word	0x08007b30

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <MX_ADC1_Init+0xb4>)
 80004e8:	4a28      	ldr	r2, [pc, #160]	; (800058c <MX_ADC1_Init+0xb8>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <MX_ADC1_Init+0xb4>)
 80004ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <MX_ADC1_Init+0xb4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <MX_ADC1_Init+0xb4>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000502:	2201      	movs	r2, #1
 8000504:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <MX_ADC1_Init+0xbc>)
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_ADC1_Init+0xb4>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000522:	2202      	movs	r2, #2
 8000524:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000530:	2201      	movs	r2, #1
 8000532:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000536:	f001 f807 	bl	8001548 <HAL_ADC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 fc1e 	bl	8000d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000544:	230a      	movs	r3, #10
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000556:	f001 f969 	bl	800182c <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000560:	f000 fc0e 	bl	8000d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000564:	230b      	movs	r3, #11
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000568:	2302      	movs	r3, #2
 800056a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0xb4>)
 8000572:	f001 f95b 	bl	800182c <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800057c:	f000 fc00 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000002c 	.word	0x2000002c
 800058c:	40012000 	.word	0x40012000
 8000590:	0f000001 	.word	0x0f000001

08000594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a2e      	ldr	r2, [pc, #184]	; (800066c <HAL_ADC_MspInit+0xd8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d156      	bne.n	8000664 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <HAL_ADC_MspInit+0xdc>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <HAL_ADC_MspInit+0xdc>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c4:	6453      	str	r3, [r2, #68]	; 0x44
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <HAL_ADC_MspInit+0xdc>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <HAL_ADC_MspInit+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <HAL_ADC_MspInit+0xdc>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <HAL_ADC_MspInit+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ee:	2303      	movs	r3, #3
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	481c      	ldr	r0, [pc, #112]	; (8000674 <HAL_ADC_MspInit+0xe0>)
 8000602:	f002 fe67 	bl	80032d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000608:	4a1c      	ldr	r2, [pc, #112]	; (800067c <HAL_ADC_MspInit+0xe8>)
 800060a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000624:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800062c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000634:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 800064a:	f002 fad3 	bl	8002bf4 <HAL_DMA_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000654:	f000 fb94 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 800065c:	639a      	str	r2, [r3, #56]	; 0x38
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_ADC_MspInit+0xe4>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40012000 	.word	0x40012000
 8000670:	40023800 	.word	0x40023800
 8000674:	40020800 	.word	0x40020800
 8000678:	20000074 	.word	0x20000074
 800067c:	40026410 	.word	0x40026410

08000680 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <MX_CAN1_Init+0x9c>)
 8000688:	4a25      	ldr	r2, [pc, #148]	; (8000720 <MX_CAN1_Init+0xa0>)
 800068a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_CAN1_Init+0x9c>)
 800068e:	2206      	movs	r2, #6
 8000690:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_CAN1_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_CAN1_Init+0x9c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_CAN1_Init+0x9c>)
 80006a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_CAN1_Init+0x9c>)
 80006a8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80006ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_CAN1_Init+0x9c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_CAN1_Init+0x9c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_CAN1_Init+0x9c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_CAN1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_CAN1_Init+0x9c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_CAN1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_CAN1_Init+0x9c>)
 80006d4:	f001 fb4a 	bl	8001d6c <HAL_CAN_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006de:	f000 fb4f 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000702:	2301      	movs	r3, #1
 8000704:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 8000706:	230e      	movs	r3, #14
 8000708:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <MX_CAN1_Init+0x9c>)
 8000710:	f001 fc28 	bl	8001f64 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000d4 	.word	0x200000d4
 8000720:	40006400 	.word	0x40006400

08000724 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1d      	ldr	r2, [pc, #116]	; (80007b8 <HAL_CAN_MspInit+0x94>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d134      	bne.n	80007b0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <HAL_CAN_MspInit+0x98>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <HAL_CAN_MspInit+0x98>)
 8000750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_CAN_MspInit+0x98>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_CAN_MspInit+0x98>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_CAN_MspInit+0x98>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_CAN_MspInit+0x98>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800077e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000790:	2309      	movs	r3, #9
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <HAL_CAN_MspInit+0x9c>)
 800079c:	f002 fd9a 	bl	80032d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2105      	movs	r1, #5
 80007a4:	2014      	movs	r0, #20
 80007a6:	f002 f9fb 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007aa:	2014      	movs	r0, #20
 80007ac:	f002 fa14 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40006400 	.word	0x40006400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x3c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_DMA_Init+0x3c>)
 80007d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2038      	movs	r0, #56	; 0x38
 80007ec:	f002 f9d8 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007f0:	2038      	movs	r0, #56	; 0x38
 80007f2:	f002 f9f1 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <Map>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
float Map(float Input, float Min_Input, float Max_Input, float Min_Output,
		float Max_Output) {
 8000804:	b480      	push	{r7}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	ed87 0a05 	vstr	s0, [r7, #20]
 800080e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000812:	ed87 1a03 	vstr	s2, [r7, #12]
 8000816:	edc7 1a02 	vstr	s3, [r7, #8]
 800081a:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
 800081e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000822:	edd7 7a04 	vldr	s15, [r7, #16]
 8000826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800082a:	edd7 6a01 	vldr	s13, [r7, #4]
 800082e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000832:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000836:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ (Max_Input - Min_Input) + Min_Output);
 800083a:	ed97 7a03 	vldr	s14, [r7, #12]
 800083e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
 800084a:	edd7 7a02 	vldr	s15, [r7, #8]
 800084e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000852:	eeb0 0a67 	vmov.f32	s0, s15
 8000856:	371c      	adds	r7, #28
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <servo_rotation>:
void servo_rotation(uint16_t deg) // degree input from 0 to 180
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
	pwm_servo = Map(deg,0,180,1900,9600);
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000874:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 80008b0 <servo_rotation+0x50>
 8000878:	eddf 1a0e 	vldr	s3, [pc, #56]	; 80008b4 <servo_rotation+0x54>
 800087c:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 80008b8 <servo_rotation+0x58>
 8000880:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80008bc <servo_rotation+0x5c>
 8000884:	eeb0 0a67 	vmov.f32	s0, s15
 8000888:	f7ff ffbc 	bl	8000804 <Map>
 800088c:	eef0 7a40 	vmov.f32	s15, s0
 8000890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000894:	ee17 3a90 	vmov	r3, s15
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <servo_rotation+0x60>)
 800089c:	801a      	strh	r2, [r3, #0]
	TIM4->CCR1 = pwm_servo;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <servo_rotation+0x60>)
 80008a0:	881a      	ldrh	r2, [r3, #0]
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <servo_rotation+0x64>)
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	46160000 	.word	0x46160000
 80008b4:	44ed8000 	.word	0x44ed8000
 80008b8:	43340000 	.word	0x43340000
 80008bc:	00000000 	.word	0x00000000
 80008c0:	20000100 	.word	0x20000100
 80008c4:	40000800 	.word	0x40000800

080008c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Button_Task */
  Button_TaskHandle = osThreadNew(Button_Init, NULL, &Button_Task_attributes);
 80008cc:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <MX_FREERTOS_Init+0x28>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <MX_FREERTOS_Init+0x2c>)
 80008d2:	f004 fbe9 	bl	80050a8 <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <MX_FREERTOS_Init+0x30>)
 80008da:	6013      	str	r3, [r2, #0]

  /* creation of HRS_04_Task */
  HRS_04_TaskHandle = osThreadNew(HRS_04_Init, NULL, &HRS_04_Task_attributes);
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <MX_FREERTOS_Init+0x34>)
 80008de:	2100      	movs	r1, #0
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <MX_FREERTOS_Init+0x38>)
 80008e2:	f004 fbe1 	bl	80050a8 <osThreadNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <MX_FREERTOS_Init+0x3c>)
 80008ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08007b78 	.word	0x08007b78
 80008f4:	08000909 	.word	0x08000909
 80008f8:	20000104 	.word	0x20000104
 80008fc:	08007b9c 	.word	0x08007b9c
 8000900:	0800098d 	.word	0x0800098d
 8000904:	20000108 	.word	0x20000108

08000908 <Button_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Button_Init */
void Button_Init(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Button_Init */
	 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <Button_Init+0x78>)
 8000914:	f003 fc18 	bl	8004148 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
		if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) {
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4819      	ldr	r0, [pc, #100]	; (8000984 <Button_Init+0x7c>)
 800091e:	f002 fe75 	bl	800360c <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10d      	bne.n	8000944 <Button_Init+0x3c>
			button = 1;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <Button_Init+0x80>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
			servo_rotation(90);
 800092e:	205a      	movs	r0, #90	; 0x5a
 8000930:	f7ff ff96 	bl	8000860 <servo_rotation>
			osDelay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f004 fc48 	bl	80051cc <osDelay>
			servo_rotation(0);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff ff8f 	bl	8000860 <servo_rotation>
 8000942:	e018      	b.n	8000976 <Button_Init+0x6e>
		}
		else if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)))
 8000944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000948:	480e      	ldr	r0, [pc, #56]	; (8000984 <Button_Init+0x7c>)
 800094a:	f002 fe5f 	bl	800360c <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10d      	bne.n	8000970 <Button_Init+0x68>
		{
			button = 2;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <Button_Init+0x80>)
 8000956:	2202      	movs	r2, #2
 8000958:	701a      	strb	r2, [r3, #0]
			servo_rotation(90);
 800095a:	205a      	movs	r0, #90	; 0x5a
 800095c:	f7ff ff80 	bl	8000860 <servo_rotation>
			osDelay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f004 fc32 	bl	80051cc <osDelay>
			servo_rotation(0);
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff ff79 	bl	8000860 <servo_rotation>
 800096e:	e002      	b.n	8000976 <Button_Init+0x6e>
		}
		else {
			button = 0;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <Button_Init+0x80>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
		}
    osDelay(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f004 fc28 	bl	80051cc <osDelay>
		if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) {
 800097c:	e7cc      	b.n	8000918 <Button_Init+0x10>
 800097e:	bf00      	nop
 8000980:	2000028c 	.word	0x2000028c
 8000984:	40020400 	.word	0x40020400
 8000988:	200000fc 	.word	0x200000fc

0800098c <HRS_04_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HRS_04_Init */
void HRS_04_Init(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
  /* Infinite loop */
  for(;;)
  {

	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))) {
 8000994:	2101      	movs	r1, #1
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <HRS_04_Init+0x58>)
 8000998:	f002 fe38 	bl	800360c <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <HRS_04_Init+0x1e>
		  ball_aready = 1;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HRS_04_Init+0x5c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e002      	b.n	80009b0 <HRS_04_Init+0x24>
	  		}

	  		else {
	  			ball_aready = 0;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HRS_04_Init+0x5c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	  		}
	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) || (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))))
 80009b0:	2102      	movs	r1, #2
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <HRS_04_Init+0x58>)
 80009b4:	f002 fe2a 	bl	800360c <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <HRS_04_Init+0x42>
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	480a      	ldr	r0, [pc, #40]	; (80009ec <HRS_04_Init+0x60>)
 80009c4:	f002 fe22 	bl	800360c <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d103      	bne.n	80009d6 <HRS_04_Init+0x4a>
			  {
		  	  	  check_threeball = 1;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HRS_04_Init+0x64>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e002      	b.n	80009dc <HRS_04_Init+0x50>
			  }
	  else
	  {
		  check_threeball = 0;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HRS_04_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
//	  			 	  }
//	  			 	  else
//	  			 	  {
//	  			 		  check_ballinside = 0;
//	  			 	  }
    osDelay(50);
 80009dc:	2032      	movs	r0, #50	; 0x32
 80009de:	f004 fbf5 	bl	80051cc <osDelay>
	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))) {
 80009e2:	e7d7      	b.n	8000994 <HRS_04_Init+0x8>
 80009e4:	40020000 	.word	0x40020000
 80009e8:	200000fd 	.word	0x200000fd
 80009ec:	40020400 	.word	0x40020400
 80009f0:	200000fe 	.word	0x200000fe

080009f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Detectball_inside_Pin|Detect_3ball_R_Pin;
 8000a96:	2303      	movs	r3, #3
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <MX_GPIO_Init+0xe0>)
 8000aaa:	f002 fc13 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Detect_3ball_L_Pin|RETRY_Pin|START_Pin;
 8000aae:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_GPIO_Init+0xe4>)
 8000ac4:	f002 fc06 	bl	80032d4 <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_CAN_RxFifo0MsgPendingCallback>:
//void servo_rotation(uint16_t deg) // degree input from 0 to 180
//{
//	pwm_servo = map(deg,0,180,1900,9600);
//	TIM4->CCR1 = pwm_servo;
//}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f001 fc39 	bl	8002362 <HAL_CAN_GetRxMessage>
		cntt++;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000afa:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8000afc:	e002      	b.n	8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			cntt = 0;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b64      	cmp	r3, #100	; 0x64
 8000b0a:	d8f8      	bhi.n	8000afe <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		}

	if (RxHeader.StdId == 0x222) {
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f240 2222 	movw	r2, #546	; 0x222
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d103      	bne.n	8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
				state = RxData[0];
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		}
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000140 	.word	0x20000140
 8000b2c:	2000010c 	.word	0x2000010c
 8000b30:	20000154 	.word	0x20000154
 8000b34:	20000155 	.word	0x20000155

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fcc2 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f83c 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff ff56 	bl	80009f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b48:	f7ff fe3c 	bl	80007c4 <MX_DMA_Init>
  MX_CAN1_Init();
 8000b4c:	f7ff fd98 	bl	8000680 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000b50:	f000 fa28 	bl	8000fa4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b54:	f000 fac2 	bl	80010dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b58:	f000 fb0e 	bl	8001178 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000b5c:	f7ff fcba 	bl	80004d4 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000b60:	f000 fb64 	bl	800122c <MX_TIM5_Init>
  MX_TIM2_Init();
 8000b64:	f000 fa6e 	bl	8001044 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /*** Configure CAN ***/
    HAL_CAN_Start(&hcan1);
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <main+0x74>)
 8000b6a:	f001 fadb 	bl	8002124 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b6e:	2102      	movs	r1, #2
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <main+0x74>)
 8000b72:	f001 fd08 	bl	8002586 <HAL_CAN_ActivateNotification>
    TxHeader.DLC = 8;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <main+0x78>)
 8000b78:	2208      	movs	r2, #8
 8000b7a:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <main+0x78>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <main+0x78>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x409;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <main+0x78>)
 8000b8a:	f240 4209 	movw	r2, #1033	; 0x409
 8000b8e:	601a      	str	r2, [r3, #0]
  /*** Configure TIMER ***/
    HAL_TIM_Base_Start_IT(&htim3);
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <main+0x7c>)
 8000b92:	f003 fa19 	bl	8003fc8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <main+0x80>)
 8000b98:	f003 fa16 	bl	8003fc8 <HAL_TIM_Base_Start_IT>
  /** Configure VL53L0X ***/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b9c:	f004 fa3a 	bl	8005014 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ba0:	f7ff fe92 	bl	80008c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ba4:	f004 fa5a 	bl	800505c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <main+0x70>
 8000baa:	bf00      	nop
 8000bac:	200000d4 	.word	0x200000d4
 8000bb0:	20000128 	.word	0x20000128
 8000bb4:	20000244 	.word	0x20000244
 8000bb8:	200002d4 	.word	0x200002d4

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	; 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 ffa8 	bl	8007b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <SystemClock_Config+0xcc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a27      	ldr	r2, [pc, #156]	; (8000c88 <SystemClock_Config+0xcc>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <SystemClock_Config+0xcc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2310      	movs	r3, #16
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c30:	23a8      	movs	r3, #168	; 0xa8
 8000c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fcfb 	bl	800363c <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c4c:	f000 f898 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 ff5c 	bl	8003b2c <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c7a:	f000 f881 	bl	8000d80 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	; 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d142      	bne.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x98>
//			servo_rotation(90);
////			osDelay(1000);
////			servo_rotation(0);
//		}

		HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4927      	ldr	r1, [pc, #156]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ca6:	4828      	ldr	r0, [pc, #160]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ca8:	f000 fc92 	bl	80015d0 <HAL_ADC_Start_DMA>
//		Cm_X = (AD_RES[0]*0.08502) + 1.727;
//		Cm_Y = (AD_RES[1]*0.08615) + 3.84;  // When RED
//		Cm_Y = (AD_RES[1]*0.154) - 2.169; // When Blue
		/*Calculation distance in Meter*/
		laserx = ((Cm_X) / 100.0f); //aready
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cae:	ed93 7a00 	vldr	s14, [r3]
 8000cb2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000d50 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
		lasery = ((Cm_Y) / 100.0f);
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cc2:	ed93 7a00 	vldr	s14, [r3]
 8000cc6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000d50 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cd0:	edc3 7a00 	vstr	s15, [r3]

		TxData[0] = ball_aready;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cda:	701a      	strb	r2, [r3, #0]
		TxData[1] = ((AD_RES[0] & 0xFF00) >> 8);
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ce8:	705a      	strb	r2, [r3, #1]
		TxData[2] = (AD_RES[0] & 0x00FF);
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cf2:	709a      	strb	r2, [r3, #2]
		TxData[3] = ((AD_RES[1] & 0xFF00) >> 8);
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000cf6:	885b      	ldrh	r3, [r3, #2]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d00:	70da      	strb	r2, [r3, #3]
		TxData[4] = (AD_RES[1] & 0x00FF);
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000d04:	885b      	ldrh	r3, [r3, #2]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d0a:	711a      	strb	r2, [r3, #4]
		TxData[5] = button;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d12:	715a      	strb	r2, [r3, #5]
		TxData[6] = check_threeball;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d1a:	719a      	strb	r2, [r3, #6]
//		TxData[7] = check_ballinside;
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d20:	4914      	ldr	r1, [pc, #80]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d22:	4815      	ldr	r0, [pc, #84]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d24:	f001 fa42 	bl	80021ac <HAL_CAN_AddTxMessage>

		}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0xa6>
    HAL_IncTick();
 8000d32:	f000 fbe9 	bl	8001508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40000400 	.word	0x40000400
 8000d44:	20000158 	.word	0x20000158
 8000d48:	2000002c 	.word	0x2000002c
 8000d4c:	2000015c 	.word	0x2000015c
 8000d50:	42c80000 	.word	0x42c80000
 8000d54:	20000164 	.word	0x20000164
 8000d58:	20000160 	.word	0x20000160
 8000d5c:	20000168 	.word	0x20000168
 8000d60:	200000fd 	.word	0x200000fd
 8000d64:	20000148 	.word	0x20000148
 8000d68:	200000fc 	.word	0x200000fc
 8000d6c:	200000fe 	.word	0x200000fe
 8000d70:	20000150 	.word	0x20000150
 8000d74:	20000128 	.word	0x20000128
 8000d78:	200000d4 	.word	0x200000d4
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_MspInit+0x54>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_MspInit+0x54>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x54>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_MspInit+0x54>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_MspInit+0x54>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_MspInit+0x54>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	210f      	movs	r1, #15
 8000dce:	f06f 0001 	mvn.w	r0, #1
 8000dd2:	f001 fee5 	bl	8002ba0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 f852 	bl	8003ec4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2a:	f003 f837 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8000e2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e30:	e004      	b.n	8000e3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e32:	f003 f833 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3e:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3b01      	subs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_InitTick+0xf0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e70:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e72:	f003 f859 	bl	8003f28 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d11b      	bne.n	8000ebc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e86:	f003 f89f 	bl	8003fc8 <HAL_TIM_Base_Start_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f001 fe9d 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d808      	bhi.n	8000eb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2036      	movs	r0, #54	; 0x36
 8000eaa:	f001 fe79 	bl	8002ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0xf4>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e002      	b.n	8000ebc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	431bde83 	.word	0x431bde83
 8000ed0:	2000016c 	.word	0x2000016c
 8000ed4:	40001000 	.word	0x40001000
 8000ed8:	20000004 	.word	0x20000004

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <CAN1_RX0_IRQHandler+0x10>)
 8000f0e:	f001 fb60 	bl	80025d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000d4 	.word	0x200000d4

08000f1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM2_IRQHandler+0x10>)
 8000f22:	f003 f9d9 	bl	80042d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001fc 	.word	0x200001fc

08000f30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM3_IRQHandler+0x10>)
 8000f36:	f003 f9cf 	bl	80042d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000244 	.word	0x20000244

08000f44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM5_IRQHandler+0x10>)
 8000f4a:	f003 f9c5 	bl	80042d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200002d4 	.word	0x200002d4

08000f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <TIM6_DAC_IRQHandler+0x10>)
 8000f5e:	f003 f9bb 	bl	80042d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000016c 	.word	0x2000016c

08000f6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA2_Stream0_IRQHandler+0x10>)
 8000f72:	f001 ff45 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000074 	.word	0x20000074

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_TIM1_Init+0x98>)
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM1_Init+0x98>)
 8000fc8:	22a7      	movs	r2, #167	; 0xa7
 8000fca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_TIM1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM1_Init+0x98>)
 8000fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM1_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM1_Init+0x98>)
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_TIM1_Init+0x98>)
 8000fee:	f002 ff9b 	bl	8003f28 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f7ff fec2 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM1_Init+0x98>)
 800100a:	f003 fb2f 	bl	800466c <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001014:	f7ff feb4 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM1_Init+0x98>)
 8001026:	f003 ff21 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001030:	f7ff fea6 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001b4 	.word	0x200001b4
 8001040:	40010000 	.word	0x40010000

08001044 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001062:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001066:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM2_Init+0x94>)
 800106a:	2253      	movs	r2, #83	; 0x53
 800106c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM2_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_TIM2_Init+0x94>)
 800108a:	f002 ff4d 	bl	8003f28 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001094:	f7ff fe74 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM2_Init+0x94>)
 80010a6:	f003 fae1 	bl	800466c <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b0:	f7ff fe66 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM2_Init+0x94>)
 80010c2:	f003 fed3 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f7ff fe58 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001fc 	.word	0x200001fc

080010dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_TIM3_Init+0x94>)
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <MX_TIM3_Init+0x98>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_TIM3_Init+0x94>)
 8001100:	2253      	movs	r2, #83	; 0x53
 8001102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_TIM3_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_TIM3_Init+0x94>)
 800110c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001110:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_TIM3_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_TIM3_Init+0x94>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_TIM3_Init+0x94>)
 8001120:	f002 ff02 	bl	8003f28 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800112a:	f7ff fe29 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_TIM3_Init+0x94>)
 800113c:	f003 fa96 	bl	800466c <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001146:	f7ff fe1b 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_TIM3_Init+0x94>)
 8001158:	f003 fe88 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001162:	f7ff fe0d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000244 	.word	0x20000244
 8001174:	40000400 	.word	0x40000400

08001178 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_TIM4_Init+0xac>)
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <MX_TIM4_Init+0xb0>)
 800119e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_TIM4_Init+0xac>)
 80011a2:	220f      	movs	r2, #15
 80011a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_TIM4_Init+0xac>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM4_Init+0xac>)
 80011ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80011b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM4_Init+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM4_Init+0xac>)
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011c0:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_TIM4_Init+0xac>)
 80011c2:	f002 ff71 	bl	80040a8 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80011cc:	f7ff fdd8 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4619      	mov	r1, r3
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_TIM4_Init+0xac>)
 80011e0:	f003 fe44 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80011ea:	f7ff fdc9 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ee:	2360      	movs	r3, #96	; 0x60
 80011f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM4_Init+0xac>)
 8001206:	f003 f96f 	bl	80044e8 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001210:	f7ff fdb6 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM4_Init+0xac>)
 8001216:	f000 f8f1 	bl	80013fc <HAL_TIM_MspPostInit>

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000028c 	.word	0x2000028c
 8001228:	40000800 	.word	0x40000800

0800122c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM5_Init+0x94>)
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_TIM5_Init+0x98>)
 800124c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM5_Init+0x94>)
 8001250:	22a7      	movs	r2, #167	; 0xa7
 8001252:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM5_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM5_Init+0x94>)
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_TIM5_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM5_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_TIM5_Init+0x94>)
 8001270:	f002 fe5a 	bl	8003f28 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800127a:	f7ff fd81 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM5_Init+0x94>)
 800128c:	f003 f9ee 	bl	800466c <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001296:	f7ff fd73 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM5_Init+0x94>)
 80012a8:	f003 fde0 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80012b2:	f7ff fd65 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002d4 	.word	0x200002d4
 80012c4:	40000c00 	.word	0x40000c00

080012c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10e      	bne.n	80012f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b33      	ldr	r3, [pc, #204]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80012f6:	e052      	b.n	800139e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d116      	bne.n	8001330 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2105      	movs	r1, #5
 8001322:	201c      	movs	r0, #28
 8001324:	f001 fc3c 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001328:	201c      	movs	r0, #28
 800132a:	f001 fc55 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 800132e:	e036      	b.n	800139e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_TIM_Base_MspInit+0xe8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d116      	bne.n	8001368 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2105      	movs	r1, #5
 800135a:	201d      	movs	r0, #29
 800135c:	f001 fc20 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001360:	201d      	movs	r0, #29
 8001362:	f001 fc39 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 8001366:	e01a      	b.n	800139e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_TIM_Base_MspInit+0xec>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d115      	bne.n	800139e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2105      	movs	r1, #5
 8001392:	2032      	movs	r0, #50	; 0x32
 8001394:	f001 fc04 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001398:	2032      	movs	r0, #50	; 0x32
 800139a:	f001 fc1d 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40000400 	.word	0x40000400
 80013b4:	40000c00 	.word	0x40000c00

080013b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10d      	bne.n	80013e6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_TIM_PWM_MspInit+0x40>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <HAL_TIM_PWM_MspInit+0x40>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_TIM_PWM_MspInit+0x40>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40000800 	.word	0x40000800
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_TIM_MspPostInit+0x68>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11e      	bne.n	800145c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800144c:	2302      	movs	r3, #2
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_TIM_MspPostInit+0x70>)
 8001458:	f001 ff3c 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40000800 	.word	0x40000800
 8001468:	40023800 	.word	0x40023800
 800146c:	40020c00 	.word	0x40020c00

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001476:	490e      	ldr	r1, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800148c:	4c0b      	ldr	r4, [pc, #44]	; (80014bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800149a:	f7ff fd71 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f006 fb0d 	bl	8007abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fb49 	bl	8000b38 <main>
  bx  lr    
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014b4:	08007bf0 	.word	0x08007bf0
  ldr r2, =_sbss
 80014b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014bc:	20004c70 	.word	0x20004c70

080014c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_Init+0x40>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_Init+0x40>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x40>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f001 fb4c 	bl	8002b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	200f      	movs	r0, #15
 80014f4:	f7ff fc76 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fc48 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	2000031c 	.word	0x2000031c

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000031c 	.word	0x2000031c

08001548 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e033      	b.n	80015c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff f814 	bl	8000594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800158e:	f023 0302 	bic.w	r3, r3, #2
 8001592:	f043 0202 	orr.w	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa68 	bl	8001a70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
 80015b6:	e001      	b.n	80015bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Start_DMA+0x1e>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e0e9      	b.n	80017c2 <HAL_ADC_Start_DMA+0x1f2>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d018      	beq.n	8001636 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001614:	4b6d      	ldr	r3, [pc, #436]	; (80017cc <HAL_ADC_Start_DMA+0x1fc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6d      	ldr	r2, [pc, #436]	; (80017d0 <HAL_ADC_Start_DMA+0x200>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9a      	lsrs	r2, r3, #18
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001628:	e002      	b.n	8001630 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	3b01      	subs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f9      	bne.n	800162a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001644:	d107      	bne.n	8001656 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001654:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	f040 80a1 	bne.w	80017a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001690:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a4:	d106      	bne.n	80016b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f023 0206 	bic.w	r2, r3, #6
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
 80016b2:	e002      	b.n	80016ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_ADC_Start_DMA+0x204>)
 80016c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ca:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_ADC_Start_DMA+0x208>)
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	4a42      	ldr	r2, [pc, #264]	; (80017dc <HAL_ADC_Start_DMA+0x20c>)
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <HAL_ADC_Start_DMA+0x210>)
 80016dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001706:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	334c      	adds	r3, #76	; 0x4c
 8001712:	4619      	mov	r1, r3
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f001 fb1a 	bl	8002d50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2b00      	cmp	r3, #0
 8001726:	d12a      	bne.n	800177e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <HAL_ADC_Start_DMA+0x214>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d015      	beq.n	800175e <HAL_ADC_Start_DMA+0x18e>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <HAL_ADC_Start_DMA+0x218>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d105      	bne.n	8001748 <HAL_ADC_Start_DMA+0x178>
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_ADC_Start_DMA+0x204>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <HAL_ADC_Start_DMA+0x21c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d136      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_ADC_Start_DMA+0x204>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	d130      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d129      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e020      	b.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <HAL_ADC_Start_DMA+0x214>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d11b      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d114      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	e00b      	b.n	80017c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f043 0210 	orr.w	r2, r3, #16
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	40012300 	.word	0x40012300
 80017d8:	08001c69 	.word	0x08001c69
 80017dc:	08001d23 	.word	0x08001d23
 80017e0:	08001d3f 	.word	0x08001d3f
 80017e4:	40012000 	.word	0x40012000
 80017e8:	40012100 	.word	0x40012100
 80017ec:	40012200 	.word	0x40012200

080017f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1c>
 8001844:	2302      	movs	r3, #2
 8001846:	e105      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x228>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b09      	cmp	r3, #9
 8001856:	d925      	bls.n	80018a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68d9      	ldr	r1, [r3, #12]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	3b1e      	subs	r3, #30
 800186e:	2207      	movs	r2, #7
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43da      	mvns	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	400a      	ands	r2, r1
 800187c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68d9      	ldr	r1, [r3, #12]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	4603      	mov	r3, r0
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4403      	add	r3, r0
 8001896:	3b1e      	subs	r3, #30
 8001898:	409a      	lsls	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	e022      	b.n	80018ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6919      	ldr	r1, [r3, #16]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	2207      	movs	r2, #7
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	400a      	ands	r2, r1
 80018c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4403      	add	r3, r0
 80018e0:	409a      	lsls	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d824      	bhi.n	800193c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b05      	subs	r3, #5
 8001904:	221f      	movs	r2, #31
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b05      	subs	r3, #5
 800192e:	fa00 f203 	lsl.w	r2, r0, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
 800193a:	e04c      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	d824      	bhi.n	800198e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b23      	subs	r3, #35	; 0x23
 8001956:	221f      	movs	r2, #31
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43da      	mvns	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	400a      	ands	r2, r1
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	3b23      	subs	r3, #35	; 0x23
 8001980:	fa00 f203 	lsl.w	r2, r0, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
 800198c:	e023      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	3b41      	subs	r3, #65	; 0x41
 80019a0:	221f      	movs	r2, #31
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	400a      	ands	r2, r1
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	3b41      	subs	r3, #65	; 0x41
 80019ca:	fa00 f203 	lsl.w	r2, r0, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_ADC_ConfigChannel+0x234>)
 80019d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <HAL_ADC_ConfigChannel+0x238>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x1cc>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b12      	cmp	r3, #18
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <HAL_ADC_ConfigChannel+0x238>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d123      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x21e>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d003      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x1e6>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	d11b      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d111      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_ADC_ConfigChannel+0x23c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_ADC_ConfigChannel+0x240>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9a      	lsrs	r2, r3, #18
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a3c:	e002      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f9      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40012300 	.word	0x40012300
 8001a64:	40012000 	.word	0x40012000
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	431bde83 	.word	0x431bde83

08001a70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <ADC_Init+0x1f0>)
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	021a      	lsls	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6899      	ldr	r1, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <ADC_Init+0x1f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d022      	beq.n	8001b4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6899      	ldr	r1, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	e00f      	b.n	8001b6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0202 	bic.w	r2, r2, #2
 8001b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	005a      	lsls	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01b      	beq.n	8001bd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001baa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	035a      	lsls	r2, r3, #13
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e007      	b.n	8001be4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	051a      	lsls	r2, r3, #20
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c26:	025a      	lsls	r2, r3, #9
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6899      	ldr	r1, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	029a      	lsls	r2, r3, #10
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	609a      	str	r2, [r3, #8]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40012300 	.word	0x40012300
 8001c64:	0f000001 	.word	0x0f000001

08001c68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13c      	bne.n	8001cfc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d12b      	bne.n	8001cf4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d127      	bne.n	8001cf4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d119      	bne.n	8001cf4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0220 	bic.w	r2, r2, #32
 8001cce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff fd7b 	bl	80017f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cfa:	e00e      	b.n	8001d1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fd85 	bl	8001818 <HAL_ADC_ErrorCallback>
}
 8001d0e:	e004      	b.n	8001d1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff fd67 	bl	8001804 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f043 0204 	orr.w	r2, r3, #4
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff fd5a 	bl	8001818 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0ed      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fcca 	bl	8000724 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff fbc6 	bl	8001530 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001da6:	e012      	b.n	8001dce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da8:	f7ff fbc2 	bl	8001530 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d90b      	bls.n	8001dce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0c5      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0e5      	beq.n	8001da8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0202 	bic.w	r2, r2, #2
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dec:	f7ff fba0 	bl	8001530 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df2:	e012      	b.n	8001e1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df4:	f7ff fb9c 	bl	8001530 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d90b      	bls.n	8001e1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2205      	movs	r2, #5
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e09f      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e5      	bne.n	8001df4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e5b      	ldrb	r3, [r3, #25]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e9b      	ldrb	r3, [r3, #26]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0220 	orr.w	r2, r2, #32
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0220 	bic.w	r2, r2, #32
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7edb      	ldrb	r3, [r3, #27]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0210 	bic.w	r2, r2, #16
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0210 	orr.w	r2, r2, #16
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7f1b      	ldrb	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7f5b      	ldrb	r3, [r3, #29]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0204 	orr.w	r2, r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d003      	beq.n	8001f8a <HAL_CAN_ConfigFilter+0x26>
 8001f82:	7cfb      	ldrb	r3, [r7, #19]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	f040 80be 	bne.w	8002106 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2201      	movs	r2, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d123      	bne.n	8002034 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800200e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3248      	adds	r2, #72	; 0x48
 8002014:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002028:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800202a:	6979      	ldr	r1, [r7, #20]
 800202c:	3348      	adds	r3, #72	; 0x48
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d122      	bne.n	8002082 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800205c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3248      	adds	r2, #72	; 0x48
 8002062:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002076:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002078:	6979      	ldr	r1, [r7, #20]
 800207a:	3348      	adds	r3, #72	; 0x48
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	401a      	ands	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800209c:	e007      	b.n	80020ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020c8:	e007      	b.n	80020da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020f8:	f023 0201 	bic.w	r2, r3, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e006      	b.n	8002114 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
  }
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40006400 	.word	0x40006400

08002124 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d12e      	bne.n	8002196 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff f9ee 	bl	8001530 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002156:	e012      	b.n	800217e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002158:	f7ff f9ea 	bl	8001530 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b0a      	cmp	r3, #10
 8002164:	d90b      	bls.n	800217e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e012      	b.n	80021a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e006      	b.n	80021a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
  }
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_AddTxMessage+0x2c>
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 80b8 	bne.w	8002348 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80a0 	beq.w	8002338 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	0e1b      	lsrs	r3, r3, #24
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d907      	bls.n	8002218 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e09e      	b.n	8002356 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002218:	2201      	movs	r2, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	409a      	lsls	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3318      	adds	r3, #24
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	440b      	add	r3, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e00f      	b.n	8002266 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002250:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800225a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3318      	adds	r3, #24
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	440b      	add	r3, r1
 8002264:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3318      	adds	r3, #24
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	440b      	add	r3, r1
 8002276:	3304      	adds	r3, #4
 8002278:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	7d1b      	ldrb	r3, [r3, #20]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d111      	bne.n	80022a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3318      	adds	r3, #24
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3318      	adds	r3, #24
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	440b      	add	r3, r1
 80022a2:	3304      	adds	r3, #4
 80022a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3307      	adds	r3, #7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3306      	adds	r3, #6
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3305      	adds	r3, #5
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	3204      	adds	r2, #4
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	ea43 0200 	orr.w	r2, r3, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3303      	adds	r3, #3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3302      	adds	r3, #2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	4610      	mov	r0, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6811      	ldr	r1, [r2, #0]
 8002304:	ea43 0200 	orr.w	r2, r3, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	440b      	add	r3, r1
 800230e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002312:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3318      	adds	r3, #24
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3318      	adds	r3, #24
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e00e      	b.n	8002356 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e006      	b.n	8002356 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002376:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d003      	beq.n	8002386 <HAL_CAN_GetRxMessage+0x24>
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b02      	cmp	r3, #2
 8002382:	f040 80f3 	bne.w	800256c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10e      	bne.n	80023aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d116      	bne.n	80023c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0e7      	b.n	800257a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d8      	b.n	800257a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	331b      	adds	r3, #27
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0204 	and.w	r2, r3, #4
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	331b      	adds	r3, #27
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0d5b      	lsrs	r3, r3, #21
 80023f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	331b      	adds	r3, #27
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	331b      	adds	r3, #27
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0202 	and.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	331b      	adds	r3, #27
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	331b      	adds	r3, #27
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	331b      	adds	r3, #27
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0a1a      	lsrs	r2, r3, #8
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0c1a      	lsrs	r2, r3, #16
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3302      	adds	r3, #2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e1a      	lsrs	r2, r3, #24
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3303      	adds	r3, #3
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	3304      	adds	r3, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0a1a      	lsrs	r2, r3, #8
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3305      	adds	r3, #5
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0c1a      	lsrs	r2, r3, #16
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3306      	adds	r3, #6
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4413      	add	r3, r2
 8002530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e1a      	lsrs	r2, r3, #24
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3307      	adds	r3, #7
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e007      	b.n	8002568 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e006      	b.n	800257a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d002      	beq.n	80025a4 <HAL_CAN_ActivateNotification+0x1e>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d109      	bne.n	80025b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e006      	b.n	80025c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08a      	sub	sp, #40	; 0x28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d07c      	beq.n	8002712 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d023      	beq.n	800266a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f983 	bl	8002940 <HAL_CAN_TxMailbox0CompleteCallback>
 800263a:	e016      	b.n	800266a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	e00c      	b.n	800266a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e002      	b.n	800266a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f989 	bl	800297c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d024      	beq.n	80026be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f963 	bl	8002954 <HAL_CAN_TxMailbox1CompleteCallback>
 800268e:	e016      	b.n	80026be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e00c      	b.n	80026be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e002      	b.n	80026be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f969 	bl	8002990 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d024      	beq.n	8002712 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f943 	bl	8002968 <HAL_CAN_TxMailbox2CompleteCallback>
 80026e2:	e016      	b.n	8002712 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e00c      	b.n	8002712 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e002      	b.n	8002712 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f949 	bl	80029a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2210      	movs	r2, #16
 8002734:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f930 	bl	80029b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7fe f9b3 	bl	8000adc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2210      	movs	r2, #16
 8002798:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2208      	movs	r2, #8
 80027b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f912 	bl	80029e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8f9 	bl	80029cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8fc 	bl	80029f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2208      	movs	r2, #8
 8002816:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8f5 	bl	8002a08 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d07b      	beq.n	8002920 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d072      	beq.n	8002918 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	d043      	beq.n	8002918 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03e      	beq.n	8002918 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d02b      	beq.n	80028fc <HAL_CAN_IRQHandler+0x32a>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d82e      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d022      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x320>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d82a      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d019      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x316>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d826      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d010      	beq.n	80028de <HAL_CAN_IRQHandler+0x30c>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d822      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d002      	beq.n	80028ca <HAL_CAN_IRQHandler+0x2f8>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d005      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028c8:	e01d      	b.n	8002906 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028d2:	e019      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028dc:	e014      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f043 0320 	orr.w	r3, r3, #32
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028e6:	e00f      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f0:	e00a      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028fa:	e005      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002904:	e000      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            break;
 8002906:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002916:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f872 	bl	8002a1c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff4c 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb2:	f7ff ff61 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7ff ffb1 	bl	8002b24 <NVIC_EncodePriority>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff80 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff54 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7fe fc96 	bl	8001530 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e099      	b.n	8002d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c30:	e00f      	b.n	8002c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c32:	f7fe fc7d 	bl	8001530 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d908      	bls.n	8002c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e078      	b.n	8002d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e8      	bne.n	8002c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_DMA_Init+0x158>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0307 	bic.w	r3, r3, #7
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d117      	bne.n	8002d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa6f 	bl	80031dc <DMA_CheckFifoParam>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d12:	2301      	movs	r3, #1
 8002d14:	e016      	b.n	8002d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa26 	bl	8003170 <DMA_CalcBaseAndBitshift>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	223f      	movs	r2, #63	; 0x3f
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	f010803f 	.word	0xf010803f

08002d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Start_IT+0x26>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e040      	b.n	8002df8 <HAL_DMA_Start_IT+0xa8>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d12f      	bne.n	8002dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f9b8 	bl	8003114 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	223f      	movs	r2, #63	; 0x3f
 8002daa:	409a      	lsls	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0216 	orr.w	r2, r2, #22
 8002dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e005      	b.n	8002df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e0c:	4b8e      	ldr	r3, [pc, #568]	; (8003048 <HAL_DMA_IRQHandler+0x248>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a8e      	ldr	r2, [pc, #568]	; (800304c <HAL_DMA_IRQHandler+0x24c>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2208      	movs	r2, #8
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2210      	movs	r2, #16
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d043      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03c      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2210      	movs	r2, #16
 8002efc:	409a      	lsls	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d024      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
 8002f2e:	e01f      	b.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e016      	b.n	8002f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0208 	bic.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2220      	movs	r2, #32
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 808f 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8087 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2220      	movs	r2, #32
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d136      	bne.n	8003018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0216 	bic.w	r2, r2, #22
 8002fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_DMA_IRQHandler+0x1da>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	223f      	movs	r2, #63	; 0x3f
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d07e      	beq.n	800310c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
        }
        return;
 8003016:	e079      	b.n	800310c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	2b00      	cmp	r3, #0
 800303a:	d031      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
 8003044:	e02c      	b.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000
 800304c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e01e      	b.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d032      	beq.n	800310e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2205      	movs	r2, #5
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d307      	bcc.n	80030e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f2      	bne.n	80030cc <HAL_DMA_IRQHandler+0x2cc>
 80030e6:	e000      	b.n	80030ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
 800310a:	e000      	b.n	800310e <HAL_DMA_IRQHandler+0x30e>
        return;
 800310c:	bf00      	nop
    }
  }
}
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003130:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d108      	bne.n	8003154 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003152:	e007      	b.n	8003164 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	3b10      	subs	r3, #16
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <DMA_CalcBaseAndBitshift+0x68>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d909      	bls.n	80031b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	1d1a      	adds	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	659a      	str	r2, [r3, #88]	; 0x58
 80031b0:	e007      	b.n	80031c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	aaaaaaab 	.word	0xaaaaaaab
 80031d8:	08007bd8 	.word	0x08007bd8

080031dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11f      	bne.n	8003236 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d856      	bhi.n	80032aa <DMA_CheckFifoParam+0xce>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <DMA_CheckFifoParam+0x28>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003227 	.word	0x08003227
 800320c:	08003215 	.word	0x08003215
 8003210:	080032ab 	.word	0x080032ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d046      	beq.n	80032ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003224:	e043      	b.n	80032ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800322e:	d140      	bne.n	80032b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003234:	e03d      	b.n	80032b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d121      	bne.n	8003284 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d837      	bhi.n	80032b6 <DMA_CheckFifoParam+0xda>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <DMA_CheckFifoParam+0x70>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003263 	.word	0x08003263
 8003254:	0800325d 	.word	0x0800325d
 8003258:	08003275 	.word	0x08003275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      break;
 8003260:	e030      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d025      	beq.n	80032ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003272:	e022      	b.n	80032ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800327c:	d11f      	bne.n	80032be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003282:	e01c      	b.n	80032be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d903      	bls.n	8003292 <DMA_CheckFifoParam+0xb6>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d003      	beq.n	8003298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003290:	e018      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      break;
 8003296:	e015      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e00b      	b.n	80032c2 <DMA_CheckFifoParam+0xe6>
      break;
 80032aa:	bf00      	nop
 80032ac:	e00a      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
 80032b0:	e008      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e006      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e004      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032c2:	bf00      	nop
    }
  } 
  
  return status; 
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e16b      	b.n	80035c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	429a      	cmp	r2, r3
 800330a:	f040 815a 	bne.w	80035c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d005      	beq.n	8003326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003322:	2b02      	cmp	r3, #2
 8003324:	d130      	bne.n	8003388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800335c:	2201      	movs	r2, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 0201 	and.w	r2, r3, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b03      	cmp	r3, #3
 8003392:	d017      	beq.n	80033c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d123      	bne.n	8003418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	220f      	movs	r2, #15
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80b4 	beq.w	80035c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <HAL_GPIO_Init+0x30c>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a5f      	ldr	r2, [pc, #380]	; (80035e0 <HAL_GPIO_Init+0x30c>)
 8003464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_GPIO_Init+0x30c>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003476:	4a5b      	ldr	r2, [pc, #364]	; (80035e4 <HAL_GPIO_Init+0x310>)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a52      	ldr	r2, [pc, #328]	; (80035e8 <HAL_GPIO_Init+0x314>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02b      	beq.n	80034fa <HAL_GPIO_Init+0x226>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a51      	ldr	r2, [pc, #324]	; (80035ec <HAL_GPIO_Init+0x318>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d025      	beq.n	80034f6 <HAL_GPIO_Init+0x222>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a50      	ldr	r2, [pc, #320]	; (80035f0 <HAL_GPIO_Init+0x31c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01f      	beq.n	80034f2 <HAL_GPIO_Init+0x21e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4f      	ldr	r2, [pc, #316]	; (80035f4 <HAL_GPIO_Init+0x320>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x21a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4e      	ldr	r2, [pc, #312]	; (80035f8 <HAL_GPIO_Init+0x324>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x216>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4d      	ldr	r2, [pc, #308]	; (80035fc <HAL_GPIO_Init+0x328>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x212>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <HAL_GPIO_Init+0x32c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x20e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	; (8003604 <HAL_GPIO_Init+0x330>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x20a>
 80034da:	2307      	movs	r3, #7
 80034dc:	e00e      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034de:	2308      	movs	r3, #8
 80034e0:	e00c      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034e2:	2306      	movs	r3, #6
 80034e4:	e00a      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034e6:	2305      	movs	r3, #5
 80034e8:	e008      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034ea:	2304      	movs	r3, #4
 80034ec:	e006      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034ee:	2303      	movs	r3, #3
 80034f0:	e004      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_GPIO_Init+0x228>
 80034fa:	2300      	movs	r3, #0
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f002 0203 	and.w	r2, r2, #3
 8003502:	0092      	lsls	r2, r2, #2
 8003504:	4093      	lsls	r3, r2
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800350c:	4935      	ldr	r1, [pc, #212]	; (80035e4 <HAL_GPIO_Init+0x310>)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800351a:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <HAL_GPIO_Init+0x334>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800353e:	4a32      	ldr	r2, [pc, #200]	; (8003608 <HAL_GPIO_Init+0x334>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003544:	4b30      	ldr	r3, [pc, #192]	; (8003608 <HAL_GPIO_Init+0x334>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_GPIO_Init+0x334>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_GPIO_Init+0x334>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003592:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_GPIO_Init+0x334>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_GPIO_Init+0x334>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035bc:	4a12      	ldr	r2, [pc, #72]	; (8003608 <HAL_GPIO_Init+0x334>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	f67f ae90 	bls.w	80032f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40021400 	.word	0x40021400
 8003600:	40021800 	.word	0x40021800
 8003604:	40021c00 	.word	0x40021c00
 8003608:	40013c00 	.word	0x40013c00

0800360c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	e001      	b.n	800362e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e267      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d075      	beq.n	8003746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800365a:	4b88      	ldr	r3, [pc, #544]	; (800387c <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b04      	cmp	r3, #4
 8003664:	d00c      	beq.n	8003680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	4b85      	ldr	r3, [pc, #532]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800366e:	2b08      	cmp	r3, #8
 8003670:	d112      	bne.n	8003698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003672:	4b82      	ldr	r3, [pc, #520]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367e:	d10b      	bne.n	8003698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	4b7e      	ldr	r3, [pc, #504]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05b      	beq.n	8003744 <HAL_RCC_OscConfig+0x108>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d157      	bne.n	8003744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e242      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d106      	bne.n	80036b0 <HAL_RCC_OscConfig+0x74>
 80036a2:	4b76      	ldr	r3, [pc, #472]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a75      	ldr	r2, [pc, #468]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e01d      	b.n	80036ec <HAL_RCC_OscConfig+0xb0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x98>
 80036ba:	4b70      	ldr	r3, [pc, #448]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6f      	ldr	r2, [pc, #444]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b6d      	ldr	r3, [pc, #436]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6c      	ldr	r2, [pc, #432]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0xb0>
 80036d4:	4b69      	ldr	r3, [pc, #420]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a68      	ldr	r2, [pc, #416]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b66      	ldr	r3, [pc, #408]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a65      	ldr	r2, [pc, #404]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fd ff1c 	bl	8001530 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fd ff18 	bl	8001530 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e207      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b5b      	ldr	r3, [pc, #364]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0xc0>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd ff08 	bl	8001530 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd ff04 	bl	8001530 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1f3      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	4b51      	ldr	r3, [pc, #324]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0xe8>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d063      	beq.n	800381a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003766:	2b08      	cmp	r3, #8
 8003768:	d11c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b44      	ldr	r3, [pc, #272]	; (800387c <HAL_RCC_OscConfig+0x240>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d116      	bne.n	80037a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_RCC_OscConfig+0x152>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d001      	beq.n	800378e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e1c7      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4937      	ldr	r1, [pc, #220]	; (800387c <HAL_RCC_OscConfig+0x240>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	e03a      	b.n	800381a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ac:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCC_OscConfig+0x244>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fd febd 	bl	8001530 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ba:	f7fd feb9 	bl	8001530 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1a8      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4925      	ldr	r1, [pc, #148]	; (800387c <HAL_RCC_OscConfig+0x240>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
 80037ec:	e015      	b.n	800381a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCC_OscConfig+0x244>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fe9c 	bl	8001530 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fc:	f7fd fe98 	bl	8001530 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e187      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d036      	beq.n	8003894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_RCC_OscConfig+0x248>)
 8003830:	2201      	movs	r2, #1
 8003832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fe7c 	bl	8001530 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383c:	f7fd fe78 	bl	8001530 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e167      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_OscConfig+0x240>)
 8003850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x200>
 800385a:	e01b      	b.n	8003894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_OscConfig+0x248>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7fd fe65 	bl	8001530 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	e00e      	b.n	8003888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386a:	f7fd fe61 	bl	8001530 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d907      	bls.n	8003888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e150      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
 800387c:	40023800 	.word	0x40023800
 8003880:	42470000 	.word	0x42470000
 8003884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ea      	bne.n	800386a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8097 	beq.w	80039d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a6:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10f      	bne.n	80038d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	4b7d      	ldr	r3, [pc, #500]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a7c      	ldr	r2, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b7a      	ldr	r3, [pc, #488]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	4b77      	ldr	r3, [pc, #476]	; (8003ab0 <HAL_RCC_OscConfig+0x474>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d118      	bne.n	8003910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038de:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <HAL_RCC_OscConfig+0x474>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a73      	ldr	r2, [pc, #460]	; (8003ab0 <HAL_RCC_OscConfig+0x474>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fd fe21 	bl	8001530 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f2:	f7fd fe1d 	bl	8001530 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e10c      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <HAL_RCC_OscConfig+0x474>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d106      	bne.n	8003926 <HAL_RCC_OscConfig+0x2ea>
 8003918:	4b64      	ldr	r3, [pc, #400]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a63      	ldr	r2, [pc, #396]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	e01c      	b.n	8003960 <HAL_RCC_OscConfig+0x324>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b05      	cmp	r3, #5
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x30c>
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a5e      	ldr	r2, [pc, #376]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
 800393a:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a5b      	ldr	r2, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0x324>
 8003948:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a57      	ldr	r2, [pc, #348]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	4b55      	ldr	r3, [pc, #340]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a54      	ldr	r2, [pc, #336]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 800395a:	f023 0304 	bic.w	r3, r3, #4
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fd fde2 	bl	8001530 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd fdde 	bl	8001530 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0cb      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	4b49      	ldr	r3, [pc, #292]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0ee      	beq.n	8003970 <HAL_RCC_OscConfig+0x334>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fd fdcc 	bl	8001530 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7fd fdc8 	bl	8001530 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e0b5      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b2:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1ee      	bne.n	800399c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d105      	bne.n	80039d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80039ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a1 	beq.w	8003b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d05c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d141      	bne.n	8003a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_RCC_OscConfig+0x478>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fd9c 	bl	8001530 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd fd98 	bl	8001530 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e087      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	019b      	lsls	r3, r3, #6
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	3b01      	subs	r3, #1
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	061b      	lsls	r3, r3, #24
 8003a3e:	491b      	ldr	r1, [pc, #108]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_RCC_OscConfig+0x478>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fd71 	bl	8001530 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fd6d 	bl	8001530 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e05c      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x416>
 8003a70:	e054      	b.n	8003b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_RCC_OscConfig+0x478>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fd fd5a 	bl	8001530 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd fd56 	bl	8001530 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e045      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x470>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x444>
 8003a9e:	e03d      	b.n	8003b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e038      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x4ec>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d028      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d121      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d11a      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d111      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	3b01      	subs	r3, #1
 8003b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800

08003b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0cc      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d90c      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b65      	ldr	r3, [pc, #404]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b98:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d044      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d119      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e06f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e067      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4934      	ldr	r1, [pc, #208]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fc88 	bl	8001530 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fd fc84 	bl	8001530 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e04f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d20c      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e032      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cb2:	f000 f821 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	490a      	ldr	r1, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd f886 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023c00 	.word	0x40023c00
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	08007bc0 	.word	0x08007bc0
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	20000004 	.word	0x20000004

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b090      	sub	sp, #64	; 0x40
 8003cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
 8003d04:	2300      	movs	r3, #0
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d08:	2300      	movs	r3, #0
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d00d      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x40>
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	f200 80a1 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x34>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d2a:	e09b      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d30:	e09b      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d32:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d36:	e098      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d42:	4b4d      	ldr	r3, [pc, #308]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	2200      	movs	r2, #0
 8003d56:	623b      	str	r3, [r7, #32]
 8003d58:	627a      	str	r2, [r7, #36]	; 0x24
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d60:	2100      	movs	r1, #0
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d64:	fb03 f201 	mul.w	r2, r3, r1
 8003d68:	2300      	movs	r3, #0
 8003d6a:	fb00 f303 	mul.w	r3, r0, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a43      	ldr	r2, [pc, #268]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d72:	fba0 1202 	umull	r1, r2, r0, r2
 8003d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d78:	460a      	mov	r2, r1
 8003d7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7e:	4413      	add	r3, r2
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	2200      	movs	r2, #0
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	61fa      	str	r2, [r7, #28]
 8003d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d92:	f7fc fa1d 	bl	80001d0 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9e:	e053      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	2200      	movs	r2, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	617a      	str	r2, [r7, #20]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003db2:	f04f 0b00 	mov.w	fp, #0
 8003db6:	4652      	mov	r2, sl
 8003db8:	465b      	mov	r3, fp
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	ebb2 080a 	subs.w	r8, r2, sl
 8003dd2:	eb63 090b 	sbc.w	r9, r3, fp
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003de2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003de6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dea:	ebb2 0408 	subs.w	r4, r2, r8
 8003dee:	eb63 0509 	sbc.w	r5, r3, r9
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	00eb      	lsls	r3, r5, #3
 8003dfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e00:	00e2      	lsls	r2, r4, #3
 8003e02:	4614      	mov	r4, r2
 8003e04:	461d      	mov	r5, r3
 8003e06:	eb14 030a 	adds.w	r3, r4, sl
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	eb45 030b 	adc.w	r3, r5, fp
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	2200      	movs	r2, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	60fa      	str	r2, [r7, #12]
 8003e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3c:	f7fc f9c8 	bl	80001d0 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	3301      	adds	r3, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3740      	adds	r7, #64	; 0x40
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	017d7840 	.word	0x017d7840

08003e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	08007bd0 	.word	0x08007bd0

08003ec4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0203 	and.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_RCC_GetClockConfig+0x60>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0207 	and.w	r2, r3, #7
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40023c00 	.word	0x40023c00

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e041      	b.n	8003fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd f9ba 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fc70 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04e      	b.n	800407e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d01d      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <HAL_TIM_Base_Start_IT+0xc8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <HAL_TIM_Base_Start_IT+0xcc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_TIM_Base_Start_IT+0xd0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_TIM_Base_Start_IT+0xd4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d010      	beq.n	800407c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	e007      	b.n	800407c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40010400 	.word	0x40010400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40001800 	.word	0x40001800

080040a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd f972 	bl	80013b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fbb0 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start+0x24>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e022      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d109      	bne.n	8004186 <HAL_TIM_PWM_Start+0x3e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e015      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e008      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07c      	b.n	80042b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Start+0x82>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c8:	e013      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d104      	bne.n	80041da <HAL_TIM_PWM_Start+0x92>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d8:	e00b      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d104      	bne.n	80041ea <HAL_TIM_PWM_Start+0xa2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e8:	e003      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fe10 	bl	8004e20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2d      	ldr	r2, [pc, #180]	; (80042bc <HAL_TIM_PWM_Start+0x174>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_PWM_Start+0xcc>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <HAL_TIM_PWM_Start+0x178>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_TIM_PWM_Start+0xd0>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_Start+0xd2>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a22      	ldr	r2, [pc, #136]	; (80042bc <HAL_TIM_PWM_Start+0x174>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d01d      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_TIM_PWM_Start+0x17c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <HAL_TIM_PWM_Start+0x180>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_TIM_PWM_Start+0x184>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_TIM_PWM_Start+0x178>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_TIM_PWM_Start+0x188>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIM_PWM_Start+0x136>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <HAL_TIM_PWM_Start+0x18c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d111      	bne.n	80042a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d010      	beq.n	80042b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	e007      	b.n	80042b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40010400 	.word	0x40010400
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40001800 	.word	0x40001800

080042d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0202 	mvn.w	r2, #2
 8004304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa77 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa69 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa7a 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0204 	mvn.w	r2, #4
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa4d 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa3f 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa50 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0208 	mvn.w	r2, #8
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa23 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa15 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa26 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0210 	mvn.w	r2, #16
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2208      	movs	r2, #8
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9f9 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9eb 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f9fc 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0201 	mvn.w	r2, #1
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fc1a 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fd78 	bl	8004f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9c1 	bl	8004836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0220 	mvn.w	r2, #32
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fd42 	bl	8004f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004502:	2302      	movs	r3, #2
 8004504:	e0ae      	b.n	8004664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	f200 809f 	bhi.w	8004654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	08004551 	.word	0x08004551
 8004520:	08004655 	.word	0x08004655
 8004524:	08004655 	.word	0x08004655
 8004528:	08004655 	.word	0x08004655
 800452c:	08004591 	.word	0x08004591
 8004530:	08004655 	.word	0x08004655
 8004534:	08004655 	.word	0x08004655
 8004538:	08004655 	.word	0x08004655
 800453c:	080045d3 	.word	0x080045d3
 8004540:	08004655 	.word	0x08004655
 8004544:	08004655 	.word	0x08004655
 8004548:	08004655 	.word	0x08004655
 800454c:	08004613 	.word	0x08004613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fa18 	bl	800498c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0208 	orr.w	r2, r2, #8
 800456a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0204 	bic.w	r2, r2, #4
 800457a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	619a      	str	r2, [r3, #24]
      break;
 800458e:	e064      	b.n	800465a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fa68 	bl	8004a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6999      	ldr	r1, [r3, #24]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
      break;
 80045d0:	e043      	b.n	800465a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fabd 	bl	8004b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0208 	orr.w	r2, r2, #8
 80045ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0204 	bic.w	r2, r2, #4
 80045fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69d9      	ldr	r1, [r3, #28]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	61da      	str	r2, [r3, #28]
      break;
 8004610:	e023      	b.n	800465a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fb11 	bl	8004c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69d9      	ldr	r1, [r3, #28]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	021a      	lsls	r2, r3, #8
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	61da      	str	r2, [r3, #28]
      break;
 8004652:	e002      	b.n	800465a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x1c>
 8004684:	2302      	movs	r3, #2
 8004686:	e0b4      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x186>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d03e      	beq.n	8004740 <HAL_TIM_ConfigClockSource+0xd4>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	f200 8087 	bhi.w	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	f000 8086 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x172>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d87f      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b70      	cmp	r3, #112	; 0x70
 80046da:	d01a      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0xa6>
 80046dc:	2b70      	cmp	r3, #112	; 0x70
 80046de:	d87b      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d050      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x11a>
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d877      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d03c      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xfa>
 80046ec:	2b50      	cmp	r3, #80	; 0x50
 80046ee:	d873      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d058      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0x13a>
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d86f      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d064      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d86b      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d060      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d867      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d05c      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b10      	cmp	r3, #16
 800470e:	d05a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004710:	e062      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f000 fb5d 	bl	8004de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	609a      	str	r2, [r3, #8]
      break;
 800473e:	e04f      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f000 fb46 	bl	8004de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004762:	609a      	str	r2, [r3, #8]
      break;
 8004764:	e03c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 faba 	bl	8004cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2150      	movs	r1, #80	; 0x50
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fb13 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004784:	e02c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	461a      	mov	r2, r3
 8004794:	f000 fad9 	bl	8004d4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2160      	movs	r1, #96	; 0x60
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fb03 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 80047a4:	e01c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f000 fa9a 	bl	8004cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 faf3 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 80047c4:	e00c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f000 faea 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 80047d6:	e003      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e000      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a40      	ldr	r2, [pc, #256]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3d      	ldr	r2, [pc, #244]	; (8004964 <TIM_Base_SetConfig+0x118>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3b      	ldr	r2, [pc, #236]	; (800496c <TIM_Base_SetConfig+0x120>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <TIM_Base_SetConfig+0x114>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d027      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0x118>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d023      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_Base_SetConfig+0x120>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_Base_SetConfig+0x124>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_Base_SetConfig+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <TIM_Base_SetConfig+0x12c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <TIM_Base_SetConfig+0x130>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a25      	ldr	r2, [pc, #148]	; (8004980 <TIM_Base_SetConfig+0x134>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_Base_SetConfig+0x138>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	; (8004988 <TIM_Base_SetConfig+0x13c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800
 8004980:	40001800 	.word	0x40001800
 8004984:	40001c00 	.word	0x40001c00
 8004988:	40002000 	.word	0x40002000

0800498c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <TIM_OC1_SetConfig+0xd8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC1_SetConfig+0x64>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <TIM_OC1_SetConfig+0xdc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10c      	bne.n	8004a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0308 	bic.w	r3, r3, #8
 80049f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <TIM_OC1_SetConfig+0xd8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC1_SetConfig+0x8e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <TIM_OC1_SetConfig+0xdc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d111      	bne.n	8004a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010400 	.word	0x40010400

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <TIM_OC2_SetConfig+0xe4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_OC2_SetConfig+0x68>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <TIM_OC2_SetConfig+0xe4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC2_SetConfig+0x94>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d113      	bne.n	8004b28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40010400 	.word	0x40010400

08004b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0303 	bic.w	r3, r3, #3
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <TIM_OC3_SetConfig+0xe0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_OC3_SetConfig+0x66>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <TIM_OC3_SetConfig+0xe4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10d      	bne.n	8004bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <TIM_OC3_SetConfig+0xe0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC3_SetConfig+0x92>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <TIM_OC3_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d113      	bne.n	8004c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40010400 	.word	0x40010400

08004c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	031b      	lsls	r3, r3, #12
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <TIM_OC4_SetConfig+0xa4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC4_SetConfig+0x68>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <TIM_OC4_SetConfig+0xa8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40010400 	.word	0x40010400

08004cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 030a 	bic.w	r3, r3, #10
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0210 	bic.w	r2, r3, #16
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f043 0307 	orr.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2201      	movs	r2, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	401a      	ands	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e05a      	b.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d01d      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10c      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40001800 	.word	0x40001800

08004f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <__NVIC_SetPriority>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	6039      	str	r1, [r7, #0]
 8004f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	db0a      	blt.n	8004fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <__NVIC_SetPriority+0x4c>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	0112      	lsls	r2, r2, #4
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	440b      	add	r3, r1
 8004fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fb4:	e00a      	b.n	8004fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4908      	ldr	r1, [pc, #32]	; (8004fdc <__NVIC_SetPriority+0x50>)
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	3b04      	subs	r3, #4
 8004fc4:	0112      	lsls	r2, r2, #4
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	440b      	add	r3, r1
 8004fca:	761a      	strb	r2, [r3, #24]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	e000e100 	.word	0xe000e100
 8004fdc:	e000ed00 	.word	0xe000ed00

08004fe0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <SysTick_Handler+0x1c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004fe8:	f001 fcfe 	bl	80069e8 <xTaskGetSchedulerState>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d001      	beq.n	8004ff6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ff2:	f002 fae9 	bl	80075c8 <xPortSysTickHandler>
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	e000e010 	.word	0xe000e010

08005000 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005004:	2100      	movs	r1, #0
 8005006:	f06f 0004 	mvn.w	r0, #4
 800500a:	f7ff ffbf 	bl	8004f8c <__NVIC_SetPriority>
#endif
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501a:	f3ef 8305 	mrs	r3, IPSR
 800501e:	603b      	str	r3, [r7, #0]
  return(result);
 8005020:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005026:	f06f 0305 	mvn.w	r3, #5
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	e00c      	b.n	8005048 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <osKernelInitialize+0x44>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <osKernelInitialize+0x44>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800503c:	2300      	movs	r3, #0
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	e002      	b.n	8005048 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005046:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005048:	687b      	ldr	r3, [r7, #4]
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000320 	.word	0x20000320

0800505c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005062:	f3ef 8305 	mrs	r3, IPSR
 8005066:	603b      	str	r3, [r7, #0]
  return(result);
 8005068:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <osKernelStart+0x1a>
    stat = osErrorISR;
 800506e:	f06f 0305 	mvn.w	r3, #5
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e010      	b.n	8005098 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <osKernelStart+0x48>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d109      	bne.n	8005092 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800507e:	f7ff ffbf 	bl	8005000 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <osKernelStart+0x48>)
 8005084:	2202      	movs	r2, #2
 8005086:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005088:	f001 f866 	bl	8006158 <vTaskStartScheduler>
      stat = osOK;
 800508c:	2300      	movs	r3, #0
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	e002      	b.n	8005098 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005096:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005098:	687b      	ldr	r3, [r7, #4]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000320 	.word	0x20000320

080050a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	; 0x38
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b8:	f3ef 8305 	mrs	r3, IPSR
 80050bc:	617b      	str	r3, [r7, #20]
  return(result);
 80050be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d17e      	bne.n	80051c2 <osThreadNew+0x11a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d07b      	beq.n	80051c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050ce:	2318      	movs	r3, #24
 80050d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d045      	beq.n	800516e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <osThreadNew+0x48>
        name = attr->name;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <osThreadNew+0x6e>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b38      	cmp	r3, #56	; 0x38
 8005108:	d805      	bhi.n	8005116 <osThreadNew+0x6e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <osThreadNew+0x72>
        return (NULL);
 8005116:	2300      	movs	r3, #0
 8005118:	e054      	b.n	80051c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00e      	beq.n	8005150 <osThreadNew+0xa8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b5b      	cmp	r3, #91	; 0x5b
 8005138:	d90a      	bls.n	8005150 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <osThreadNew+0xa8>
        mem = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	e010      	b.n	8005172 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10c      	bne.n	8005172 <osThreadNew+0xca>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <osThreadNew+0xca>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <osThreadNew+0xca>
          mem = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	e001      	b.n	8005172 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d110      	bne.n	800519a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005180:	9202      	str	r2, [sp, #8]
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fe0c 	bl	8005dac <xTaskCreateStatic>
 8005194:	4603      	mov	r3, r0
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	e013      	b.n	80051c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d110      	bne.n	80051c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	f107 0310 	add.w	r3, r7, #16
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fe57 	bl	8005e66 <xTaskCreate>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d001      	beq.n	80051c2 <osThreadNew+0x11a>
            hTask = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051c2:	693b      	ldr	r3, [r7, #16]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d4:	f3ef 8305 	mrs	r3, IPSR
 80051d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <osDelay+0x1c>
    stat = osErrorISR;
 80051e0:	f06f 0305 	mvn.w	r3, #5
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e007      	b.n	80051f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 ff7c 	bl	80060f0 <vTaskDelay>
    }
  }

  return (stat);
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <vApplicationGetIdleTaskMemory+0x2c>)
 8005214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <vApplicationGetIdleTaskMemory+0x30>)
 800521a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	601a      	str	r2, [r3, #0]
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000324 	.word	0x20000324
 8005234:	20000380 	.word	0x20000380

08005238 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <vApplicationGetTimerTaskMemory+0x2c>)
 8005248:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a06      	ldr	r2, [pc, #24]	; (8005268 <vApplicationGetTimerTaskMemory+0x30>)
 800524e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20000580 	.word	0x20000580
 8005268:	200005dc 	.word	0x200005dc

0800526c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f103 0208 	add.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f103 0208 	add.w	r2, r3, #8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f103 0208 	add.w	r2, r3, #8
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005324:	d103      	bne.n	800532e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e00c      	b.n	8005348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3308      	adds	r3, #8
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e002      	b.n	800533c <vListInsert+0x2e>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	d2f6      	bcs.n	8005336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6892      	ldr	r2, [r2, #8]
 8005396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6852      	ldr	r2, [r2, #4]
 80053a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d103      	bne.n	80053b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	1e5a      	subs	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053fe:	f002 f851 	bl	80074a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	3b01      	subs	r3, #1
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	441a      	add	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d114      	bne.n	800547e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01a      	beq.n	8005492 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3310      	adds	r3, #16
 8005460:	4618      	mov	r0, r3
 8005462:	f001 f903 	bl	800666c <xTaskRemoveFromEventList>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d012      	beq.n	8005492 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <xQueueGenericReset+0xcc>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	e009      	b.n	8005492 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3310      	adds	r3, #16
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff fef2 	bl	800526c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff feed 	bl	800526c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005492:	f002 f837 	bl	8007504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005496:	2301      	movs	r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	; 0x38
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <xQueueGenericCreateStatic+0x52>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <xQueueGenericCreateStatic+0x56>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueGenericCreateStatic+0x58>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	623b      	str	r3, [r7, #32]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xQueueGenericCreateStatic+0x7e>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <xQueueGenericCreateStatic+0x82>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <xQueueGenericCreateStatic+0x84>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61fb      	str	r3, [r7, #28]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005542:	2350      	movs	r3, #80	; 0x50
 8005544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b50      	cmp	r3, #80	; 0x50
 800554a:	d00a      	beq.n	8005562 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61bb      	str	r3, [r7, #24]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005562:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4613      	mov	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f805 	bl	8005594 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800558c:	4618      	mov	r0, r3
 800558e:	3730      	adds	r7, #48	; 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055c2:	2101      	movs	r1, #1
 80055c4:	69b8      	ldr	r0, [r7, #24]
 80055c6:	f7ff ff05 	bl	80053d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08e      	sub	sp, #56	; 0x38
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055ea:	2300      	movs	r3, #0
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xQueueGenericSend+0x32>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <xQueueGenericSend+0x40>
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <xQueueGenericSend+0x44>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <xQueueGenericSend+0x46>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <xQueueGenericSend+0x60>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d103      	bne.n	800564a <xQueueGenericSend+0x6e>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <xQueueGenericSend+0x72>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xQueueGenericSend+0x74>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xQueueGenericSend+0x8e>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	623b      	str	r3, [r7, #32]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800566a:	f001 f9bd 	bl	80069e8 <xTaskGetSchedulerState>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xQueueGenericSend+0x9e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueGenericSend+0xa2>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueGenericSend+0xa4>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueGenericSend+0xbe>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61fb      	str	r3, [r7, #28]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800569a:	f001 ff03 	bl	80074a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <xQueueGenericSend+0xd4>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d129      	bne.n	8005704 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056b6:	f000 fa0b 	bl	8005ad0 <prvCopyDataToQueue>
 80056ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d010      	beq.n	80056e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	3324      	adds	r3, #36	; 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 ffcf 	bl	800666c <xTaskRemoveFromEventList>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d013      	beq.n	80056fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056d4:	4b3f      	ldr	r3, [pc, #252]	; (80057d4 <xQueueGenericSend+0x1f8>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	e00a      	b.n	80056fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056ec:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <xQueueGenericSend+0x1f8>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056fc:	f001 ff02 	bl	8007504 <vPortExitCritical>
				return pdPASS;
 8005700:	2301      	movs	r3, #1
 8005702:	e063      	b.n	80057cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800570a:	f001 fefb 	bl	8007504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800570e:	2300      	movs	r3, #0
 8005710:	e05c      	b.n	80057cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005718:	f107 0314 	add.w	r3, r7, #20
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f809 	bl	8006734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005722:	2301      	movs	r3, #1
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005726:	f001 feed 	bl	8007504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800572a:	f000 fd7b 	bl	8006224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800572e:	f001 feb9 	bl	80074a4 <vPortEnterCritical>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005738:	b25b      	sxtb	r3, r3
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573e:	d103      	bne.n	8005748 <xQueueGenericSend+0x16c>
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800574e:	b25b      	sxtb	r3, r3
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005754:	d103      	bne.n	800575e <xQueueGenericSend+0x182>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800575e:	f001 fed1 	bl	8007504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005762:	1d3a      	adds	r2, r7, #4
 8005764:	f107 0314 	add.w	r3, r7, #20
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fff8 	bl	8006760 <xTaskCheckForTimeOut>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d124      	bne.n	80057c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005778:	f000 faa2 	bl	8005cc0 <prvIsQueueFull>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d018      	beq.n	80057b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	3310      	adds	r3, #16
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f000 ff1e 	bl	80065cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005792:	f000 fa2d 	bl	8005bf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005796:	f000 fd53 	bl	8006240 <xTaskResumeAll>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f af7c 	bne.w	800569a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <xQueueGenericSend+0x1f8>)
 80057a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	e772      	b.n	800569a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b6:	f000 fa1b 	bl	8005bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ba:	f000 fd41 	bl	8006240 <xTaskResumeAll>
 80057be:	e76c      	b.n	800569a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c2:	f000 fa15 	bl	8005bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057c6:	f000 fd3b 	bl	8006240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3738      	adds	r7, #56	; 0x38
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	e000ed04 	.word	0xe000ed04

080057d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b090      	sub	sp, #64	; 0x40
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <xQueueGenericSendFromISR+0x3c>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <xQueueGenericSendFromISR+0x40>
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <xQueueGenericSendFromISR+0x42>
 8005818:	2300      	movs	r3, #0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005830:	bf00      	nop
 8005832:	e7fe      	b.n	8005832 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d103      	bne.n	8005842 <xQueueGenericSendFromISR+0x6a>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <xQueueGenericSendFromISR+0x6e>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <xQueueGenericSendFromISR+0x70>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	623b      	str	r3, [r7, #32]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005862:	f001 ff01 	bl	8007668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005866:	f3ef 8211 	mrs	r2, BASEPRI
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	61fa      	str	r2, [r7, #28]
 800587c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800587e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <xQueueGenericSendFromISR+0xbc>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d12f      	bne.n	80058f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058aa:	f000 f911 	bl	8005ad0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b6:	d112      	bne.n	80058de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	3324      	adds	r3, #36	; 0x24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fed1 	bl	800666c <xTaskRemoveFromEventList>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00e      	beq.n	80058ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e007      	b.n	80058ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	b25a      	sxtb	r2, r3
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058ee:	2301      	movs	r3, #1
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80058f2:	e001      	b.n	80058f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005902:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005906:	4618      	mov	r0, r3
 8005908:	3740      	adds	r7, #64	; 0x40
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	; 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800591c:	2300      	movs	r3, #0
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <xQueueReceive+0x30>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	623b      	str	r3, [r7, #32]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <xQueueReceive+0x3e>
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <xQueueReceive+0x42>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueReceive+0x44>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueReceive+0x5e>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	61fb      	str	r3, [r7, #28]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596e:	f001 f83b 	bl	80069e8 <xTaskGetSchedulerState>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <xQueueReceive+0x6e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueReceive+0x72>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueReceive+0x74>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueReceive+0x8e>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61bb      	str	r3, [r7, #24]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f001 fd81 	bl	80074a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01f      	beq.n	80059ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b2:	f000 f8f7 	bl	8005ba4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00f      	beq.n	80059e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	3310      	adds	r3, #16
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fe4e 	bl	800666c <xTaskRemoveFromEventList>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059d6:	4b3d      	ldr	r3, [pc, #244]	; (8005acc <xQueueReceive+0x1bc>)
 80059d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059e6:	f001 fd8d 	bl	8007504 <vPortExitCritical>
				return pdPASS;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e069      	b.n	8005ac2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059f4:	f001 fd86 	bl	8007504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e062      	b.n	8005ac2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a02:	f107 0310 	add.w	r3, r7, #16
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fe94 	bl	8006734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a10:	f001 fd78 	bl	8007504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a14:	f000 fc06 	bl	8006224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a18:	f001 fd44 	bl	80074a4 <vPortEnterCritical>
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a28:	d103      	bne.n	8005a32 <xQueueReceive+0x122>
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3e:	d103      	bne.n	8005a48 <xQueueReceive+0x138>
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a48:	f001 fd5c 	bl	8007504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a4c:	1d3a      	adds	r2, r7, #4
 8005a4e:	f107 0310 	add.w	r3, r7, #16
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fe83 	bl	8006760 <xTaskCheckForTimeOut>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d123      	bne.n	8005aa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a62:	f000 f917 	bl	8005c94 <prvIsQueueEmpty>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d017      	beq.n	8005a9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4611      	mov	r1, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fda9 	bl	80065cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7c:	f000 f8b8 	bl	8005bf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a80:	f000 fbde 	bl	8006240 <xTaskResumeAll>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d189      	bne.n	800599e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a8a:	4b10      	ldr	r3, [pc, #64]	; (8005acc <xQueueReceive+0x1bc>)
 8005a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	e780      	b.n	800599e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9e:	f000 f8a7 	bl	8005bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aa2:	f000 fbcd 	bl	8006240 <xTaskResumeAll>
 8005aa6:	e77a      	b.n	800599e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aaa:	f000 f8a1 	bl	8005bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aae:	f000 fbc7 	bl	8006240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab4:	f000 f8ee 	bl	8005c94 <prvIsQueueEmpty>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f43f af6f 	beq.w	800599e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3730      	adds	r7, #48	; 0x30
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10d      	bne.n	8005b0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d14d      	bne.n	8005b92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ff92 	bl	8006a24 <xTaskPriorityDisinherit>
 8005b00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	e043      	b.n	8005b92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d119      	bne.n	8005b44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6858      	ldr	r0, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	f001 fff2 	bl	8007b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d32b      	bcc.n	8005b92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	e026      	b.n	8005b92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68d8      	ldr	r0, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	f001 ffd8 	bl	8007b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	441a      	add	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d207      	bcs.n	8005b80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	425b      	negs	r3, r3
 8005b7a:	441a      	add	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d105      	bne.n	8005b92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b9a:	697b      	ldr	r3, [r7, #20]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d018      	beq.n	8005be8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	441a      	add	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d303      	bcc.n	8005bd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68d9      	ldr	r1, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	461a      	mov	r2, r3
 8005be2:	6838      	ldr	r0, [r7, #0]
 8005be4:	f001 ff8e 	bl	8007b04 <memcpy>
	}
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bf8:	f001 fc54 	bl	80074a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c04:	e011      	b.n	8005c2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d012      	beq.n	8005c34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3324      	adds	r3, #36	; 0x24
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fd2a 	bl	800666c <xTaskRemoveFromEventList>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c1e:	f000 fe01 	bl	8006824 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	dce9      	bgt.n	8005c06 <prvUnlockQueue+0x16>
 8005c32:	e000      	b.n	8005c36 <prvUnlockQueue+0x46>
					break;
 8005c34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c3e:	f001 fc61 	bl	8007504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c42:	f001 fc2f 	bl	80074a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4e:	e011      	b.n	8005c74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d012      	beq.n	8005c7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fd05 	bl	800666c <xTaskRemoveFromEventList>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c68:	f000 fddc 	bl	8006824 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dce9      	bgt.n	8005c50 <prvUnlockQueue+0x60>
 8005c7c:	e000      	b.n	8005c80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c88:	f001 fc3c 	bl	8007504 <vPortExitCritical>
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c9c:	f001 fc02 	bl	80074a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e001      	b.n	8005cb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb2:	f001 fc27 	bl	8007504 <vPortExitCritical>

	return xReturn;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc8:	f001 fbec 	bl	80074a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d102      	bne.n	8005cde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e001      	b.n	8005ce2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ce2:	f001 fc0f 	bl	8007504 <vPortExitCritical>

	return xReturn;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e014      	b.n	8005d2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d00:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <vQueueAddToRegistry+0x50>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <vQueueAddToRegistry+0x50>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <vQueueAddToRegistry+0x50>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d22:	e006      	b.n	8005d32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b07      	cmp	r3, #7
 8005d2e:	d9e7      	bls.n	8005d00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	200009dc 	.word	0x200009dc

08005d44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d54:	f001 fba6 	bl	80074a4 <vPortEnterCritical>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d5e:	b25b      	sxtb	r3, r3
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d64:	d103      	bne.n	8005d6e <vQueueWaitForMessageRestricted+0x2a>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d74:	b25b      	sxtb	r3, r3
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d7a:	d103      	bne.n	8005d84 <vQueueWaitForMessageRestricted+0x40>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d84:	f001 fbbe 	bl	8007504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fc3b 	bl	8006614 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d9e:	6978      	ldr	r0, [r7, #20]
 8005da0:	f7ff ff26 	bl	8005bf0 <prvUnlockQueue>
	}
 8005da4:	bf00      	nop
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08e      	sub	sp, #56	; 0x38
 8005db0:	af04      	add	r7, sp, #16
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	623b      	str	r3, [r7, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61fb      	str	r3, [r7, #28]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005df2:	235c      	movs	r3, #92	; 0x5c
 8005df4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b5c      	cmp	r3, #92	; 0x5c
 8005dfa:	d00a      	beq.n	8005e12 <xTaskCreateStatic+0x66>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	61bb      	str	r3, [r7, #24]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01e      	beq.n	8005e58 <xTaskCreateStatic+0xac>
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e32:	2300      	movs	r3, #0
 8005e34:	9303      	str	r3, [sp, #12]
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	f107 0314 	add.w	r3, r7, #20
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f850 	bl	8005ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e52:	f000 f8dd 	bl	8006010 <prvAddNewTaskToReadyList>
 8005e56:	e001      	b.n	8005e5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e5c:	697b      	ldr	r3, [r7, #20]
	}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b08c      	sub	sp, #48	; 0x30
 8005e6a:	af04      	add	r7, sp, #16
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 fc34 	bl	80076e8 <pvPortMalloc>
 8005e80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00e      	beq.n	8005ea6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e88:	205c      	movs	r0, #92	; 0x5c
 8005e8a:	f001 fc2d 	bl	80076e8 <pvPortMalloc>
 8005e8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e9c:	e005      	b.n	8005eaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e9e:	6978      	ldr	r0, [r7, #20]
 8005ea0:	f001 fcee 	bl	8007880 <vPortFree>
 8005ea4:	e001      	b.n	8005eaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d017      	beq.n	8005ee0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f80e 	bl	8005ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ed4:	69f8      	ldr	r0, [r7, #28]
 8005ed6:	f000 f89b 	bl	8006010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eda:	2301      	movs	r3, #1
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	e002      	b.n	8005ee6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	461a      	mov	r2, r3
 8005f08:	21a5      	movs	r1, #165	; 0xa5
 8005f0a:	f001 fe09 	bl	8007b20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	617b      	str	r3, [r7, #20]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01f      	beq.n	8005f8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	e012      	b.n	8005f7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	3334      	adds	r3, #52	; 0x34
 8005f64:	460a      	mov	r2, r1
 8005f66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b0f      	cmp	r3, #15
 8005f7e:	d9e9      	bls.n	8005f54 <prvInitialiseNewTask+0x64>
 8005f80:	e000      	b.n	8005f84 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f8c:	e003      	b.n	8005f96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	2b37      	cmp	r3, #55	; 0x37
 8005f9a:	d901      	bls.n	8005fa0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f9c:	2337      	movs	r3, #55	; 0x37
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005faa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	2200      	movs	r2, #0
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff f978 	bl	80052ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff f973 	bl	80052ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68f9      	ldr	r1, [r7, #12]
 8005fee:	69b8      	ldr	r0, [r7, #24]
 8005ff0:	f001 f928 	bl	8007244 <pxPortInitialiseStack>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006006:	bf00      	nop
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006018:	f001 fa44 	bl	80074a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800601c:	4b2d      	ldr	r3, [pc, #180]	; (80060d4 <prvAddNewTaskToReadyList+0xc4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	4a2c      	ldr	r2, [pc, #176]	; (80060d4 <prvAddNewTaskToReadyList+0xc4>)
 8006024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006026:	4b2c      	ldr	r3, [pc, #176]	; (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006034:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <prvAddNewTaskToReadyList+0xc4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d110      	bne.n	800605e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800603c:	f000 fc16 	bl	800686c <prvInitialiseTaskLists>
 8006040:	e00d      	b.n	800605e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <prvAddNewTaskToReadyList+0xcc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800604a:	4b23      	ldr	r3, [pc, #140]	; (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d802      	bhi.n	800605e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006058:	4a1f      	ldr	r2, [pc, #124]	; (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <prvAddNewTaskToReadyList+0xd0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <prvAddNewTaskToReadyList+0xd0>)
 8006066:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006068:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <prvAddNewTaskToReadyList+0xd0>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <prvAddNewTaskToReadyList+0xd4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d903      	bls.n	8006084 <prvAddNewTaskToReadyList+0x74>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <prvAddNewTaskToReadyList+0xd4>)
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <prvAddNewTaskToReadyList+0xd8>)
 8006092:	441a      	add	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7ff f913 	bl	80052c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060a0:	f001 fa30 	bl	8007504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <prvAddNewTaskToReadyList+0xcc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00e      	beq.n	80060ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <prvAddNewTaskToReadyList+0xc8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d207      	bcs.n	80060ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <prvAddNewTaskToReadyList+0xdc>)
 80060bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000ef0 	.word	0x20000ef0
 80060d8:	20000a1c 	.word	0x20000a1c
 80060dc:	20000efc 	.word	0x20000efc
 80060e0:	20000f0c 	.word	0x20000f0c
 80060e4:	20000ef8 	.word	0x20000ef8
 80060e8:	20000a20 	.word	0x20000a20
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006102:	4b13      	ldr	r3, [pc, #76]	; (8006150 <vTaskDelay+0x60>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <vTaskDelay+0x30>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	60bb      	str	r3, [r7, #8]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006120:	f000 f880 	bl	8006224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006124:	2100      	movs	r1, #0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fcea 	bl	8006b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800612c:	f000 f888 	bl	8006240 <xTaskResumeAll>
 8006130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d107      	bne.n	8006148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <vTaskDelay+0x64>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000f18 	.word	0x20000f18
 8006154:	e000ed04 	.word	0xe000ed04

08006158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006166:	463a      	mov	r2, r7
 8006168:	1d39      	adds	r1, r7, #4
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff f848 	bl	8005204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	9202      	str	r2, [sp, #8]
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	2300      	movs	r3, #0
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	2300      	movs	r3, #0
 8006184:	460a      	mov	r2, r1
 8006186:	4921      	ldr	r1, [pc, #132]	; (800620c <vTaskStartScheduler+0xb4>)
 8006188:	4821      	ldr	r0, [pc, #132]	; (8006210 <vTaskStartScheduler+0xb8>)
 800618a:	f7ff fe0f 	bl	8005dac <xTaskCreateStatic>
 800618e:	4603      	mov	r3, r0
 8006190:	4a20      	ldr	r2, [pc, #128]	; (8006214 <vTaskStartScheduler+0xbc>)
 8006192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006194:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <vTaskStartScheduler+0xbc>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800619c:	2301      	movs	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e001      	b.n	80061a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d102      	bne.n	80061b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061ac:	f000 fcfc 	bl	8006ba8 <xTimerCreateTimerTask>
 80061b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d116      	bne.n	80061e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	613b      	str	r3, [r7, #16]
}
 80061ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <vTaskStartScheduler+0xc0>)
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <vTaskStartScheduler+0xc4>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <vTaskStartScheduler+0xc8>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061e0:	f001 f8be 	bl	8007360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061e4:	e00e      	b.n	8006204 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ec:	d10a      	bne.n	8006204 <vTaskStartScheduler+0xac>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60fb      	str	r3, [r7, #12]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <vTaskStartScheduler+0xaa>
}
 8006204:	bf00      	nop
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	08007b60 	.word	0x08007b60
 8006210:	0800683d 	.word	0x0800683d
 8006214:	20000f14 	.word	0x20000f14
 8006218:	20000f10 	.word	0x20000f10
 800621c:	20000efc 	.word	0x20000efc
 8006220:	20000ef4 	.word	0x20000ef4

08006224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <vTaskSuspendAll+0x18>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	4a03      	ldr	r2, [pc, #12]	; (800623c <vTaskSuspendAll+0x18>)
 8006230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000f18 	.word	0x20000f18

08006240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800624e:	4b42      	ldr	r3, [pc, #264]	; (8006358 <xTaskResumeAll+0x118>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <xTaskResumeAll+0x2c>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	603b      	str	r3, [r7, #0]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800626c:	f001 f91a 	bl	80074a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006270:	4b39      	ldr	r3, [pc, #228]	; (8006358 <xTaskResumeAll+0x118>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3b01      	subs	r3, #1
 8006276:	4a38      	ldr	r2, [pc, #224]	; (8006358 <xTaskResumeAll+0x118>)
 8006278:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <xTaskResumeAll+0x118>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d162      	bne.n	8006348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006282:	4b36      	ldr	r3, [pc, #216]	; (800635c <xTaskResumeAll+0x11c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d05e      	beq.n	8006348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800628a:	e02f      	b.n	80062ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628c:	4b34      	ldr	r3, [pc, #208]	; (8006360 <xTaskResumeAll+0x120>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3318      	adds	r3, #24
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff f871 	bl	8005380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff f86c 	bl	8005380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <xTaskResumeAll+0x124>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d903      	bls.n	80062bc <xTaskResumeAll+0x7c>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <xTaskResumeAll+0x124>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4a27      	ldr	r2, [pc, #156]	; (8006368 <xTaskResumeAll+0x128>)
 80062ca:	441a      	add	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7fe fff7 	bl	80052c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	4b23      	ldr	r3, [pc, #140]	; (800636c <xTaskResumeAll+0x12c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <xTaskResumeAll+0x130>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <xTaskResumeAll+0x120>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1cb      	bne.n	800628c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062fa:	f000 fb55 	bl	80069a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <xTaskResumeAll+0x134>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800630a:	f000 f847 	bl	800639c <xTaskIncrementTick>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006314:	4b16      	ldr	r3, [pc, #88]	; (8006370 <xTaskResumeAll+0x130>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f1      	bne.n	800630a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <xTaskResumeAll+0x134>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800632c:	4b10      	ldr	r3, [pc, #64]	; (8006370 <xTaskResumeAll+0x130>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <xTaskResumeAll+0x138>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006348:	f001 f8dc 	bl	8007504 <vPortExitCritical>

	return xAlreadyYielded;
 800634c:	68bb      	ldr	r3, [r7, #8]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000f18 	.word	0x20000f18
 800635c:	20000ef0 	.word	0x20000ef0
 8006360:	20000eb0 	.word	0x20000eb0
 8006364:	20000ef8 	.word	0x20000ef8
 8006368:	20000a20 	.word	0x20000a20
 800636c:	20000a1c 	.word	0x20000a1c
 8006370:	20000f04 	.word	0x20000f04
 8006374:	20000f00 	.word	0x20000f00
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <xTaskGetTickCount+0x1c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006388:	687b      	ldr	r3, [r7, #4]
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000ef4 	.word	0x20000ef4

0800639c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a6:	4b4f      	ldr	r3, [pc, #316]	; (80064e4 <xTaskIncrementTick+0x148>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f040 808f 	bne.w	80064ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063b0:	4b4d      	ldr	r3, [pc, #308]	; (80064e8 <xTaskIncrementTick+0x14c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b8:	4a4b      	ldr	r2, [pc, #300]	; (80064e8 <xTaskIncrementTick+0x14c>)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d120      	bne.n	8006406 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063c4:	4b49      	ldr	r3, [pc, #292]	; (80064ec <xTaskIncrementTick+0x150>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	603b      	str	r3, [r7, #0]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xTaskIncrementTick+0x46>
 80063e4:	4b41      	ldr	r3, [pc, #260]	; (80064ec <xTaskIncrementTick+0x150>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	4b41      	ldr	r3, [pc, #260]	; (80064f0 <xTaskIncrementTick+0x154>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a3f      	ldr	r2, [pc, #252]	; (80064ec <xTaskIncrementTick+0x150>)
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	4a3f      	ldr	r2, [pc, #252]	; (80064f0 <xTaskIncrementTick+0x154>)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	4b3e      	ldr	r3, [pc, #248]	; (80064f4 <xTaskIncrementTick+0x158>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a3d      	ldr	r2, [pc, #244]	; (80064f4 <xTaskIncrementTick+0x158>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	f000 fad1 	bl	80069a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006406:	4b3c      	ldr	r3, [pc, #240]	; (80064f8 <xTaskIncrementTick+0x15c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	429a      	cmp	r2, r3
 800640e:	d349      	bcc.n	80064a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006410:	4b36      	ldr	r3, [pc, #216]	; (80064ec <xTaskIncrementTick+0x150>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641a:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <xTaskIncrementTick+0x15c>)
 800641c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006420:	601a      	str	r2, [r3, #0]
					break;
 8006422:	e03f      	b.n	80064a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006424:	4b31      	ldr	r3, [pc, #196]	; (80064ec <xTaskIncrementTick+0x150>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d203      	bcs.n	8006444 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800643c:	4a2e      	ldr	r2, [pc, #184]	; (80064f8 <xTaskIncrementTick+0x15c>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006442:	e02f      	b.n	80064a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	3304      	adds	r3, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe ff99 	bl	8005380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	3318      	adds	r3, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe ff90 	bl	8005380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006464:	4b25      	ldr	r3, [pc, #148]	; (80064fc <xTaskIncrementTick+0x160>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d903      	bls.n	8006474 <xTaskIncrementTick+0xd8>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4a22      	ldr	r2, [pc, #136]	; (80064fc <xTaskIncrementTick+0x160>)
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <xTaskIncrementTick+0x164>)
 8006482:	441a      	add	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7fe ff1b 	bl	80052c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <xTaskIncrementTick+0x168>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	429a      	cmp	r2, r3
 800649c:	d3b8      	bcc.n	8006410 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a2:	e7b5      	b.n	8006410 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064a4:	4b17      	ldr	r3, [pc, #92]	; (8006504 <xTaskIncrementTick+0x168>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	4915      	ldr	r1, [pc, #84]	; (8006500 <xTaskIncrementTick+0x164>)
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d901      	bls.n	80064c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <xTaskIncrementTick+0x16c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064c8:	2301      	movs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e004      	b.n	80064d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064ce:	4b0f      	ldr	r3, [pc, #60]	; (800650c <xTaskIncrementTick+0x170>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a0d      	ldr	r2, [pc, #52]	; (800650c <xTaskIncrementTick+0x170>)
 80064d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064d8:	697b      	ldr	r3, [r7, #20]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000f18 	.word	0x20000f18
 80064e8:	20000ef4 	.word	0x20000ef4
 80064ec:	20000ea8 	.word	0x20000ea8
 80064f0:	20000eac 	.word	0x20000eac
 80064f4:	20000f08 	.word	0x20000f08
 80064f8:	20000f10 	.word	0x20000f10
 80064fc:	20000ef8 	.word	0x20000ef8
 8006500:	20000a20 	.word	0x20000a20
 8006504:	20000a1c 	.word	0x20000a1c
 8006508:	20000f04 	.word	0x20000f04
 800650c:	20000f00 	.word	0x20000f00

08006510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006516:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <vTaskSwitchContext+0xa8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <vTaskSwitchContext+0xac>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006524:	e041      	b.n	80065aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006526:	4b25      	ldr	r3, [pc, #148]	; (80065bc <vTaskSwitchContext+0xac>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652c:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <vTaskSwitchContext+0xb0>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e010      	b.n	8006556 <vTaskSwitchContext+0x46>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <vTaskSwitchContext+0x40>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	607b      	str	r3, [r7, #4]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <vTaskSwitchContext+0x3e>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3b01      	subs	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	491b      	ldr	r1, [pc, #108]	; (80065c4 <vTaskSwitchContext+0xb4>)
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0e4      	beq.n	8006534 <vTaskSwitchContext+0x24>
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <vTaskSwitchContext+0xb4>)
 8006576:	4413      	add	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3308      	adds	r3, #8
 800658c:	429a      	cmp	r2, r3
 800658e:	d104      	bne.n	800659a <vTaskSwitchContext+0x8a>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <vTaskSwitchContext+0xb8>)
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	4a06      	ldr	r2, [pc, #24]	; (80065c0 <vTaskSwitchContext+0xb0>)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6013      	str	r3, [r2, #0]
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000f18 	.word	0x20000f18
 80065bc:	20000f04 	.word	0x20000f04
 80065c0:	20000ef8 	.word	0x20000ef8
 80065c4:	20000a20 	.word	0x20000a20
 80065c8:	20000a1c 	.word	0x20000a1c

080065cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60fb      	str	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <vTaskPlaceOnEventList+0x44>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3318      	adds	r3, #24
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe fe87 	bl	800530e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006600:	2101      	movs	r1, #1
 8006602:	6838      	ldr	r0, [r7, #0]
 8006604:	f000 fa7c 	bl	8006b00 <prvAddCurrentTaskToDelayedList>
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000a1c 	.word	0x20000a1c

08006614 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	617b      	str	r3, [r7, #20]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <vTaskPlaceOnEventListRestricted+0x54>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3318      	adds	r3, #24
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7fe fe3e 	bl	80052c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006654:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	68b8      	ldr	r0, [r7, #8]
 800665a:	f000 fa51 	bl	8006b00 <prvAddCurrentTaskToDelayedList>
	}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000a1c 	.word	0x20000a1c

0800666c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3318      	adds	r3, #24
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe fe6f 	bl	8005380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <xTaskRemoveFromEventList+0xb0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11d      	bne.n	80066e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fe66 	bl	8005380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4b19      	ldr	r3, [pc, #100]	; (8006720 <xTaskRemoveFromEventList+0xb4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d903      	bls.n	80066c8 <xTaskRemoveFromEventList+0x5c>
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <xTaskRemoveFromEventList+0xb4>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a13      	ldr	r2, [pc, #76]	; (8006724 <xTaskRemoveFromEventList+0xb8>)
 80066d6:	441a      	add	r2, r3
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7fe fdf1 	bl	80052c6 <vListInsertEnd>
 80066e4:	e005      	b.n	80066f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3318      	adds	r3, #24
 80066ea:	4619      	mov	r1, r3
 80066ec:	480e      	ldr	r0, [pc, #56]	; (8006728 <xTaskRemoveFromEventList+0xbc>)
 80066ee:	f7fe fdea 	bl	80052c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <xTaskRemoveFromEventList+0xc0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d905      	bls.n	800670c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <xTaskRemoveFromEventList+0xc4>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	e001      	b.n	8006710 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006710:	697b      	ldr	r3, [r7, #20]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000f18 	.word	0x20000f18
 8006720:	20000ef8 	.word	0x20000ef8
 8006724:	20000a20 	.word	0x20000a20
 8006728:	20000eb0 	.word	0x20000eb0
 800672c:	20000a1c 	.word	0x20000a1c
 8006730:	20000f04 	.word	0x20000f04

08006734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <vTaskInternalSetTimeOutState+0x24>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <vTaskInternalSetTimeOutState+0x28>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	605a      	str	r2, [r3, #4]
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	20000f08 	.word	0x20000f08
 800675c:	20000ef4 	.word	0x20000ef4

08006760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	60fb      	str	r3, [r7, #12]
}
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067a2:	f000 fe7f 	bl	80074a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067a6:	4b1d      	ldr	r3, [pc, #116]	; (800681c <xTaskCheckForTimeOut+0xbc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067be:	d102      	bne.n	80067c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e023      	b.n	800680e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <xTaskCheckForTimeOut+0xc0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d007      	beq.n	80067e2 <xTaskCheckForTimeOut+0x82>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	e015      	b.n	800680e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d20b      	bcs.n	8006804 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff9b 	bl	8006734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	e004      	b.n	800680e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800680e:	f000 fe79 	bl	8007504 <vPortExitCritical>

	return xReturn;
 8006812:	69fb      	ldr	r3, [r7, #28]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000ef4 	.word	0x20000ef4
 8006820:	20000f08 	.word	0x20000f08

08006824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006828:	4b03      	ldr	r3, [pc, #12]	; (8006838 <vTaskMissedYield+0x14>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]
}
 800682e:	bf00      	nop
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20000f04 	.word	0x20000f04

0800683c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006844:	f000 f852 	bl	80068ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <prvIdleTask+0x28>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d9f9      	bls.n	8006844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <prvIdleTask+0x2c>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006860:	e7f0      	b.n	8006844 <prvIdleTask+0x8>
 8006862:	bf00      	nop
 8006864:	20000a20 	.word	0x20000a20
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
 8006876:	e00c      	b.n	8006892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4a12      	ldr	r2, [pc, #72]	; (80068cc <prvInitialiseTaskLists+0x60>)
 8006884:	4413      	add	r3, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fcf0 	bl	800526c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3301      	adds	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b37      	cmp	r3, #55	; 0x37
 8006896:	d9ef      	bls.n	8006878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006898:	480d      	ldr	r0, [pc, #52]	; (80068d0 <prvInitialiseTaskLists+0x64>)
 800689a:	f7fe fce7 	bl	800526c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800689e:	480d      	ldr	r0, [pc, #52]	; (80068d4 <prvInitialiseTaskLists+0x68>)
 80068a0:	f7fe fce4 	bl	800526c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068a4:	480c      	ldr	r0, [pc, #48]	; (80068d8 <prvInitialiseTaskLists+0x6c>)
 80068a6:	f7fe fce1 	bl	800526c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068aa:	480c      	ldr	r0, [pc, #48]	; (80068dc <prvInitialiseTaskLists+0x70>)
 80068ac:	f7fe fcde 	bl	800526c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068b0:	480b      	ldr	r0, [pc, #44]	; (80068e0 <prvInitialiseTaskLists+0x74>)
 80068b2:	f7fe fcdb 	bl	800526c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <prvInitialiseTaskLists+0x78>)
 80068b8:	4a05      	ldr	r2, [pc, #20]	; (80068d0 <prvInitialiseTaskLists+0x64>)
 80068ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <prvInitialiseTaskLists+0x7c>)
 80068be:	4a05      	ldr	r2, [pc, #20]	; (80068d4 <prvInitialiseTaskLists+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000a20 	.word	0x20000a20
 80068d0:	20000e80 	.word	0x20000e80
 80068d4:	20000e94 	.word	0x20000e94
 80068d8:	20000eb0 	.word	0x20000eb0
 80068dc:	20000ec4 	.word	0x20000ec4
 80068e0:	20000edc 	.word	0x20000edc
 80068e4:	20000ea8 	.word	0x20000ea8
 80068e8:	20000eac 	.word	0x20000eac

080068ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068f2:	e019      	b.n	8006928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068f4:	f000 fdd6 	bl	80074a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f8:	4b10      	ldr	r3, [pc, #64]	; (800693c <prvCheckTasksWaitingTermination+0x50>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe fd3b 	bl	8005380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <prvCheckTasksWaitingTermination+0x54>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3b01      	subs	r3, #1
 8006910:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <prvCheckTasksWaitingTermination+0x54>)
 8006912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <prvCheckTasksWaitingTermination+0x58>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3b01      	subs	r3, #1
 800691a:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <prvCheckTasksWaitingTermination+0x58>)
 800691c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800691e:	f000 fdf1 	bl	8007504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f810 	bl	8006948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <prvCheckTasksWaitingTermination+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e1      	bne.n	80068f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000ec4 	.word	0x20000ec4
 8006940:	20000ef0 	.word	0x20000ef0
 8006944:	20000ed8 	.word	0x20000ed8

08006948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006956:	2b00      	cmp	r3, #0
 8006958:	d108      	bne.n	800696c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	4618      	mov	r0, r3
 8006960:	f000 ff8e 	bl	8007880 <vPortFree>
				vPortFree( pxTCB );
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 ff8b 	bl	8007880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800696a:	e018      	b.n	800699e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006972:	2b01      	cmp	r3, #1
 8006974:	d103      	bne.n	800697e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 ff82 	bl	8007880 <vPortFree>
	}
 800697c:	e00f      	b.n	800699e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006984:	2b02      	cmp	r3, #2
 8006986:	d00a      	beq.n	800699e <prvDeleteTCB+0x56>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <prvDeleteTCB+0x54>
	}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ae:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <prvResetNextTaskUnblockTime+0x38>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d104      	bne.n	80069c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <prvResetNextTaskUnblockTime+0x3c>)
 80069ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069c0:	e008      	b.n	80069d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <prvResetNextTaskUnblockTime+0x38>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <prvResetNextTaskUnblockTime+0x3c>)
 80069d2:	6013      	str	r3, [r2, #0]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000ea8 	.word	0x20000ea8
 80069e4:	20000f10 	.word	0x20000f10

080069e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <xTaskGetSchedulerState+0x34>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069f6:	2301      	movs	r3, #1
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	e008      	b.n	8006a0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069fc:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <xTaskGetSchedulerState+0x38>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a04:	2302      	movs	r3, #2
 8006a06:	607b      	str	r3, [r7, #4]
 8006a08:	e001      	b.n	8006a0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a0e:	687b      	ldr	r3, [r7, #4]
	}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000efc 	.word	0x20000efc
 8006a20:	20000f18 	.word	0x20000f18

08006a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d056      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <xTaskPriorityDisinherit+0xd0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d00a      	beq.n	8006a5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	60fb      	str	r3, [r7, #12]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7c:	1e5a      	subs	r2, r3, #1
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d02c      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d128      	bne.n	8006ae8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fc70 	bl	8005380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <xTaskPriorityDisinherit+0xd4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <xTaskPriorityDisinherit+0xa4>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <xTaskPriorityDisinherit+0xd4>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a09      	ldr	r2, [pc, #36]	; (8006afc <xTaskPriorityDisinherit+0xd8>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe fbf1 	bl	80052c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ae8:	697b      	ldr	r3, [r7, #20]
	}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000a1c 	.word	0x20000a1c
 8006af8:	20000ef8 	.word	0x20000ef8
 8006afc:	20000a20 	.word	0x20000a20

08006b00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b0a:	4b21      	ldr	r3, [pc, #132]	; (8006b90 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b10:	4b20      	ldr	r3, [pc, #128]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fc32 	bl	8005380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b22:	d10a      	bne.n	8006b3a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4819      	ldr	r0, [pc, #100]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b34:	f7fe fbc7 	bl	80052c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b38:	e026      	b.n	8006b88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d209      	bcs.n	8006b66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f7fe fbd5 	bl	800530e <vListInsert>
}
 8006b64:	e010      	b.n	8006b88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b66:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4610      	mov	r0, r2
 8006b74:	f7fe fbcb 	bl	800530e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d202      	bcs.n	8006b88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b82:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000ef4 	.word	0x20000ef4
 8006b94:	20000a1c 	.word	0x20000a1c
 8006b98:	20000edc 	.word	0x20000edc
 8006b9c:	20000eac 	.word	0x20000eac
 8006ba0:	20000ea8 	.word	0x20000ea8
 8006ba4:	20000f10 	.word	0x20000f10

08006ba8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bb2:	f000 fb07 	bl	80071c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <xTimerCreateTimerTask+0x80>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d021      	beq.n	8006c02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bc6:	1d3a      	adds	r2, r7, #4
 8006bc8:	f107 0108 	add.w	r1, r7, #8
 8006bcc:	f107 030c 	add.w	r3, r7, #12
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fb31 	bl	8005238 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	2302      	movs	r3, #2
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	460a      	mov	r2, r1
 8006be8:	4910      	ldr	r1, [pc, #64]	; (8006c2c <xTimerCreateTimerTask+0x84>)
 8006bea:	4811      	ldr	r0, [pc, #68]	; (8006c30 <xTimerCreateTimerTask+0x88>)
 8006bec:	f7ff f8de 	bl	8005dac <xTaskCreateStatic>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <xTimerCreateTimerTask+0x8c>)
 8006bf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <xTimerCreateTimerTask+0x8c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c1e:	697b      	ldr	r3, [r7, #20]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000f4c 	.word	0x20000f4c
 8006c2c:	08007b68 	.word	0x08007b68
 8006c30:	08006d6d 	.word	0x08006d6d
 8006c34:	20000f50 	.word	0x20000f50

08006c38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	; 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	623b      	str	r3, [r7, #32]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <xTimerGenericCommand+0x98>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02a      	beq.n	8006cc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	dc18      	bgt.n	8006cb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c80:	f7ff feb2 	bl	80069e8 <xTaskGetSchedulerState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d109      	bne.n	8006c9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c8a:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <xTimerGenericCommand+0x98>)
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	f107 0110 	add.w	r1, r7, #16
 8006c92:	2300      	movs	r3, #0
 8006c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c96:	f7fe fca1 	bl	80055dc <xQueueGenericSend>
 8006c9a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c9c:	e012      	b.n	8006cc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <xTimerGenericCommand+0x98>)
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	f107 0110 	add.w	r1, r7, #16
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f7fe fc97 	bl	80055dc <xQueueGenericSend>
 8006cae:	6278      	str	r0, [r7, #36]	; 0x24
 8006cb0:	e008      	b.n	8006cc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cb2:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <xTimerGenericCommand+0x98>)
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	f107 0110 	add.w	r1, r7, #16
 8006cba:	2300      	movs	r3, #0
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	f7fe fd8b 	bl	80057d8 <xQueueGenericSendFromISR>
 8006cc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3728      	adds	r7, #40	; 0x28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000f4c 	.word	0x20000f4c

08006cd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b22      	ldr	r3, [pc, #136]	; (8006d68 <prvProcessExpiredTimer+0x94>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fb47 	bl	8005380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d022      	beq.n	8006d46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	18d1      	adds	r1, r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	6978      	ldr	r0, [r7, #20]
 8006d0e:	f000 f8d1 	bl	8006eb4 <prvInsertTimerInActiveList>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01f      	beq.n	8006d58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	2100      	movs	r1, #0
 8006d22:	6978      	ldr	r0, [r7, #20]
 8006d24:	f7ff ff88 	bl	8006c38 <xTimerGenericCommand>
 8006d28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4c:	f023 0301 	bic.w	r3, r3, #1
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	6978      	ldr	r0, [r7, #20]
 8006d5e:	4798      	blx	r3
}
 8006d60:	bf00      	nop
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000f44 	.word	0x20000f44

08006d6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d74:	f107 0308 	add.w	r3, r7, #8
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f857 	bl	8006e2c <prvGetNextExpireTime>
 8006d7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f803 	bl	8006d90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d8a:	f000 f8d5 	bl	8006f38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d8e:	e7f1      	b.n	8006d74 <prvTimerTask+0x8>

08006d90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d9a:	f7ff fa43 	bl	8006224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d9e:	f107 0308 	add.w	r3, r7, #8
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f866 	bl	8006e74 <prvSampleTimeNow>
 8006da8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d130      	bne.n	8006e12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <prvProcessTimerOrBlockTask+0x3c>
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d806      	bhi.n	8006dcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dbe:	f7ff fa3f 	bl	8006240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ff85 	bl	8006cd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006dca:	e024      	b.n	8006e16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <prvProcessTimerOrBlockTask+0x90>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <prvProcessTimerOrBlockTask+0x50>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <prvProcessTimerOrBlockTask+0x52>
 8006de0:	2300      	movs	r3, #0
 8006de2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <prvProcessTimerOrBlockTask+0x94>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	f7fe ffa7 	bl	8005d44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006df6:	f7ff fa23 	bl	8006240 <xTaskResumeAll>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e00:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <prvProcessTimerOrBlockTask+0x98>)
 8006e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
}
 8006e10:	e001      	b.n	8006e16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e12:	f7ff fa15 	bl	8006240 <xTaskResumeAll>
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000f48 	.word	0x20000f48
 8006e24:	20000f4c 	.word	0x20000f4c
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <prvGetNextExpireTime+0x44>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <prvGetNextExpireTime+0x16>
 8006e3e:	2201      	movs	r2, #1
 8006e40:	e000      	b.n	8006e44 <prvGetNextExpireTime+0x18>
 8006e42:	2200      	movs	r2, #0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <prvGetNextExpireTime+0x44>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e001      	b.n	8006e60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	20000f44 	.word	0x20000f44

08006e74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e7c:	f7ff fa7e 	bl	800637c <xTaskGetTickCount>
 8006e80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <prvSampleTimeNow+0x3c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d205      	bcs.n	8006e98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e8c:	f000 f936 	bl	80070fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e9e:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <prvSampleTimeNow+0x3c>)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000f54 	.word	0x20000f54

08006eb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d812      	bhi.n	8006f00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d302      	bcc.n	8006eee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	e01b      	b.n	8006f26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <prvInsertTimerInActiveList+0x7c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fe fa08 	bl	800530e <vListInsert>
 8006efe:	e012      	b.n	8006f26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d206      	bcs.n	8006f16 <prvInsertTimerInActiveList+0x62>
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f10:	2301      	movs	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e007      	b.n	8006f26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f16:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <prvInsertTimerInActiveList+0x80>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4610      	mov	r0, r2
 8006f22:	f7fe f9f4 	bl	800530e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f26:	697b      	ldr	r3, [r7, #20]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000f48 	.word	0x20000f48
 8006f34:	20000f44 	.word	0x20000f44

08006f38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08e      	sub	sp, #56	; 0x38
 8006f3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f3e:	e0ca      	b.n	80070d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	da18      	bge.n	8006f78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f46:	1d3b      	adds	r3, r7, #4
 8006f48:	3304      	adds	r3, #4
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	61fb      	str	r3, [r7, #28]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6e:	6850      	ldr	r0, [r2, #4]
 8006f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f72:	6892      	ldr	r2, [r2, #8]
 8006f74:	4611      	mov	r1, r2
 8006f76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f2c0 80aa 	blt.w	80070d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe f9f5 	bl	8005380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f96:	463b      	mov	r3, r7
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff ff6b 	bl	8006e74 <prvSampleTimeNow>
 8006f9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b09      	cmp	r3, #9
 8006fa4:	f200 8097 	bhi.w	80070d6 <prvProcessReceivedCommands+0x19e>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <prvProcessReceivedCommands+0x78>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fd9 	.word	0x08006fd9
 8006fbc:	0800704d 	.word	0x0800704d
 8006fc0:	08007061 	.word	0x08007061
 8006fc4:	080070ab 	.word	0x080070ab
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006fd9 	.word	0x08006fd9
 8006fd0:	0800704d 	.word	0x0800704d
 8006fd4:	08007061 	.word	0x08007061
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	18d1      	adds	r1, r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff8:	f7ff ff5c 	bl	8006eb4 <prvInsertTimerInActiveList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d069      	beq.n	80070d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007008:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d05e      	beq.n	80070d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	441a      	add	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	2100      	movs	r1, #0
 8007028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800702a:	f7ff fe05 	bl	8006c38 <xTimerGenericCommand>
 800702e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d14f      	bne.n	80070d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	61bb      	str	r3, [r7, #24]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800705e:	e03a      	b.n	80070d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	617b      	str	r3, [r7, #20]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	18d1      	adds	r1, r2, r3
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a4:	f7ff ff06 	bl	8006eb4 <prvInsertTimerInActiveList>
					break;
 80070a8:	e015      	b.n	80070d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80070b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ba:	f000 fbe1 	bl	8007880 <vPortFree>
 80070be:	e00a      	b.n	80070d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070d2:	e000      	b.n	80070d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80070d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070d6:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <prvProcessReceivedCommands+0x1c0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	1d39      	adds	r1, r7, #4
 80070dc:	2200      	movs	r2, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc16 	bl	8005910 <xQueueReceive>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f47f af2a 	bne.w	8006f40 <prvProcessReceivedCommands+0x8>
	}
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	3730      	adds	r7, #48	; 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000f4c 	.word	0x20000f4c

080070fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007102:	e048      	b.n	8007196 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007104:	4b2d      	ldr	r3, [pc, #180]	; (80071bc <prvSwitchTimerLists+0xc0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710e:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <prvSwitchTimerLists+0xc0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe f92f 	bl	8005380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02e      	beq.n	8007196 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d90e      	bls.n	8007168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007156:	4b19      	ldr	r3, [pc, #100]	; (80071bc <prvSwitchTimerLists+0xc0>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7fe f8d4 	bl	800530e <vListInsert>
 8007166:	e016      	b.n	8007196 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2300      	movs	r3, #0
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	2100      	movs	r1, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff fd60 	bl	8006c38 <xTimerGenericCommand>
 8007178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	603b      	str	r3, [r7, #0]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <prvSwitchTimerLists+0xc0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1b1      	bne.n	8007104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <prvSwitchTimerLists+0xc0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071a6:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <prvSwitchTimerLists+0xc4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a04      	ldr	r2, [pc, #16]	; (80071bc <prvSwitchTimerLists+0xc0>)
 80071ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071ae:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <prvSwitchTimerLists+0xc4>)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6013      	str	r3, [r2, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000f44 	.word	0x20000f44
 80071c0:	20000f48 	.word	0x20000f48

080071c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071ca:	f000 f96b 	bl	80074a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071ce:	4b15      	ldr	r3, [pc, #84]	; (8007224 <prvCheckForValidListAndQueue+0x60>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d120      	bne.n	8007218 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071d6:	4814      	ldr	r0, [pc, #80]	; (8007228 <prvCheckForValidListAndQueue+0x64>)
 80071d8:	f7fe f848 	bl	800526c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071dc:	4813      	ldr	r0, [pc, #76]	; (800722c <prvCheckForValidListAndQueue+0x68>)
 80071de:	f7fe f845 	bl	800526c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <prvCheckForValidListAndQueue+0x6c>)
 80071e4:	4a10      	ldr	r2, [pc, #64]	; (8007228 <prvCheckForValidListAndQueue+0x64>)
 80071e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071e8:	4b12      	ldr	r3, [pc, #72]	; (8007234 <prvCheckForValidListAndQueue+0x70>)
 80071ea:	4a10      	ldr	r2, [pc, #64]	; (800722c <prvCheckForValidListAndQueue+0x68>)
 80071ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071ee:	2300      	movs	r3, #0
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <prvCheckForValidListAndQueue+0x74>)
 80071f4:	4a11      	ldr	r2, [pc, #68]	; (800723c <prvCheckForValidListAndQueue+0x78>)
 80071f6:	2110      	movs	r1, #16
 80071f8:	200a      	movs	r0, #10
 80071fa:	f7fe f953 	bl	80054a4 <xQueueGenericCreateStatic>
 80071fe:	4603      	mov	r3, r0
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <prvCheckForValidListAndQueue+0x60>)
 8007202:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007204:	4b07      	ldr	r3, [pc, #28]	; (8007224 <prvCheckForValidListAndQueue+0x60>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <prvCheckForValidListAndQueue+0x60>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	490b      	ldr	r1, [pc, #44]	; (8007240 <prvCheckForValidListAndQueue+0x7c>)
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe fd6c 	bl	8005cf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007218:	f000 f974 	bl	8007504 <vPortExitCritical>
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000f4c 	.word	0x20000f4c
 8007228:	20000f1c 	.word	0x20000f1c
 800722c:	20000f30 	.word	0x20000f30
 8007230:	20000f44 	.word	0x20000f44
 8007234:	20000f48 	.word	0x20000f48
 8007238:	20000ff8 	.word	0x20000ff8
 800723c:	20000f58 	.word	0x20000f58
 8007240:	08007b70 	.word	0x08007b70

08007244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3b04      	subs	r3, #4
 8007254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800725c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3b04      	subs	r3, #4
 8007262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f023 0201 	bic.w	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3b04      	subs	r3, #4
 8007272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007274:	4a0c      	ldr	r2, [pc, #48]	; (80072a8 <pxPortInitialiseStack+0x64>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3b14      	subs	r3, #20
 800727e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3b04      	subs	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f06f 0202 	mvn.w	r2, #2
 8007292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3b20      	subs	r3, #32
 8007298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	080072ad 	.word	0x080072ad

080072ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <prvTaskExitError+0x54>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072be:	d00a      	beq.n	80072d6 <prvTaskExitError+0x2a>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60fb      	str	r3, [r7, #12]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <prvTaskExitError+0x28>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60bb      	str	r3, [r7, #8]
}
 80072e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072ea:	bf00      	nop
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0fc      	beq.n	80072ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	2000000c 	.word	0x2000000c
	...

08007310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <pxCurrentTCBConst2>)
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	6808      	ldr	r0, [r1, #0]
 8007316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	f380 8809 	msr	PSP, r0
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8811 	msr	BASEPRI, r0
 800732a:	4770      	bx	lr
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst2>:
 8007330:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007338:	4808      	ldr	r0, [pc, #32]	; (800735c <prvPortStartFirstTask+0x24>)
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f380 8808 	msr	MSP, r0
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8814 	msr	CONTROL, r0
 800734a:	b662      	cpsie	i
 800734c:	b661      	cpsie	f
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	df00      	svc	0
 8007358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800735a:	bf00      	nop
 800735c:	e000ed08 	.word	0xe000ed08

08007360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007366:	4b46      	ldr	r3, [pc, #280]	; (8007480 <xPortStartScheduler+0x120>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a46      	ldr	r2, [pc, #280]	; (8007484 <xPortStartScheduler+0x124>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10a      	bne.n	8007386 <xPortStartScheduler+0x26>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	613b      	str	r3, [r7, #16]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007386:	4b3e      	ldr	r3, [pc, #248]	; (8007480 <xPortStartScheduler+0x120>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a3f      	ldr	r2, [pc, #252]	; (8007488 <xPortStartScheduler+0x128>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10a      	bne.n	80073a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073a6:	4b39      	ldr	r3, [pc, #228]	; (800748c <xPortStartScheduler+0x12c>)
 80073a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	22ff      	movs	r2, #255	; 0xff
 80073b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	4b31      	ldr	r3, [pc, #196]	; (8007490 <xPortStartScheduler+0x130>)
 80073cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ce:	4b31      	ldr	r3, [pc, #196]	; (8007494 <xPortStartScheduler+0x134>)
 80073d0:	2207      	movs	r2, #7
 80073d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073d4:	e009      	b.n	80073ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073d6:	4b2f      	ldr	r3, [pc, #188]	; (8007494 <xPortStartScheduler+0x134>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3b01      	subs	r3, #1
 80073dc:	4a2d      	ldr	r2, [pc, #180]	; (8007494 <xPortStartScheduler+0x134>)
 80073de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b80      	cmp	r3, #128	; 0x80
 80073f4:	d0ef      	beq.n	80073d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073f6:	4b27      	ldr	r3, [pc, #156]	; (8007494 <xPortStartScheduler+0x134>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1c3 0307 	rsb	r3, r3, #7
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d00a      	beq.n	8007418 <xPortStartScheduler+0xb8>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60bb      	str	r3, [r7, #8]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007418:	4b1e      	ldr	r3, [pc, #120]	; (8007494 <xPortStartScheduler+0x134>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <xPortStartScheduler+0x134>)
 8007420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007422:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <xPortStartScheduler+0x134>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800742a:	4a1a      	ldr	r2, [pc, #104]	; (8007494 <xPortStartScheduler+0x134>)
 800742c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007436:	4b18      	ldr	r3, [pc, #96]	; (8007498 <xPortStartScheduler+0x138>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a17      	ldr	r2, [pc, #92]	; (8007498 <xPortStartScheduler+0x138>)
 800743c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <xPortStartScheduler+0x138>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a14      	ldr	r2, [pc, #80]	; (8007498 <xPortStartScheduler+0x138>)
 8007448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800744c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800744e:	f000 f8dd 	bl	800760c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <xPortStartScheduler+0x13c>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007458:	f000 f8fc 	bl	8007654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800745c:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <xPortStartScheduler+0x140>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a0f      	ldr	r2, [pc, #60]	; (80074a0 <xPortStartScheduler+0x140>)
 8007462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007468:	f7ff ff66 	bl	8007338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800746c:	f7ff f850 	bl	8006510 <vTaskSwitchContext>
	prvTaskExitError();
 8007470:	f7ff ff1c 	bl	80072ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	e000ed00 	.word	0xe000ed00
 8007484:	410fc271 	.word	0x410fc271
 8007488:	410fc270 	.word	0x410fc270
 800748c:	e000e400 	.word	0xe000e400
 8007490:	20001048 	.word	0x20001048
 8007494:	2000104c 	.word	0x2000104c
 8007498:	e000ed20 	.word	0xe000ed20
 800749c:	2000000c 	.word	0x2000000c
 80074a0:	e000ef34 	.word	0xe000ef34

080074a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	607b      	str	r3, [r7, #4]
}
 80074bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074be:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <vPortEnterCritical+0x58>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <vPortEnterCritical+0x58>)
 80074c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <vPortEnterCritical+0x58>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d10f      	bne.n	80074f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <vPortEnterCritical+0x5c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	603b      	str	r3, [r7, #0]
}
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <vPortEnterCritical+0x4a>
	}
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	2000000c 	.word	0x2000000c
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <vPortExitCritical+0x50>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <vPortExitCritical+0x24>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	607b      	str	r3, [r7, #4]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <vPortExitCritical+0x50>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3b01      	subs	r3, #1
 800752e:	4a09      	ldr	r2, [pc, #36]	; (8007554 <vPortExitCritical+0x50>)
 8007530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007532:	4b08      	ldr	r3, [pc, #32]	; (8007554 <vPortExitCritical+0x50>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <vPortExitCritical+0x42>
 800753a:	2300      	movs	r3, #0
 800753c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	f383 8811 	msr	BASEPRI, r3
}
 8007544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	2000000c 	.word	0x2000000c
	...

08007560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007560:	f3ef 8009 	mrs	r0, PSP
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <pxCurrentTCBConst>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	f01e 0f10 	tst.w	lr, #16
 8007570:	bf08      	it	eq
 8007572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	6010      	str	r0, [r2, #0]
 800757c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007584:	f380 8811 	msr	BASEPRI, r0
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f7fe ffbe 	bl	8006510 <vTaskSwitchContext>
 8007594:	f04f 0000 	mov.w	r0, #0
 8007598:	f380 8811 	msr	BASEPRI, r0
 800759c:	bc09      	pop	{r0, r3}
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	6808      	ldr	r0, [r1, #0]
 80075a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a6:	f01e 0f10 	tst.w	lr, #16
 80075aa:	bf08      	it	eq
 80075ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075b0:	f380 8809 	msr	PSP, r0
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w

080075c0 <pxCurrentTCBConst>:
 80075c0:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop

080075c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075e2:	f7fe fedb 	bl	800639c <xTaskIncrementTick>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <xPortSysTickHandler+0x40>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <vPortSetupTimerInterrupt+0x38>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <vPortSetupTimerInterrupt+0x3c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0a      	ldr	r2, [pc, #40]	; (800764c <vPortSetupTimerInterrupt+0x40>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	4a09      	ldr	r2, [pc, #36]	; (8007650 <vPortSetupTimerInterrupt+0x44>)
 800762a:	3b01      	subs	r3, #1
 800762c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007630:	2207      	movs	r2, #7
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	e000e010 	.word	0xe000e010
 8007644:	e000e018 	.word	0xe000e018
 8007648:	20000000 	.word	0x20000000
 800764c:	10624dd3 	.word	0x10624dd3
 8007650:	e000e014 	.word	0xe000e014

08007654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007664 <vPortEnableVFP+0x10>
 8007658:	6801      	ldr	r1, [r0, #0]
 800765a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800765e:	6001      	str	r1, [r0, #0]
 8007660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007662:	bf00      	nop
 8007664:	e000ed88 	.word	0xe000ed88

08007668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800766e:	f3ef 8305 	mrs	r3, IPSR
 8007672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d914      	bls.n	80076a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800767a:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <vPortValidateInterruptPriority+0x70>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <vPortValidateInterruptPriority+0x74>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	7afa      	ldrb	r2, [r7, #11]
 800768a:	429a      	cmp	r2, r3
 800768c:	d20a      	bcs.n	80076a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076a4:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <vPortValidateInterruptPriority+0x78>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076ac:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <vPortValidateInterruptPriority+0x7c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d90a      	bls.n	80076ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	603b      	str	r3, [r7, #0]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <vPortValidateInterruptPriority+0x60>
	}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	e000e3f0 	.word	0xe000e3f0
 80076dc:	20001048 	.word	0x20001048
 80076e0:	e000ed0c 	.word	0xe000ed0c
 80076e4:	2000104c 	.word	0x2000104c

080076e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076f4:	f7fe fd96 	bl	8006224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076f8:	4b5b      	ldr	r3, [pc, #364]	; (8007868 <pvPortMalloc+0x180>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007700:	f000 f920 	bl	8007944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007704:	4b59      	ldr	r3, [pc, #356]	; (800786c <pvPortMalloc+0x184>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	f040 8093 	bne.w	8007838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01d      	beq.n	8007754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007718:	2208      	movs	r2, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b00      	cmp	r3, #0
 8007728:	d014      	beq.n	8007754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f023 0307 	bic.w	r3, r3, #7
 8007730:	3308      	adds	r3, #8
 8007732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <pvPortMalloc+0x6c>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	617b      	str	r3, [r7, #20]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d06e      	beq.n	8007838 <pvPortMalloc+0x150>
 800775a:	4b45      	ldr	r3, [pc, #276]	; (8007870 <pvPortMalloc+0x188>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d869      	bhi.n	8007838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007764:	4b43      	ldr	r3, [pc, #268]	; (8007874 <pvPortMalloc+0x18c>)
 8007766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007768:	4b42      	ldr	r3, [pc, #264]	; (8007874 <pvPortMalloc+0x18c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800776e:	e004      	b.n	800777a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	429a      	cmp	r2, r3
 8007782:	d903      	bls.n	800778c <pvPortMalloc+0xa4>
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f1      	bne.n	8007770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <pvPortMalloc+0x180>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007792:	429a      	cmp	r2, r3
 8007794:	d050      	beq.n	8007838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2208      	movs	r2, #8
 800779c:	4413      	add	r3, r2
 800779e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	2308      	movs	r3, #8
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d91f      	bls.n	80077f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <pvPortMalloc+0xf8>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	613b      	str	r3, [r7, #16]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077f2:	69b8      	ldr	r0, [r7, #24]
 80077f4:	f000 f908 	bl	8007a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077f8:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <pvPortMalloc+0x188>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <pvPortMalloc+0x188>)
 8007804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <pvPortMalloc+0x188>)
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <pvPortMalloc+0x190>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d203      	bcs.n	800781a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007812:	4b17      	ldr	r3, [pc, #92]	; (8007870 <pvPortMalloc+0x188>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a18      	ldr	r2, [pc, #96]	; (8007878 <pvPortMalloc+0x190>)
 8007818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <pvPortMalloc+0x184>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	431a      	orrs	r2, r3
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <pvPortMalloc+0x194>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	4a11      	ldr	r2, [pc, #68]	; (800787c <pvPortMalloc+0x194>)
 8007836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007838:	f7fe fd02 	bl	8006240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <pvPortMalloc+0x174>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60fb      	str	r3, [r7, #12]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <pvPortMalloc+0x172>
	return pvReturn;
 800785c:	69fb      	ldr	r3, [r7, #28]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3728      	adds	r7, #40	; 0x28
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20004c58 	.word	0x20004c58
 800786c:	20004c6c 	.word	0x20004c6c
 8007870:	20004c5c 	.word	0x20004c5c
 8007874:	20004c50 	.word	0x20004c50
 8007878:	20004c60 	.word	0x20004c60
 800787c:	20004c64 	.word	0x20004c64

08007880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d04d      	beq.n	800792e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007892:	2308      	movs	r3, #8
 8007894:	425b      	negs	r3, r3
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4413      	add	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	4b24      	ldr	r3, [pc, #144]	; (8007938 <vPortFree+0xb8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4013      	ands	r3, r2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <vPortFree+0x44>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60fb      	str	r3, [r7, #12]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <vPortFree+0x62>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	60bb      	str	r3, [r7, #8]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	4b14      	ldr	r3, [pc, #80]	; (8007938 <vPortFree+0xb8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01e      	beq.n	800792e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11a      	bne.n	800792e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <vPortFree+0xb8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007908:	f7fe fc8c 	bl	8006224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <vPortFree+0xbc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4413      	add	r3, r2
 8007916:	4a09      	ldr	r2, [pc, #36]	; (800793c <vPortFree+0xbc>)
 8007918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f000 f874 	bl	8007a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <vPortFree+0xc0>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	4a06      	ldr	r2, [pc, #24]	; (8007940 <vPortFree+0xc0>)
 8007928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800792a:	f7fe fc89 	bl	8006240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20004c6c 	.word	0x20004c6c
 800793c:	20004c5c 	.word	0x20004c5c
 8007940:	20004c68 	.word	0x20004c68

08007944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800794a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800794e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007950:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <prvHeapInit+0xac>)
 8007952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3307      	adds	r3, #7
 8007962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0307 	bic.w	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	4a1f      	ldr	r2, [pc, #124]	; (80079f0 <prvHeapInit+0xac>)
 8007974:	4413      	add	r3, r2
 8007976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800797c:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <prvHeapInit+0xb0>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007982:	4b1c      	ldr	r3, [pc, #112]	; (80079f4 <prvHeapInit+0xb0>)
 8007984:	2200      	movs	r2, #0
 8007986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007990:	2208      	movs	r2, #8
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <prvHeapInit+0xb4>)
 80079a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079a6:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <prvHeapInit+0xb4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079ae:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <prvHeapInit+0xb4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079c4:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <prvHeapInit+0xb4>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <prvHeapInit+0xb8>)
 80079d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <prvHeapInit+0xbc>)
 80079da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <prvHeapInit+0xc0>)
 80079de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079e2:	601a      	str	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20001050 	.word	0x20001050
 80079f4:	20004c50 	.word	0x20004c50
 80079f8:	20004c58 	.word	0x20004c58
 80079fc:	20004c60 	.word	0x20004c60
 8007a00:	20004c5c 	.word	0x20004c5c
 8007a04:	20004c6c 	.word	0x20004c6c

08007a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a10:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <prvInsertBlockIntoFreeList+0xac>)
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e002      	b.n	8007a1c <prvInsertBlockIntoFreeList+0x14>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d8f7      	bhi.n	8007a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	4413      	add	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d108      	bne.n	8007a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	441a      	add	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	441a      	add	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d118      	bne.n	8007a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d00d      	beq.n	8007a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e008      	b.n	8007a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e003      	b.n	8007a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d002      	beq.n	8007aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20004c50 	.word	0x20004c50
 8007ab8:	20004c58 	.word	0x20004c58

08007abc <__libc_init_array>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4d0d      	ldr	r5, [pc, #52]	; (8007af4 <__libc_init_array+0x38>)
 8007ac0:	4c0d      	ldr	r4, [pc, #52]	; (8007af8 <__libc_init_array+0x3c>)
 8007ac2:	1b64      	subs	r4, r4, r5
 8007ac4:	10a4      	asrs	r4, r4, #2
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	42a6      	cmp	r6, r4
 8007aca:	d109      	bne.n	8007ae0 <__libc_init_array+0x24>
 8007acc:	4d0b      	ldr	r5, [pc, #44]	; (8007afc <__libc_init_array+0x40>)
 8007ace:	4c0c      	ldr	r4, [pc, #48]	; (8007b00 <__libc_init_array+0x44>)
 8007ad0:	f000 f82e 	bl	8007b30 <_init>
 8007ad4:	1b64      	subs	r4, r4, r5
 8007ad6:	10a4      	asrs	r4, r4, #2
 8007ad8:	2600      	movs	r6, #0
 8007ada:	42a6      	cmp	r6, r4
 8007adc:	d105      	bne.n	8007aea <__libc_init_array+0x2e>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae4:	4798      	blx	r3
 8007ae6:	3601      	adds	r6, #1
 8007ae8:	e7ee      	b.n	8007ac8 <__libc_init_array+0xc>
 8007aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aee:	4798      	blx	r3
 8007af0:	3601      	adds	r6, #1
 8007af2:	e7f2      	b.n	8007ada <__libc_init_array+0x1e>
 8007af4:	08007be8 	.word	0x08007be8
 8007af8:	08007be8 	.word	0x08007be8
 8007afc:	08007be8 	.word	0x08007be8
 8007b00:	08007bec 	.word	0x08007bec

08007b04 <memcpy>:
 8007b04:	440a      	add	r2, r1
 8007b06:	4291      	cmp	r1, r2
 8007b08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b0c:	d100      	bne.n	8007b10 <memcpy+0xc>
 8007b0e:	4770      	bx	lr
 8007b10:	b510      	push	{r4, lr}
 8007b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	d1f9      	bne.n	8007b12 <memcpy+0xe>
 8007b1e:	bd10      	pop	{r4, pc}

08007b20 <memset>:
 8007b20:	4402      	add	r2, r0
 8007b22:	4603      	mov	r3, r0
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d100      	bne.n	8007b2a <memset+0xa>
 8007b28:	4770      	bx	lr
 8007b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2e:	e7f9      	b.n	8007b24 <memset+0x4>

08007b30 <_init>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr

08007b3c <_fini>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr
