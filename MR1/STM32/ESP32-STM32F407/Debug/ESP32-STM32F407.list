
ESP32-STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004868  08004868  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010883  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231c  00000000  00000000  000308bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  000339c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bf9  00000000  00000000  000346b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010698  00000000  00000000  000562b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd7ab  00000000  00000000  00066949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001340f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa4  00000000  00000000  00134144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004830 	.word	0x08004830

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004830 	.word	0x08004830

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005f4:	f000 b974 	b.w	80008e0 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468e      	mov	lr, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14d      	bne.n	80006ba <__udivmoddi4+0xaa>
 800061e:	428a      	cmp	r2, r1
 8000620:	4694      	mov	ip, r2
 8000622:	d969      	bls.n	80006f8 <__udivmoddi4+0xe8>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b152      	cbz	r2, 8000640 <__udivmoddi4+0x30>
 800062a:	fa01 f302 	lsl.w	r3, r1, r2
 800062e:	f1c2 0120 	rsb	r1, r2, #32
 8000632:	fa20 f101 	lsr.w	r1, r0, r1
 8000636:	fa0c fc02 	lsl.w	ip, ip, r2
 800063a:	ea41 0e03 	orr.w	lr, r1, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	0c21      	lsrs	r1, r4, #16
 8000646:	fbbe f6f8 	udiv	r6, lr, r8
 800064a:	fa1f f78c 	uxth.w	r7, ip
 800064e:	fb08 e316 	mls	r3, r8, r6, lr
 8000652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000656:	fb06 f107 	mul.w	r1, r6, r7
 800065a:	4299      	cmp	r1, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x64>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000666:	f080 811f 	bcs.w	80008a8 <__udivmoddi4+0x298>
 800066a:	4299      	cmp	r1, r3
 800066c:	f240 811c 	bls.w	80008a8 <__udivmoddi4+0x298>
 8000670:	3e02      	subs	r6, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f0f8 	udiv	r0, r3, r8
 800067c:	fb08 3310 	mls	r3, r8, r0, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb00 f707 	mul.w	r7, r0, r7
 8000688:	42a7      	cmp	r7, r4
 800068a:	d90a      	bls.n	80006a2 <__udivmoddi4+0x92>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000694:	f080 810a 	bcs.w	80008ac <__udivmoddi4+0x29c>
 8000698:	42a7      	cmp	r7, r4
 800069a:	f240 8107 	bls.w	80008ac <__udivmoddi4+0x29c>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a6:	1be4      	subs	r4, r4, r7
 80006a8:	2600      	movs	r6, #0
 80006aa:	b11d      	cbz	r5, 80006b4 <__udivmoddi4+0xa4>
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	2300      	movs	r3, #0
 80006b0:	e9c5 4300 	strd	r4, r3, [r5]
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0xc2>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80ef 	beq.w	80008a2 <__udivmoddi4+0x292>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x160>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xd4>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80f9 	bhi.w	80008d6 <__udivmoddi4+0x2c6>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	469e      	mov	lr, r3
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e0      	beq.n	80006b4 <__udivmoddi4+0xa4>
 80006f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f6:	e7dd      	b.n	80006b4 <__udivmoddi4+0xa4>
 80006f8:	b902      	cbnz	r2, 80006fc <__udivmoddi4+0xec>
 80006fa:	deff      	udf	#255	; 0xff
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	f040 8092 	bne.w	800082a <__udivmoddi4+0x21a>
 8000706:	eba1 010c 	sub.w	r1, r1, ip
 800070a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	2601      	movs	r6, #1
 8000714:	0c20      	lsrs	r0, r4, #16
 8000716:	fbb1 f3f7 	udiv	r3, r1, r7
 800071a:	fb07 1113 	mls	r1, r7, r3, r1
 800071e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000722:	fb0e f003 	mul.w	r0, lr, r3
 8000726:	4288      	cmp	r0, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0x12c>
 800072a:	eb1c 0101 	adds.w	r1, ip, r1
 800072e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x12a>
 8000734:	4288      	cmp	r0, r1
 8000736:	f200 80cb 	bhi.w	80008d0 <__udivmoddi4+0x2c0>
 800073a:	4643      	mov	r3, r8
 800073c:	1a09      	subs	r1, r1, r0
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb1 f0f7 	udiv	r0, r1, r7
 8000744:	fb07 1110 	mls	r1, r7, r0, r1
 8000748:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800074c:	fb0e fe00 	mul.w	lr, lr, r0
 8000750:	45a6      	cmp	lr, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x156>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x154>
 800075e:	45a6      	cmp	lr, r4
 8000760:	f200 80bb 	bhi.w	80008da <__udivmoddi4+0x2ca>
 8000764:	4608      	mov	r0, r1
 8000766:	eba4 040e 	sub.w	r4, r4, lr
 800076a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076e:	e79c      	b.n	80006aa <__udivmoddi4+0x9a>
 8000770:	f1c6 0720 	rsb	r7, r6, #32
 8000774:	40b3      	lsls	r3, r6
 8000776:	fa22 fc07 	lsr.w	ip, r2, r7
 800077a:	ea4c 0c03 	orr.w	ip, ip, r3
 800077e:	fa20 f407 	lsr.w	r4, r0, r7
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	40f9      	lsrs	r1, r7
 800078a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078e:	fa00 f306 	lsl.w	r3, r0, r6
 8000792:	fbb1 f8f9 	udiv	r8, r1, r9
 8000796:	0c20      	lsrs	r0, r4, #16
 8000798:	fa1f fe8c 	uxth.w	lr, ip
 800079c:	fb09 1118 	mls	r1, r9, r8, r1
 80007a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a4:	fb08 f00e 	mul.w	r0, r8, lr
 80007a8:	4288      	cmp	r0, r1
 80007aa:	fa02 f206 	lsl.w	r2, r2, r6
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b8>
 80007b0:	eb1c 0101 	adds.w	r1, ip, r1
 80007b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007b8:	f080 8088 	bcs.w	80008cc <__udivmoddi4+0x2bc>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f240 8085 	bls.w	80008cc <__udivmoddi4+0x2bc>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d0:	fb09 1110 	mls	r1, r9, r0, r1
 80007d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007dc:	458e      	cmp	lr, r1
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1e2>
 80007e0:	eb1c 0101 	adds.w	r1, ip, r1
 80007e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007e8:	d26c      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 80007ea:	458e      	cmp	lr, r1
 80007ec:	d96a      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4461      	add	r1, ip
 80007f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f6:	fba0 9402 	umull	r9, r4, r0, r2
 80007fa:	eba1 010e 	sub.w	r1, r1, lr
 80007fe:	42a1      	cmp	r1, r4
 8000800:	46c8      	mov	r8, r9
 8000802:	46a6      	mov	lr, r4
 8000804:	d356      	bcc.n	80008b4 <__udivmoddi4+0x2a4>
 8000806:	d053      	beq.n	80008b0 <__udivmoddi4+0x2a0>
 8000808:	b15d      	cbz	r5, 8000822 <__udivmoddi4+0x212>
 800080a:	ebb3 0208 	subs.w	r2, r3, r8
 800080e:	eb61 010e 	sbc.w	r1, r1, lr
 8000812:	fa01 f707 	lsl.w	r7, r1, r7
 8000816:	fa22 f306 	lsr.w	r3, r2, r6
 800081a:	40f1      	lsrs	r1, r6
 800081c:	431f      	orrs	r7, r3
 800081e:	e9c5 7100 	strd	r7, r1, [r5]
 8000822:	2600      	movs	r6, #0
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	40d8      	lsrs	r0, r3
 8000830:	fa0c fc02 	lsl.w	ip, ip, r2
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	4091      	lsls	r1, r2
 800083a:	4301      	orrs	r1, r0
 800083c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	fbb3 f0f7 	udiv	r0, r3, r7
 8000848:	fb07 3610 	mls	r6, r7, r0, r3
 800084c:	0c0b      	lsrs	r3, r1, #16
 800084e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000852:	fb00 f60e 	mul.w	r6, r0, lr
 8000856:	429e      	cmp	r6, r3
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x260>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000866:	d22f      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 8000868:	429e      	cmp	r6, r3
 800086a:	d92d      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 800086c:	3802      	subs	r0, #2
 800086e:	4463      	add	r3, ip
 8000870:	1b9b      	subs	r3, r3, r6
 8000872:	b289      	uxth	r1, r1
 8000874:	fbb3 f6f7 	udiv	r6, r3, r7
 8000878:	fb07 3316 	mls	r3, r7, r6, r3
 800087c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000880:	fb06 f30e 	mul.w	r3, r6, lr
 8000884:	428b      	cmp	r3, r1
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x28a>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000890:	d216      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000892:	428b      	cmp	r3, r1
 8000894:	d914      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000896:	3e02      	subs	r6, #2
 8000898:	4461      	add	r1, ip
 800089a:	1ac9      	subs	r1, r1, r3
 800089c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a0:	e738      	b.n	8000714 <__udivmoddi4+0x104>
 80008a2:	462e      	mov	r6, r5
 80008a4:	4628      	mov	r0, r5
 80008a6:	e705      	b.n	80006b4 <__udivmoddi4+0xa4>
 80008a8:	4606      	mov	r6, r0
 80008aa:	e6e3      	b.n	8000674 <__udivmoddi4+0x64>
 80008ac:	4618      	mov	r0, r3
 80008ae:	e6f8      	b.n	80006a2 <__udivmoddi4+0x92>
 80008b0:	454b      	cmp	r3, r9
 80008b2:	d2a9      	bcs.n	8000808 <__udivmoddi4+0x1f8>
 80008b4:	ebb9 0802 	subs.w	r8, r9, r2
 80008b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008bc:	3801      	subs	r0, #1
 80008be:	e7a3      	b.n	8000808 <__udivmoddi4+0x1f8>
 80008c0:	4646      	mov	r6, r8
 80008c2:	e7ea      	b.n	800089a <__udivmoddi4+0x28a>
 80008c4:	4620      	mov	r0, r4
 80008c6:	e794      	b.n	80007f2 <__udivmoddi4+0x1e2>
 80008c8:	4640      	mov	r0, r8
 80008ca:	e7d1      	b.n	8000870 <__udivmoddi4+0x260>
 80008cc:	46d0      	mov	r8, sl
 80008ce:	e77b      	b.n	80007c8 <__udivmoddi4+0x1b8>
 80008d0:	3b02      	subs	r3, #2
 80008d2:	4461      	add	r1, ip
 80008d4:	e732      	b.n	800073c <__udivmoddi4+0x12c>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e709      	b.n	80006ee <__udivmoddi4+0xde>
 80008da:	4464      	add	r4, ip
 80008dc:	3802      	subs	r0, #2
 80008de:	e742      	b.n	8000766 <__udivmoddi4+0x156>

080008e0 <__aeabi_idiv0>:
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <MX_CAN1_Init+0x9c>)
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <MX_CAN1_Init+0xa0>)
 80008ee:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_CAN1_Init+0x9c>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_CAN1_Init+0x9c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_CAN1_Init+0x9c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000904:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000908:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_CAN1_Init+0x9c>)
 800090c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000910:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000914:	2200      	movs	r2, #0
 8000916:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_CAN1_Init+0x9c>)
 800091a:	2200      	movs	r2, #0
 800091c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000920:	2200      	movs	r2, #0
 8000922:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000926:	2200      	movs	r2, #0
 8000928:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_CAN1_Init+0x9c>)
 800092c:	2200      	movs	r2, #0
 800092e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000932:	2200      	movs	r2, #0
 8000934:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000938:	f000 fe62 	bl	8001600 <HAL_CAN_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000942:	f000 fb73 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 800096a:	230e      	movs	r3, #14
 800096c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_CAN1_Init+0x9c>)
 8000974:	f000 ff40 	bl	80017f8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000028 	.word	0x20000028
 8000984:	40006400 	.word	0x40006400

08000988 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_CAN_MspInit+0x94>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d134      	bne.n	8000a14 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_CAN_MspInit+0x98>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <HAL_CAN_MspInit+0x98>)
 80009b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_CAN_MspInit+0x98>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_CAN_MspInit+0x98>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_CAN_MspInit+0x98>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_CAN_MspInit+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009f4:	2309      	movs	r3, #9
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <HAL_CAN_MspInit+0x9c>)
 8000a00:	f001 fcfc 	bl	80023fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2014      	movs	r0, #20
 8000a0a:	f001 fc2e 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a0e:	2014      	movs	r0, #20
 8000a10:	f001 fc47 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40006400 	.word	0x40006400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <map>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000aba:	edc7 0a04 	vstr	s1, [r7, #16]
 8000abe:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ac2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ac6:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8000aca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ade:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ae2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ae6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000afa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000afe:	eeb0 0a67 	vmov.f32	s0, s15
 8000b02:	371c      	adds	r7, #28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fd04 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f838 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff ff86 	bl	8000a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b1c:	f000 fbfa 	bl	8001314 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b20:	f000 fc22 	bl	8001368 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000b24:	f7ff fede 	bl	80008e4 <MX_CAN1_Init>
  MX_TIM3_Init();
 8000b28:	f000 fb12 	bl	8001150 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b2c:	f000 fb5e 	bl	80011ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000b30:	480f      	ldr	r0, [pc, #60]	; (8000b70 <main+0x64>)
 8000b32:	f002 faa7 	bl	8003084 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <main+0x68>)
 8000b38:	f002 faa4 	bl	8003084 <HAL_TIM_Base_Start_IT>
  /*** Configure UART ***/
  HAL_UART_Receive_IT(&huart3, RxDataESP, 11);
 8000b3c:	220b      	movs	r2, #11
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <main+0x6c>)
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <main+0x70>)
 8000b42:	f002 ff1e 	bl	8003982 <HAL_UART_Receive_IT>

  /*** Configure CAN ***/
	HAL_CAN_Start(&hcan1);
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <main+0x74>)
 8000b48:	f000 ff36 	bl	80019b8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <main+0x74>)
 8000b50:	f001 f851 	bl	8001bf6 <HAL_CAN_ActivateNotification>
	TxHeader.DLC = 8; // data length
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <main+0x78>)
 8000b56:	2208      	movs	r2, #8
 8000b58:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <main+0x78>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <main+0x78>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x401; //Id 0x7FF
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <main+0x78>)
 8000b68:	f240 4201 	movw	r2, #1025	; 0x401
 8000b6c:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x62>
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	200000f8 	.word	0x200000f8
 8000b78:	20000074 	.word	0x20000074
 8000b7c:	20000184 	.word	0x20000184
 8000b80:	20000028 	.word	0x20000028
 8000b84:	20000050 	.word	0x20000050

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fe42 	bl	8004820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bec:	2310      	movs	r3, #16
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bfc:	23a8      	movs	r3, #168	; 0xa8
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd91 	bl	8002734 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c18:	f000 fa08 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2105      	movs	r1, #5
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fff2 	bl	8002c24 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c46:	f000 f9f1 	bl	800102c <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	; 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, RxDataESP, 11);
 8000c64:	220b      	movs	r2, #11
 8000c66:	4904      	ldr	r1, [pc, #16]	; (8000c78 <HAL_UART_RxCpltCallback+0x1c>)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <HAL_UART_RxCpltCallback+0x20>)
 8000c6a:	f002 fe8a 	bl	8003982 <HAL_UART_Receive_IT>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000074 	.word	0x20000074
 8000c7c:	20000184 	.word	0x20000184

08000c80 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a6a      	ldr	r2, [pc, #424]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f040 8162 	bne.w	8000f58 <HAL_TIM_PeriodElapsedCallback+0x2d8>
	{
		if (vx == 2) {
 8000c94:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d119      	bne.n	8000cd0 <HAL_TIM_PeriodElapsedCallback+0x50>
			Vx = (0.5 + (Speed / 10));
 8000c9c:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a68      	ldr	r2, [pc, #416]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca6:	1092      	asrs	r2, r2, #2
 8000ca8:	17db      	asrs	r3, r3, #31
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fbdd 	bl	800046c <__aeabi_i2d>
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	4b64      	ldr	r3, [pc, #400]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000cb8:	f7ff fa8c 	bl	80001d4 <__adddf3>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fc3c 	bl	8000540 <__aeabi_d2f>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a60      	ldr	r2, [pc, #384]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e026      	b.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x9e>
		} else if (vx == 1) {
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d11e      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x96>
			Vx = -(0.5 + (Speed / 10));
 8000cd8:	4b59      	ldr	r3, [pc, #356]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a59      	ldr	r2, [pc, #356]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000cde:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce2:	1092      	asrs	r2, r2, #2
 8000ce4:	17db      	asrs	r3, r3, #31
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fbbf 	bl	800046c <__aeabi_i2d>
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000cf4:	f7ff fa6e 	bl	80001d4 <__adddf3>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fc1e 	bl	8000540 <__aeabi_d2f>
 8000d04:	4603      	mov	r3, r0
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef1 7a67 	vneg.f32	s15, s15
 8000d0e:	4b4f      	ldr	r3, [pc, #316]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d10:	edc3 7a00 	vstr	s15, [r3]
 8000d14:	e003      	b.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x9e>
		} else {
			Vx = 0.0;
 8000d16:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
		}
		if (vy == 2) {
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d119      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0xda>
			Vy = (0.5 + (Speed / 10));
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d30:	1092      	asrs	r2, r2, #2
 8000d32:	17db      	asrs	r3, r3, #31
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb98 	bl	800046c <__aeabi_i2d>
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d42:	f7ff fa47 	bl	80001d4 <__adddf3>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff fbf7 	bl	8000540 <__aeabi_d2f>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e026      	b.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x128>
		} else if (vy == 1) {
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d11e      	bne.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x120>
			Vy = -(0.5 + (Speed / 10));
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d68:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6c:	1092      	asrs	r2, r2, #2
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fb7a 	bl	800046c <__aeabi_i2d>
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d7e:	f7ff fa29 	bl	80001d4 <__adddf3>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fbd9 	bl	8000540 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef1 7a67 	vneg.f32	s15, s15
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d9a:	edc3 7a00 	vstr	s15, [r3]
 8000d9e:	e003      	b.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x128>
		} else {
			Vy = 0.0;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
		}
		if (omega == 2) {
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d119      	bne.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x164>
			Omega = (0.4 + (Speed/10));
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000db6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dba:	1092      	asrs	r2, r2, #2
 8000dbc:	17db      	asrs	r3, r3, #31
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb53 	bl	800046c <__aeabi_i2d>
 8000dc6:	a31a      	add	r3, pc, #104	; (adr r3, 8000e30 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fa02 	bl	80001d4 <__adddf3>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fbb2 	bl	8000540 <__aeabi_d2f>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e041      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x1e8>
		} else if (omega == 1) {
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d139      	bne.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			Omega = -(0.4 + (Speed/10));
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000df2:	fb82 1203 	smull	r1, r2, r2, r3
 8000df6:	1092      	asrs	r2, r2, #2
 8000df8:	17db      	asrs	r3, r3, #31
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb35 	bl	800046c <__aeabi_i2d>
 8000e02:	a30b      	add	r3, pc, #44	; (adr r3, 8000e30 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff f9e4 	bl	80001d4 <__adddf3>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fb94 	bl	8000540 <__aeabi_d2f>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eef1 7a67 	vneg.f32	s15, s15
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000e24:	edc3 7a00 	vstr	s15, [r3]
 8000e28:	e01e      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w
 8000e30:	9999999a 	.word	0x9999999a
 8000e34:	3fd99999 	.word	0x3fd99999
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	2000007f 	.word	0x2000007f
 8000e40:	20000090 	.word	0x20000090
 8000e44:	66666667 	.word	0x66666667
 8000e48:	3fe00000 	.word	0x3fe00000
 8000e4c:	20000084 	.word	0x20000084
 8000e50:	20000080 	.word	0x20000080
 8000e54:	20000088 	.word	0x20000088
 8000e58:	20000081 	.word	0x20000081
 8000e5c:	2000008c 	.word	0x2000008c
		} else {
			Omega = 0.0;
 8000e60:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
		}
		TxData[0] = map(Vx, -3.0, 3.0, 0, 255);
 8000e68:	4b5b      	ldr	r3, [pc, #364]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 8000fdc <HAL_TIM_PeriodElapsedCallback+0x35c>
 8000e72:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8000fe0 <HAL_TIM_PeriodElapsedCallback+0x360>
 8000e76:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8000e7a:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	f7ff fe15 	bl	8000ab0 <map>
 8000e86:	eef0 7a40 	vmov.f32	s15, s0
 8000e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8e:	edc7 7a00 	vstr	s15, [r7]
 8000e92:	783b      	ldrb	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000e98:	701a      	strb	r2, [r3, #0]
		TxData[1] = map(Vy, -3.0, 3.0, 0, 255);
 8000e9a:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000e9c:	edd3 7a00 	vldr	s15, [r3]
 8000ea0:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 8000fdc <HAL_TIM_PeriodElapsedCallback+0x35c>
 8000ea4:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8000fe0 <HAL_TIM_PeriodElapsedCallback+0x360>
 8000ea8:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8000eac:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 8000eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb4:	f7ff fdfc 	bl	8000ab0 <map>
 8000eb8:	eef0 7a40 	vmov.f32	s15, s0
 8000ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec0:	edc7 7a00 	vstr	s15, [r7]
 8000ec4:	783b      	ldrb	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000eca:	705a      	strb	r2, [r3, #1]
		TxData[2] = map(Omega, -3.0, 3.0, 0, 255);
 8000ecc:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8000fdc <HAL_TIM_PeriodElapsedCallback+0x35c>
 8000ed6:	eddf 1a42 	vldr	s3, [pc, #264]	; 8000fe0 <HAL_TIM_PeriodElapsedCallback+0x360>
 8000eda:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8000ede:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 8000ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee6:	f7ff fde3 	bl	8000ab0 <map>
 8000eea:	eef0 7a40 	vmov.f32	s15, s0
 8000eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef2:	edc7 7a00 	vstr	s15, [r7]
 8000ef6:	783b      	ldrb	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000efc:	709a      	strb	r2, [r3, #2]
		TxData[3] = Mode;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f06:	70da      	strb	r2, [r3, #3]
		TxData[4] = Position;
 8000f08:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f10:	711a      	strb	r2, [r3, #4]
		TxData[5] = Catch;
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f1a:	715a      	strb	r2, [r3, #5]
		TxData[6] = Push;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f24:	719a      	strb	r2, [r3, #6]
		TxData[7] = Drop;
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f2e:	71da      	strb	r2, [r3, #7]

		if (Position == 11)
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b0b      	cmp	r3, #11
 8000f36:	d109      	bne.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x2cc>
		{
			TxData[6] = Stepper;
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f40:	719a      	strb	r2, [r3, #6]
			TxData[7] = Shooter;
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f4a:	71da      	strb	r2, [r3, #7]
		}

		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000f4e:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000f50:	492e      	ldr	r1, [pc, #184]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f52:	482f      	ldr	r0, [pc, #188]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000f54:	f000 fd74 	bl	8001a40 <HAL_CAN_AddTxMessage>
	}
	if (htim->Instance == TIM5)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d133      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x34a>
	{
		vx = RxDataESP[0];
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f68:	701a      	strb	r2, [r3, #0]
		vy = RxDataESP[1];
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f6c:	785a      	ldrb	r2, [r3, #1]
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000f70:	701a      	strb	r2, [r3, #0]
		omega = RxDataESP[2];
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f74:	789a      	ldrb	r2, [r3, #2]
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000f78:	701a      	strb	r2, [r3, #0]
		Speed = RxDataESP[3];
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f7c:	78db      	ldrb	r3, [r3, #3]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000f82:	601a      	str	r2, [r3, #0]
		Mode = RxDataESP[4];
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000f8c:	601a      	str	r2, [r3, #0]
		Position = RxDataESP[5];
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f90:	795b      	ldrb	r3, [r3, #5]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000f96:	601a      	str	r2, [r3, #0]
		Push = RxDataESP[6];
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000fa0:	601a      	str	r2, [r3, #0]
		Shooter = RxDataESP[7];
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000fa4:	79db      	ldrb	r3, [r3, #7]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000faa:	601a      	str	r2, [r3, #0]
		Stepper = RxDataESP[8];
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000fb4:	601a      	str	r2, [r3, #0]
		Drop = RxDataESP[9];
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fbe:	601a      	str	r2, [r3, #0]
		Catch = RxDataESP[10];
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000fc2:	7a9b      	ldrb	r3, [r3, #10]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000fc8:	601a      	str	r2, [r3, #0]
	}
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000008c 	.word	0x2000008c
 8000fd8:	20000084 	.word	0x20000084
 8000fdc:	437f0000 	.word	0x437f0000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	20000068 	.word	0x20000068
 8000fe8:	20000088 	.word	0x20000088
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000a4 	.word	0x200000a4
 8001000:	200000a8 	.word	0x200000a8
 8001004:	200000ac 	.word	0x200000ac
 8001008:	20000070 	.word	0x20000070
 800100c:	20000050 	.word	0x20000050
 8001010:	20000028 	.word	0x20000028
 8001014:	40000c00 	.word	0x40000c00
 8001018:	20000074 	.word	0x20000074
 800101c:	2000007f 	.word	0x2000007f
 8001020:	20000080 	.word	0x20000080
 8001024:	20000081 	.word	0x20000081
 8001028:	20000090 	.word	0x20000090

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <HAL_MspInit+0x4c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x4c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 fa74 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <CAN1_RX0_IRQHandler+0x10>)
 80010e2:	f000 fdae 	bl	8001c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000028 	.word	0x20000028

080010f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM3_IRQHandler+0x10>)
 80010f6:	f002 f835 	bl	8003164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000b0 	.word	0x200000b0

08001104 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART3_IRQHandler+0x10>)
 800110a:	f002 fc6b 	bl	80039e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000184 	.word	0x20000184

08001118 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM5_IRQHandler+0x10>)
 800111e:	f002 f821 	bl	8003164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000f8 	.word	0x200000f8

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM3_Init+0x94>)
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <MX_TIM3_Init+0x98>)
 8001170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001174:	2253      	movs	r2, #83	; 0x53
 8001176:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM3_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001180:	f242 720f 	movw	r2, #9999	; 0x270f
 8001184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM3_Init+0x94>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001194:	f001 ff26 	bl	8002fe4 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800119e:	f7ff ff45 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM3_Init+0x94>)
 80011b0:	f002 f8e0 	bl	8003374 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f7ff ff37 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_TIM3_Init+0x94>)
 80011cc:	f002 fafc 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011d6:	f7ff ff29 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000b0 	.word	0x200000b0
 80011e8:	40000400 	.word	0x40000400

080011ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_TIM5_Init+0x94>)
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_TIM5_Init+0x98>)
 800120c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM5_Init+0x94>)
 8001210:	2253      	movs	r2, #83	; 0x53
 8001212:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM5_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM5_Init+0x94>)
 800121c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001220:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_TIM5_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_TIM5_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_TIM5_Init+0x94>)
 8001230:	f001 fed8 	bl	8002fe4 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800123a:	f7ff fef7 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_TIM5_Init+0x94>)
 800124c:	f002 f892 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001256:	f7ff fee9 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_TIM5_Init+0x94>)
 8001268:	f002 faae 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001272:	f7ff fedb 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000f8 	.word	0x200000f8
 8001284:	40000c00 	.word	0x40000c00

08001288 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_TIM_Base_MspInit+0x80>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d116      	bne.n	80012c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_TIM_Base_MspInit+0x84>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a1a      	ldr	r2, [pc, #104]	; (800130c <HAL_TIM_Base_MspInit+0x84>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_TIM_Base_MspInit+0x84>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201d      	movs	r0, #29
 80012bc:	f000 ffd5 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012c0:	201d      	movs	r0, #29
 80012c2:	f000 ffee 	bl	80022a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80012c6:	e01a      	b.n	80012fe <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM5)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_TIM_Base_MspInit+0x88>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d115      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_TIM_Base_MspInit+0x84>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_TIM_Base_MspInit+0x84>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_TIM_Base_MspInit+0x84>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2032      	movs	r0, #50	; 0x32
 80012f4:	f000 ffb9 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012f8:	2032      	movs	r0, #50	; 0x32
 80012fa:	f000 ffd2 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40000400 	.word	0x40000400
 800130c:	40023800 	.word	0x40023800
 8001310:	40000c00 	.word	0x40000c00

08001314 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART2_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800134c:	f002 facc 	bl	80038e8 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f7ff fe69 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000140 	.word	0x20000140
 8001364:	40004400 	.word	0x40004400

08001368 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART3_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 80013a0:	f002 faa2 	bl	80038e8 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f7ff fe3f 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000184 	.word	0x20000184
 80013b8:	40004800 	.word	0x40004800

080013bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <HAL_UART_MspInit+0xf8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12c      	bne.n	8001438 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001416:	230c      	movs	r3, #12
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001426:	2307      	movs	r3, #7
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <HAL_UART_MspInit+0x100>)
 8001432:	f000 ffe3 	bl	80023fc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001436:	e039      	b.n	80014ac <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_UART_MspInit+0x104>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d134      	bne.n	80014ac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_UART_MspInit+0xfc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800148c:	2307      	movs	r3, #7
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_UART_MspInit+0x108>)
 8001498:	f000 ffb0 	bl	80023fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2027      	movs	r0, #39	; 0x27
 80014a2:	f000 fee2 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a6:	2027      	movs	r0, #39	; 0x27
 80014a8:	f000 fefb 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 80014ac:	bf00      	nop
 80014ae:	3730      	adds	r7, #48	; 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40020800 	.word	0x40020800

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ce:	490e      	ldr	r1, [pc, #56]	; (8001508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e4:	4c0b      	ldr	r4, [pc, #44]	; (8001514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f2:	f7ff fe1b 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f003 f96f 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff fb07 	bl	8000b0c <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800150c:	08004870 	.word	0x08004870
  ldr r2, =_sbss
 8001510:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001514:	200001cc 	.word	0x200001cc

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 fe85 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fd72 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fe9d 	bl	80022be <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f000 fe65 	bl	800226a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	200001c8 	.word	0x200001c8

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200001c8 	.word	0x200001c8

08001600 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0ed      	b.n	80017ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff f9b2 	bl	8000988 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff ffd8 	bl	80015e8 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800163a:	e012      	b.n	8001662 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800163c:	f7ff ffd4 	bl	80015e8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d90b      	bls.n	8001662 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0c5      	b.n	80017ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0e5      	beq.n	800163c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0202 	bic.w	r2, r2, #2
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff ffb2 	bl	80015e8 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff ffae 	bl	80015e8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e09f      	b.n	80017ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e5      	bne.n	8001688 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7e5b      	ldrb	r3, [r3, #25]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e007      	b.n	8001710 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800170e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e9b      	ldrb	r3, [r3, #26]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0220 	bic.w	r2, r2, #32
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7edb      	ldrb	r3, [r3, #27]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0210 	bic.w	r2, r2, #16
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0210 	orr.w	r2, r2, #16
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7f1b      	ldrb	r3, [r3, #28]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e007      	b.n	800178e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0208 	bic.w	r2, r2, #8
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f5b      	ldrb	r3, [r3, #29]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0204 	orr.w	r2, r2, #4
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	ea42 0103 	orr.w	r1, r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d003      	beq.n	800181e <HAL_CAN_ConfigFilter+0x26>
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	2b02      	cmp	r3, #2
 800181a:	f040 80be 	bne.w	800199a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800181e:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001820:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001838:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2201      	movs	r2, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d123      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3248      	adds	r2, #72	; 0x48
 80018a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018be:	6979      	ldr	r1, [r7, #20]
 80018c0:	3348      	adds	r3, #72	; 0x48
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d122      	bne.n	8001916 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3248      	adds	r2, #72	; 0x48
 80018f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800190a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	3348      	adds	r3, #72	; 0x48
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001930:	e007      	b.n	8001942 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800195c:	e007      	b.n	800196e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	431a      	orrs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	431a      	orrs	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800198c:	f023 0201 	bic.w	r2, r3, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e006      	b.n	80019a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40006400 	.word	0x40006400

080019b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d12e      	bne.n	8001a2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fe00 	bl	80015e8 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ea:	e012      	b.n	8001a12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ec:	f7ff fdfc 	bl	80015e8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b0a      	cmp	r3, #10
 80019f8:	d90b      	bls.n	8001a12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2205      	movs	r2, #5
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e012      	b.n	8001a38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e5      	bne.n	80019ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e006      	b.n	8001a38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d003      	beq.n	8001a6c <HAL_CAN_AddTxMessage+0x2c>
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	f040 80b8 	bne.w	8001bdc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80a0 	beq.w	8001bcc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	0e1b      	lsrs	r3, r3, #24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d907      	bls.n	8001aac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e09e      	b.n	8001bea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001aac:	2201      	movs	r2, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	440b      	add	r3, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e00f      	b.n	8001afa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ae4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aea:	68f9      	ldr	r1, [r7, #12]
 8001aec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3318      	adds	r3, #24
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	440b      	add	r3, r1
 8001af8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3318      	adds	r3, #24
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	440b      	add	r3, r1
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	7d1b      	ldrb	r3, [r3, #20]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d111      	bne.n	8001b3a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	6811      	ldr	r1, [r2, #0]
 8001b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3318      	adds	r3, #24
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	440b      	add	r3, r1
 8001b36:	3304      	adds	r3, #4
 8001b38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3307      	adds	r3, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	061a      	lsls	r2, r3, #24
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3306      	adds	r3, #6
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	041b      	lsls	r3, r3, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3305      	adds	r3, #5
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	4313      	orrs	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	3204      	adds	r2, #4
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	ea43 0200 	orr.w	r2, r3, r0
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3303      	adds	r3, #3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	061a      	lsls	r2, r3, #24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3301      	adds	r3, #1
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	4610      	mov	r0, r2
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	6811      	ldr	r1, [r2, #0]
 8001b98:	ea43 0200 	orr.w	r2, r3, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ba6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	6811      	ldr	r1, [r2, #0]
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3318      	adds	r3, #24
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	440b      	add	r3, r1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e00e      	b.n	8001bea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e006      	b.n	8001bea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d002      	beq.n	8001c14 <HAL_CAN_ActivateNotification+0x1e>
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d109      	bne.n	8001c28 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6959      	ldr	r1, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e006      	b.n	8001c36 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b08a      	sub	sp, #40	; 0x28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d07c      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d023      	beq.n	8001cda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f983 	bl	8001fb0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001caa:	e016      	b.n	8001cda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	e00c      	b.n	8001cda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	e002      	b.n	8001cda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f989 	bl	8001fec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d024      	beq.n	8001d2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f963 	bl	8001fc4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cfe:	e016      	b.n	8001d2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e00c      	b.n	8001d2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e002      	b.n	8001d2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f969 	bl	8002000 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d024      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f943 	bl	8001fd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d52:	e016      	b.n	8001d82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e00c      	b.n	8001d82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e002      	b.n	8001d82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f949 	bl	8002014 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f93a 	bl	800203c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f921 	bl	8002028 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00c      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2210      	movs	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f91c 	bl	8002064 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f903 	bl	8002050 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2210      	movs	r2, #16
 8001e64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f906 	bl	8002078 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2208      	movs	r2, #8
 8001e86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8ff 	bl	800208c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d07b      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d072      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d043      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03e      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f10:	2b60      	cmp	r3, #96	; 0x60
 8001f12:	d02b      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
 8001f14:	2b60      	cmp	r3, #96	; 0x60
 8001f16:	d82e      	bhi.n	8001f76 <HAL_CAN_IRQHandler+0x334>
 8001f18:	2b50      	cmp	r3, #80	; 0x50
 8001f1a:	d022      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x320>
 8001f1c:	2b50      	cmp	r3, #80	; 0x50
 8001f1e:	d82a      	bhi.n	8001f76 <HAL_CAN_IRQHandler+0x334>
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d019      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x316>
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d826      	bhi.n	8001f76 <HAL_CAN_IRQHandler+0x334>
 8001f28:	2b30      	cmp	r3, #48	; 0x30
 8001f2a:	d010      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x30c>
 8001f2c:	2b30      	cmp	r3, #48	; 0x30
 8001f2e:	d822      	bhi.n	8001f76 <HAL_CAN_IRQHandler+0x334>
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d002      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x2f8>
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d005      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f38:	e01d      	b.n	8001f76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f42:	e019      	b.n	8001f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f4c:	e014      	b.n	8001f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f56:	e00f      	b.n	8001f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f60:	e00a      	b.n	8001f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f6a:	e005      	b.n	8001f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f74:	e000      	b.n	8001f78 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f87c 	bl	80020a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <__NVIC_EnableIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002234:	f7ff ff8e 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff29 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff3e 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff8e 	bl	80021a8 <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff31 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa2 	bl	8002210 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff f980 	bl	80015e8 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d008      	beq.n	8002308 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e052      	b.n	80023ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0216 	bic.w	r2, r2, #22
 8002316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002326:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_DMA_Abort+0x62>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0208 	bic.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002358:	e013      	b.n	8002382 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235a:	f7ff f945 	bl	80015e8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b05      	cmp	r3, #5
 8002366:	d90c      	bls.n	8002382 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e015      	b.n	80023ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e4      	bne.n	800235a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	223f      	movs	r2, #63	; 0x3f
 8002396:	409a      	lsls	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d004      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00c      	b.n	80023ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2205      	movs	r2, #5
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e16b      	b.n	80026f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 815a 	bne.w	80026ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d005      	beq.n	800244e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	2b02      	cmp	r3, #2
 800244c:	d130      	bne.n	80024b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0201 	and.w	r2, r3, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d017      	beq.n	80024ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d123      	bne.n	8002540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	69b9      	ldr	r1, [r7, #24]
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0203 	and.w	r2, r3, #3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80b4 	beq.w	80026ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b60      	ldr	r3, [pc, #384]	; (8002708 <HAL_GPIO_Init+0x30c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <HAL_GPIO_Init+0x30c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_GPIO_Init+0x30c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259e:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_GPIO_Init+0x310>)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_GPIO_Init+0x314>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_GPIO_Init+0x318>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_GPIO_Init+0x31c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_GPIO_Init+0x320>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_GPIO_Init+0x324>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4d      	ldr	r2, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x328>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	; (8002728 <HAL_GPIO_Init+0x32c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	; (800272c <HAL_GPIO_Init+0x330>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x20a>
 8002602:	2307      	movs	r3, #7
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002606:	2308      	movs	r3, #8
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	; (800270c <HAL_GPIO_Init+0x310>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_GPIO_Init+0x334>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_GPIO_Init+0x334>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_GPIO_Init+0x334>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_GPIO_Init+0x334>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae90 	bls.w	8002418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e267      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d00c      	beq.n	8002778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b85      	ldr	r3, [pc, #532]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b7e      	ldr	r3, [pc, #504]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05b      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e242      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x74>
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b70      	ldr	r3, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027cc:	4b69      	ldr	r3, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fefc 	bl	80015e8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fef8 	bl	80015e8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e207      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fee8 	bl	80015e8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fee4 	bl	80015e8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1f3      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b44      	ldr	r3, [pc, #272]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c7      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x244>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fe9d 	bl	80015e8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fe99 	bl	80015e8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a8      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_OscConfig+0x244>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fe7c 	bl	80015e8 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fe78 	bl	80015e8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e187      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x248>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fe5c 	bl	80015e8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fe58 	bl	80015e8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e167      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x240>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x248>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe fe45 	bl	80015e8 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e00e      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe fe41 	bl	80015e8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d907      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e150      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ea      	bne.n	8002962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8097 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b7d      	ldr	r3, [pc, #500]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a7c      	ldr	r2, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fe01 	bl	80015e8 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe fdfd 	bl	80015e8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e10c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2ea>
 8002a10:	4b64      	ldr	r3, [pc, #400]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a63      	ldr	r2, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x30c>
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a5b      	ldr	r2, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a40:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a54      	ldr	r2, [pc, #336]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fdc2 	bl	80015e8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe fdbe 	bl	80015e8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0cb      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fdac 	bl	80015e8 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fda8 	bl	80015e8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b5      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a1 	beq.w	8002c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d05c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d141      	bne.n	8002b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fd7c 	bl	80015e8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fd78 	bl	80015e8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e087      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fd51 	bl	80015e8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fd4d 	bl	80015e8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e05c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x416>
 8002b68:	e054      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd3a 	bl	80015e8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fd36 	bl	80015e8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e045      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
 8002b96:	e03d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e038      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d028      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fc68 	bl	80015e8 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7fe fc64 	bl	80015e8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fbc8 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	08004848 	.word	0x08004848
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b090      	sub	sp, #64	; 0x40
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	f200 80a1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e22:	e09b      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e28:	e09b      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2a:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e2e:	e098      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	627a      	str	r2, [r7, #36]	; 0x24
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e5c:	fb03 f201 	mul.w	r2, r3, r1
 8002e60:	2300      	movs	r3, #0
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	4a43      	ldr	r2, [pc, #268]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e70:	460a      	mov	r2, r1
 8002e72:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	61fa      	str	r2, [r7, #28]
 8002e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e8a:	f7fd fba9 	bl	80005e0 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4613      	mov	r3, r2
 8002e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e96:	e053      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	617a      	str	r2, [r7, #20]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eaa:	f04f 0b00 	mov.w	fp, #0
 8002eae:	4652      	mov	r2, sl
 8002eb0:	465b      	mov	r3, fp
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec0:	0150      	lsls	r0, r2, #5
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	ebb2 080a 	subs.w	r8, r2, sl
 8002eca:	eb63 090b 	sbc.w	r9, r3, fp
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002eda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ede:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ee2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ee6:	eb63 0509 	sbc.w	r5, r3, r9
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	00eb      	lsls	r3, r5, #3
 8002ef4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef8:	00e2      	lsls	r2, r4, #3
 8002efa:	4614      	mov	r4, r2
 8002efc:	461d      	mov	r5, r3
 8002efe:	eb14 030a 	adds.w	r3, r4, sl
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	eb45 030b 	adc.w	r3, r5, fp
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	60fa      	str	r2, [r7, #12]
 8002f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f34:	f7fd fb54 	bl	80005e0 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3740      	adds	r7, #64	; 0x40
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	017d7840 	.word	0x017d7840

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08004858 	.word	0x08004858

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08004858 	.word	0x08004858

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e041      	b.n	800307a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe f93c 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 fa96 	bl	8003554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d001      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04e      	b.n	800313a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <HAL_TIM_Base_Start_IT+0xc4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d022      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c6:	d01d      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_TIM_Base_Start_IT+0xc8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <HAL_TIM_Base_Start_IT+0xcc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_TIM_Base_Start_IT+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_TIM_Base_Start_IT+0xd4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_TIM_Base_Start_IT+0xd8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIM_Base_Start_IT+0xdc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d010      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003126:	e007      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40010400 	.word	0x40010400
 800315c:	40014000 	.word	0x40014000
 8003160:	40001800 	.word	0x40001800

08003164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b02      	cmp	r3, #2
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0202 	mvn.w	r2, #2
 8003190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9b5 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9a7 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f9b8 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0204 	mvn.w	r2, #4
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f98b 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f97d 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f98e 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b08      	cmp	r3, #8
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0208 	mvn.w	r2, #8
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2204      	movs	r2, #4
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f961 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f953 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f964 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b10      	cmp	r3, #16
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b10      	cmp	r3, #16
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0210 	mvn.w	r2, #16
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2208      	movs	r2, #8
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f937 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f929 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f93a 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10e      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0201 	mvn.w	r2, #1
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fccc 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d10e      	bne.n	8003314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d107      	bne.n	8003314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800330c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fae0 	bl	80038d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d10e      	bne.n	8003340 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d107      	bne.n	8003340 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8ff 	bl	800353e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b20      	cmp	r3, #32
 800334c:	d10e      	bne.n	800336c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b20      	cmp	r3, #32
 800335a:	d107      	bne.n	800336c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0220 	mvn.w	r2, #32
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 faaa 	bl	80038c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIM_ConfigClockSource+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e0b4      	b.n	80034fa <HAL_TIM_ConfigClockSource+0x186>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d03e      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0xd4>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ce:	f200 8087 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_TIM_ConfigClockSource+0x172>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d87f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d01a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xa6>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d87b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d050      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x11a>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d877      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b50      	cmp	r3, #80	; 0x50
 80033f2:	d03c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xfa>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d873      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d058      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x13a>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d86f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d064      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d86b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d060      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d867      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d05a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	e062      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f000 f9ad 	bl	8003788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800343c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
      break;
 8003446:	e04f      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f000 f996 	bl	8003788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	461a      	mov	r2, r3
 800347c:	f000 f90a 	bl	8003694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2150      	movs	r1, #80	; 0x50
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f963 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 800348c:	e02c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f000 f929 	bl	80036f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2160      	movs	r1, #96	; 0x60
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f953 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e01c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 f8ea 	bl	8003694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f943 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 f93a 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 80034de:	e003      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <TIM_Base_SetConfig+0x114>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d00f      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3d      	ldr	r2, [pc, #244]	; (800366c <TIM_Base_SetConfig+0x118>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <TIM_Base_SetConfig+0x11c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <TIM_Base_SetConfig+0x120>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <TIM_Base_SetConfig+0x124>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <TIM_Base_SetConfig+0x114>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d027      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <TIM_Base_SetConfig+0x118>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d023      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <TIM_Base_SetConfig+0x11c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <TIM_Base_SetConfig+0x120>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a29      	ldr	r2, [pc, #164]	; (8003678 <TIM_Base_SetConfig+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d017      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <TIM_Base_SetConfig+0x128>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <TIM_Base_SetConfig+0x12c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <TIM_Base_SetConfig+0x130>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <TIM_Base_SetConfig+0x134>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <TIM_Base_SetConfig+0x138>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a23      	ldr	r2, [pc, #140]	; (8003690 <TIM_Base_SetConfig+0x13c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <TIM_Base_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0xf8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40010400 	.word	0x40010400
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800
 8003688:	40001800 	.word	0x40001800
 800368c:	40001c00 	.word	0x40001c00
 8003690:	40002000 	.word	0x40002000

08003694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f023 030a 	bic.w	r3, r3, #10
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b087      	sub	sp, #28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800371c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	031b      	lsls	r3, r3, #12
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800372e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	f043 0307 	orr.w	r3, r3, #7
 8003774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e05a      	b.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d01d      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10c      	bne.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4313      	orrs	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40001800 	.word	0x40001800

080038c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e03f      	b.n	800397a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fd54 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800392a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fcdf 	bl	80042f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	4613      	mov	r3, r2
 800398e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d11d      	bne.n	80039d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Receive_IT+0x26>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e016      	b.n	80039da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Receive_IT+0x38>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e00f      	b.n	80039da <HAL_UART_Receive_IT+0x58>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fab6 	bl	8003f40 <UART_Start_Receive_IT>
 80039d4:	4603      	mov	r3, r0
 80039d6:	e000      	b.n	80039da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b0ba      	sub	sp, #232	; 0xe8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_UART_IRQHandler+0x66>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fb99 	bl	800417a <UART_Receive_IT>
      return;
 8003a48:	e256      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80de 	beq.w	8003c10 <HAL_UART_IRQHandler+0x22c>
 8003a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80d1 	beq.w	8003c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_UART_IRQHandler+0xae>
 8003a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xd2>
 8003a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_UART_IRQHandler+0xf6>
 8003ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0204 	orr.w	r2, r3, #4
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <HAL_UART_IRQHandler+0x126>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0208 	orr.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 81ed 	beq.w	8003eee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_UART_IRQHandler+0x14e>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fb24 	bl	800417a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_UART_IRQHandler+0x17a>
 8003b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04f      	beq.n	8003bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa2c 	bl	8003fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d141      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3314      	adds	r3, #20
 8003b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1d9      	bne.n	8003b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d013      	beq.n	8003bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	4a7d      	ldr	r2, [pc, #500]	; (8003dc0 <HAL_UART_IRQHandler+0x3dc>)
 8003bcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fbef 	bl	80023b6 <HAL_DMA_Abort_IT>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003be8:	4610      	mov	r0, r2
 8003bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	e00e      	b.n	8003c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f990 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e00a      	b.n	8003c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f98c 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f988 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c0a:	e170      	b.n	8003eee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	bf00      	nop
    return;
 8003c0e:	e16e      	b.n	8003eee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 814a 	bne.w	8003eae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8143 	beq.w	8003eae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 813c 	beq.w	8003eae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	f040 80b4 	bne.w	8003dc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8140 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	f080 8139 	bcs.w	8003ef2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c92:	f000 8088 	beq.w	8003da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1d9      	bne.n	8003c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3314      	adds	r3, #20
 8003d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e1      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e3      	bne.n	8003d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	f023 0310 	bic.w	r3, r3, #16
 8003d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d88:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e3      	bne.n	8003d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fa98 	bl	80022d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8b6 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dbc:	e099      	b.n	8003ef2 <HAL_UART_IRQHandler+0x50e>
 8003dbe:	bf00      	nop
 8003dc0:	08004083 	.word	0x08004083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 808b 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8086 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e0e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e3      	bne.n	8003dea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	623b      	str	r3, [r7, #32]
   return(result);
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e46:	633a      	str	r2, [r7, #48]	; 0x30
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e8c:	61fa      	str	r2, [r7, #28]
 8003e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f83e 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eac:	e023      	b.n	8003ef6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_UART_IRQHandler+0x4ea>
 8003eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8ef 	bl	80040aa <UART_Transmit_IT>
    return;
 8003ecc:	e014      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x514>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f92f 	bl	800414a <UART_EndTransmit_IT>
    return;
 8003eec:	e004      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
    return;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ef6:	bf00      	nop
  }
}
 8003ef8:	37e8      	adds	r7, #232	; 0xe8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop

08003f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2222      	movs	r2, #34	; 0x22
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0220 	orr.w	r2, r2, #32
 8003fac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b095      	sub	sp, #84	; 0x54
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe4:	643a      	str	r2, [r7, #64]	; 0x40
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	61fb      	str	r3, [r7, #28]
   return(result);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	2b01      	cmp	r3, #1
 8004032:	d119      	bne.n	8004068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60bb      	str	r3, [r7, #8]
   return(result);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	647b      	str	r3, [r7, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004054:	61ba      	str	r2, [r7, #24]
 8004056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	613b      	str	r3, [r7, #16]
   return(result);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004076:	bf00      	nop
 8004078:	3754      	adds	r7, #84	; 0x54
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ff39 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b21      	cmp	r3, #33	; 0x21
 80040bc:	d13e      	bne.n	800413c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d114      	bne.n	80040f2 <UART_Transmit_IT+0x48>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d110      	bne.n	80040f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]
 80040f0:	e008      	b.n	8004104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6211      	str	r1, [r2, #32]
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29b      	uxth	r3, r3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4619      	mov	r1, r3
 8004112:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10f      	bne.n	8004138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fec8 	bl	8003f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08c      	sub	sp, #48	; 0x30
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b22      	cmp	r3, #34	; 0x22
 800418c:	f040 80ab 	bne.w	80042e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d117      	bne.n	80041ca <UART_Receive_IT+0x50>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	1c9a      	adds	r2, r3, #2
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
 80041c8:	e026      	b.n	8004218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d007      	beq.n	80041ee <UART_Receive_IT+0x74>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <UART_Receive_IT+0x82>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e008      	b.n	800420e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004208:	b2da      	uxtb	r2, r3
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4619      	mov	r1, r3
 8004226:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004228:	2b00      	cmp	r3, #0
 800422a:	d15a      	bne.n	80042e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0220 	bic.w	r2, r2, #32
 800423a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b01      	cmp	r3, #1
 800426a:	d135      	bne.n	80042d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	613b      	str	r3, [r7, #16]
   return(result);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f023 0310 	bic.w	r3, r3, #16
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	623a      	str	r2, [r7, #32]
 8004294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	69f9      	ldr	r1, [r7, #28]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d10a      	bne.n	80042ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff fe29 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
 80042d6:	e002      	b.n	80042de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7fc fcbf 	bl	8000c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e002      	b.n	80042e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3730      	adds	r7, #48	; 0x30
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f4:	b0c0      	sub	sp, #256	; 0x100
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	68d9      	ldr	r1, [r3, #12]
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	ea40 0301 	orr.w	r3, r0, r1
 8004318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	431a      	orrs	r2, r3
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	431a      	orrs	r2, r3
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004348:	f021 010c 	bic.w	r1, r1, #12
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004356:	430b      	orrs	r3, r1
 8004358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	6999      	ldr	r1, [r3, #24]
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	ea40 0301 	orr.w	r3, r0, r1
 8004376:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b8f      	ldr	r3, [pc, #572]	; (80045bc <UART_SetConfig+0x2cc>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d005      	beq.n	8004390 <UART_SetConfig+0xa0>
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <UART_SetConfig+0x2d0>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d104      	bne.n	800439a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7fe fe14 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004394:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004398:	e003      	b.n	80043a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800439a:	f7fe fdfb 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 800439e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ac:	f040 810c 	bne.w	80045c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80043ca:	415b      	adcs	r3, r3
 80043cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043d2:	4621      	mov	r1, r4
 80043d4:	eb12 0801 	adds.w	r8, r2, r1
 80043d8:	4629      	mov	r1, r5
 80043da:	eb43 0901 	adc.w	r9, r3, r1
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043f2:	4690      	mov	r8, r2
 80043f4:	4699      	mov	r9, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	eb18 0303 	adds.w	r3, r8, r3
 80043fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004400:	462b      	mov	r3, r5
 8004402:	eb49 0303 	adc.w	r3, r9, r3
 8004406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004416:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800441a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800441e:	460b      	mov	r3, r1
 8004420:	18db      	adds	r3, r3, r3
 8004422:	653b      	str	r3, [r7, #80]	; 0x50
 8004424:	4613      	mov	r3, r2
 8004426:	eb42 0303 	adc.w	r3, r2, r3
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
 800442c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004434:	f7fc f8d4 	bl	80005e0 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <UART_SetConfig+0x2d4>)
 800443e:	fba3 2302 	umull	r2, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	011c      	lsls	r4, r3, #4
 8004446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004450:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004458:	4642      	mov	r2, r8
 800445a:	464b      	mov	r3, r9
 800445c:	1891      	adds	r1, r2, r2
 800445e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004460:	415b      	adcs	r3, r3
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004468:	4641      	mov	r1, r8
 800446a:	eb12 0a01 	adds.w	sl, r2, r1
 800446e:	4649      	mov	r1, r9
 8004470:	eb43 0b01 	adc.w	fp, r3, r1
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004488:	4692      	mov	sl, r2
 800448a:	469b      	mov	fp, r3
 800448c:	4643      	mov	r3, r8
 800448e:	eb1a 0303 	adds.w	r3, sl, r3
 8004492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004496:	464b      	mov	r3, r9
 8004498:	eb4b 0303 	adc.w	r3, fp, r3
 800449c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b4:	460b      	mov	r3, r1
 80044b6:	18db      	adds	r3, r3, r3
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ba:	4613      	mov	r3, r2
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	647b      	str	r3, [r7, #68]	; 0x44
 80044c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044ca:	f7fc f889 	bl	80005e0 <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <UART_SetConfig+0x2d4>)
 80044d6:	fba3 2301 	umull	r2, r3, r3, r1
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2264      	movs	r2, #100	; 0x64
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	1acb      	subs	r3, r1, r3
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ea:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <UART_SetConfig+0x2d4>)
 80044ec:	fba3 2302 	umull	r2, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044f8:	441c      	add	r4, r3
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004504:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004508:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	1891      	adds	r1, r2, r2
 8004512:	63b9      	str	r1, [r7, #56]	; 0x38
 8004514:	415b      	adcs	r3, r3
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800451c:	4641      	mov	r1, r8
 800451e:	1851      	adds	r1, r2, r1
 8004520:	6339      	str	r1, [r7, #48]	; 0x30
 8004522:	4649      	mov	r1, r9
 8004524:	414b      	adcs	r3, r1
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004534:	4659      	mov	r1, fp
 8004536:	00cb      	lsls	r3, r1, #3
 8004538:	4651      	mov	r1, sl
 800453a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453e:	4651      	mov	r1, sl
 8004540:	00ca      	lsls	r2, r1, #3
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	4603      	mov	r3, r0
 8004548:	4642      	mov	r2, r8
 800454a:	189b      	adds	r3, r3, r2
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004550:	464b      	mov	r3, r9
 8004552:	460a      	mov	r2, r1
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004568:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800456c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004570:	460b      	mov	r3, r1
 8004572:	18db      	adds	r3, r3, r3
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 8004576:	4613      	mov	r3, r2
 8004578:	eb42 0303 	adc.w	r3, r2, r3
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004582:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004586:	f7fc f82b 	bl	80005e0 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <UART_SetConfig+0x2d4>)
 8004590:	fba3 1302 	umull	r1, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	3332      	adds	r3, #50	; 0x32
 80045a2:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <UART_SetConfig+0x2d4>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	f003 0207 	and.w	r2, r3, #7
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4422      	add	r2, r4
 80045b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045b8:	e105      	b.n	80047c6 <UART_SetConfig+0x4d6>
 80045ba:	bf00      	nop
 80045bc:	40011000 	.word	0x40011000
 80045c0:	40011400 	.word	0x40011400
 80045c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045da:	4642      	mov	r2, r8
 80045dc:	464b      	mov	r3, r9
 80045de:	1891      	adds	r1, r2, r2
 80045e0:	6239      	str	r1, [r7, #32]
 80045e2:	415b      	adcs	r3, r3
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ea:	4641      	mov	r1, r8
 80045ec:	1854      	adds	r4, r2, r1
 80045ee:	4649      	mov	r1, r9
 80045f0:	eb43 0501 	adc.w	r5, r3, r1
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4643      	mov	r3, r8
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004610:	464b      	mov	r3, r9
 8004612:	eb45 0303 	adc.w	r3, r5, r3
 8004616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004636:	4629      	mov	r1, r5
 8004638:	008b      	lsls	r3, r1, #2
 800463a:	4621      	mov	r1, r4
 800463c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004640:	4621      	mov	r1, r4
 8004642:	008a      	lsls	r2, r1, #2
 8004644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004648:	f7fb ffca 	bl	80005e0 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4b60      	ldr	r3, [pc, #384]	; (80047d4 <UART_SetConfig+0x4e4>)
 8004652:	fba3 2302 	umull	r2, r3, r3, r2
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	011c      	lsls	r4, r3, #4
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004664:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	1891      	adds	r1, r2, r2
 8004672:	61b9      	str	r1, [r7, #24]
 8004674:	415b      	adcs	r3, r3
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	4641      	mov	r1, r8
 800467e:	1851      	adds	r1, r2, r1
 8004680:	6139      	str	r1, [r7, #16]
 8004682:	4649      	mov	r1, r9
 8004684:	414b      	adcs	r3, r1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004694:	4659      	mov	r1, fp
 8004696:	00cb      	lsls	r3, r1, #3
 8004698:	4651      	mov	r1, sl
 800469a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469e:	4651      	mov	r1, sl
 80046a0:	00ca      	lsls	r2, r1, #3
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	4642      	mov	r2, r8
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b0:	464b      	mov	r3, r9
 80046b2:	460a      	mov	r2, r1
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d4:	4649      	mov	r1, r9
 80046d6:	008b      	lsls	r3, r1, #2
 80046d8:	4641      	mov	r1, r8
 80046da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046de:	4641      	mov	r1, r8
 80046e0:	008a      	lsls	r2, r1, #2
 80046e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046e6:	f7fb ff7b 	bl	80005e0 <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <UART_SetConfig+0x4e4>)
 80046f0:	fba3 1302 	umull	r1, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	2164      	movs	r1, #100	; 0x64
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	3332      	adds	r3, #50	; 0x32
 8004702:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <UART_SetConfig+0x4e4>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800470e:	441c      	add	r4, r3
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	673b      	str	r3, [r7, #112]	; 0x70
 8004718:	677a      	str	r2, [r7, #116]	; 0x74
 800471a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	1891      	adds	r1, r2, r2
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	415b      	adcs	r3, r3
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472e:	4641      	mov	r1, r8
 8004730:	1851      	adds	r1, r2, r1
 8004732:	6039      	str	r1, [r7, #0]
 8004734:	4649      	mov	r1, r9
 8004736:	414b      	adcs	r3, r1
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004746:	4659      	mov	r1, fp
 8004748:	00cb      	lsls	r3, r1, #3
 800474a:	4651      	mov	r1, sl
 800474c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004750:	4651      	mov	r1, sl
 8004752:	00ca      	lsls	r2, r1, #3
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	4603      	mov	r3, r0
 800475a:	4642      	mov	r2, r8
 800475c:	189b      	adds	r3, r3, r2
 800475e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	663b      	str	r3, [r7, #96]	; 0x60
 8004774:	667a      	str	r2, [r7, #100]	; 0x64
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004782:	4649      	mov	r1, r9
 8004784:	008b      	lsls	r3, r1, #2
 8004786:	4641      	mov	r1, r8
 8004788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478c:	4641      	mov	r1, r8
 800478e:	008a      	lsls	r2, r1, #2
 8004790:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004794:	f7fb ff24 	bl	80005e0 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <UART_SetConfig+0x4e4>)
 800479e:	fba3 1302 	umull	r1, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	2164      	movs	r1, #100	; 0x64
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	3332      	adds	r3, #50	; 0x32
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <UART_SetConfig+0x4e4>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	f003 020f 	and.w	r2, r3, #15
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4422      	add	r2, r4
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	bf00      	nop
 80047c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d2:	bf00      	nop
 80047d4:	51eb851f 	.word	0x51eb851f

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	; (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	; (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	; (800481c <__libc_init_array+0x44>)
 80047ec:	f000 f820 	bl	8004830 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	08004868 	.word	0x08004868
 8004814:	08004868 	.word	0x08004868
 8004818:	08004868 	.word	0x08004868
 800481c:	0800486c 	.word	0x0800486c

08004820 <memset>:
 8004820:	4402      	add	r2, r0
 8004822:	4603      	mov	r3, r0
 8004824:	4293      	cmp	r3, r2
 8004826:	d100      	bne.n	800482a <memset+0xa>
 8004828:	4770      	bx	lr
 800482a:	f803 1b01 	strb.w	r1, [r3], #1
 800482e:	e7f9      	b.n	8004824 <memset+0x4>

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
