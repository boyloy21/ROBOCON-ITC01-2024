
joystick_controller2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005eec  08005eec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eec  08005eec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ef4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000078  08005f6c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08005f6c  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f34  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4b  00000000  00000000  00032fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00035f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000370c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199d3  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a7e  00000000  00000000  00051ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090421  00000000  00000000  00066561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  000f69d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e1c 	.word	0x08005e1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005e1c 	.word	0x08005e1c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <JoyStick_Init>:
static ADC_HandleTypeDef hadc[JOYSTICK_UNITS] = {0};
static ADC_ChannelConfTypeDef sConfig = {0};
static uint8_t calibrated = 0;

void JoyStick_Init(uint16_t JoyStick_Instance)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]

	if(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOA || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOA)
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	49a6      	ldr	r1, [pc, #664]	; (8000a34 <JoyStick_Init+0x2b4>)
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4aa3      	ldr	r2, [pc, #652]	; (8000a38 <JoyStick_Init+0x2b8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d00b      	beq.n	80007c6 <JoyStick_Init+0x46>
 80007ae:	88fa      	ldrh	r2, [r7, #6]
 80007b0:	49a0      	ldr	r1, [pc, #640]	; (8000a34 <JoyStick_Init+0x2b4>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	440b      	add	r3, r1
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a9d      	ldr	r2, [pc, #628]	; (8000a38 <JoyStick_Init+0x2b8>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d10c      	bne.n	80007e0 <JoyStick_Init+0x60>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b9d      	ldr	r3, [pc, #628]	; (8000a3c <JoyStick_Init+0x2bc>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a9c      	ldr	r2, [pc, #624]	; (8000a3c <JoyStick_Init+0x2bc>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b9a      	ldr	r3, [pc, #616]	; (8000a3c <JoyStick_Init+0x2bc>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	e06a      	b.n	80008b6 <JoyStick_Init+0x136>
	}
	else if(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOB || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOB)
 80007e0:	88fa      	ldrh	r2, [r7, #6]
 80007e2:	4994      	ldr	r1, [pc, #592]	; (8000a34 <JoyStick_Init+0x2b4>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	440b      	add	r3, r1
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <JoyStick_Init+0x2c0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d00b      	beq.n	800080e <JoyStick_Init+0x8e>
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	498e      	ldr	r1, [pc, #568]	; (8000a34 <JoyStick_Init+0x2b4>)
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	440b      	add	r3, r1
 8000804:	3304      	adds	r3, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a8d      	ldr	r2, [pc, #564]	; (8000a40 <JoyStick_Init+0x2c0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10c      	bne.n	8000828 <JoyStick_Init+0xa8>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b8b      	ldr	r3, [pc, #556]	; (8000a3c <JoyStick_Init+0x2bc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a8a      	ldr	r2, [pc, #552]	; (8000a3c <JoyStick_Init+0x2bc>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b88      	ldr	r3, [pc, #544]	; (8000a3c <JoyStick_Init+0x2bc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	e046      	b.n	80008b6 <JoyStick_Init+0x136>
	}
	else if(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOC || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOC)
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	4982      	ldr	r1, [pc, #520]	; (8000a34 <JoyStick_Init+0x2b4>)
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	440b      	add	r3, r1
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a82      	ldr	r2, [pc, #520]	; (8000a44 <JoyStick_Init+0x2c4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d00b      	beq.n	8000856 <JoyStick_Init+0xd6>
 800083e:	88fa      	ldrh	r2, [r7, #6]
 8000840:	497c      	ldr	r1, [pc, #496]	; (8000a34 <JoyStick_Init+0x2b4>)
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	3304      	adds	r3, #4
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7c      	ldr	r2, [pc, #496]	; (8000a44 <JoyStick_Init+0x2c4>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d10c      	bne.n	8000870 <JoyStick_Init+0xf0>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b79      	ldr	r3, [pc, #484]	; (8000a3c <JoyStick_Init+0x2bc>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a78      	ldr	r2, [pc, #480]	; (8000a3c <JoyStick_Init+0x2bc>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b76      	ldr	r3, [pc, #472]	; (8000a3c <JoyStick_Init+0x2bc>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	e022      	b.n	80008b6 <JoyStick_Init+0x136>
	}
	else if (JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOD || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOD)
 8000870:	88fa      	ldrh	r2, [r7, #6]
 8000872:	4970      	ldr	r1, [pc, #448]	; (8000a34 <JoyStick_Init+0x2b4>)
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a71      	ldr	r2, [pc, #452]	; (8000a48 <JoyStick_Init+0x2c8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d00b      	beq.n	800089e <JoyStick_Init+0x11e>
 8000886:	88fa      	ldrh	r2, [r7, #6]
 8000888:	496a      	ldr	r1, [pc, #424]	; (8000a34 <JoyStick_Init+0x2b4>)
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	440b      	add	r3, r1
 8000894:	3304      	adds	r3, #4
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a6b      	ldr	r2, [pc, #428]	; (8000a48 <JoyStick_Init+0x2c8>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d10b      	bne.n	80008b6 <JoyStick_Init+0x136>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b67      	ldr	r3, [pc, #412]	; (8000a3c <JoyStick_Init+0x2bc>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a66      	ldr	r2, [pc, #408]	; (8000a3c <JoyStick_Init+0x2bc>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b64      	ldr	r3, [pc, #400]	; (8000a3c <JoyStick_Init+0x2bc>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
//	else if (JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO == GPIOE || JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO == GPIOE)
//	{
//		__HAL_RCC_GPIOD_CLK_ENABLE();
//	}

	GPIO_InitStruct.Pin = JoyStick_CfgParam[JoyStick_Instance].JoyStick_xPIN;
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	495e      	ldr	r1, [pc, #376]	; (8000a34 <JoyStick_Init+0x2b4>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	3308      	adds	r3, #8
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(JoyStick_CfgParam[JoyStick_Instance].JoyStick_xGPIO, &GPIO_InitStruct);
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	4958      	ldr	r1, [pc, #352]	; (8000a34 <JoyStick_Init+0x2b4>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f107 0218 	add.w	r2, r7, #24
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fc77 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JoyStick_CfgParam[JoyStick_Instance].JoyStick_yPIN;
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	4951      	ldr	r1, [pc, #324]	; (8000a34 <JoyStick_Init+0x2b4>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	330a      	adds	r3, #10
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(JoyStick_CfgParam[JoyStick_Instance].JoyStick_yGPIO, &GPIO_InitStruct);
 8000902:	88fa      	ldrh	r2, [r7, #6]
 8000904:	494b      	ldr	r1, [pc, #300]	; (8000a34 <JoyStick_Init+0x2b4>)
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	3304      	adds	r3, #4
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f107 0218 	add.w	r2, r7, #24
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fc5c 	bl	80031d8 <HAL_GPIO_Init>

	hadc[JoyStick_Instance].Instance = JoyStick_CfgParam[JoyStick_Instance].ADC_Instance;
 8000920:	88f9      	ldrh	r1, [r7, #6]
 8000922:	88fa      	ldrh	r2, [r7, #6]
 8000924:	4843      	ldr	r0, [pc, #268]	; (8000a34 <JoyStick_Init+0x2b4>)
 8000926:	460b      	mov	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	440b      	add	r3, r1
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4403      	add	r3, r0
 8000930:	330c      	adds	r3, #12
 8000932:	6819      	ldr	r1, [r3, #0]
 8000934:	4845      	ldr	r0, [pc, #276]	; (8000a4c <JoyStick_Init+0x2cc>)
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	4403      	add	r3, r0
 8000940:	6019      	str	r1, [r3, #0]
	hadc[JoyStick_Instance].Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	88fa      	ldrh	r2, [r7, #6]
 8000944:	4941      	ldr	r1, [pc, #260]	; (8000a4c <JoyStick_Init+0x2cc>)
 8000946:	4613      	mov	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4413      	add	r3, r2
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	440b      	add	r3, r1
 8000950:	3308      	adds	r3, #8
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.ContinuousConvMode = DISABLE;
 8000956:	88fa      	ldrh	r2, [r7, #6]
 8000958:	493c      	ldr	r1, [pc, #240]	; (8000a4c <JoyStick_Init+0x2cc>)
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	440b      	add	r3, r1
 8000964:	330c      	adds	r3, #12
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.DiscontinuousConvMode = DISABLE;
 800096a:	88fa      	ldrh	r2, [r7, #6]
 800096c:	4937      	ldr	r1, [pc, #220]	; (8000a4c <JoyStick_Init+0x2cc>)
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	440b      	add	r3, r1
 8000978:	3314      	adds	r3, #20
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	4932      	ldr	r1, [pc, #200]	; (8000a4c <JoyStick_Init+0x2cc>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	440b      	add	r3, r1
 800098c:	331c      	adds	r3, #28
 800098e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000992:	601a      	str	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	492d      	ldr	r1, [pc, #180]	; (8000a4c <JoyStick_Init+0x2cc>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	440b      	add	r3, r1
 80009a2:	3304      	adds	r3, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
	hadc[JoyStick_Instance].Init.NbrOfConversion = 1;
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4928      	ldr	r1, [pc, #160]	; (8000a4c <JoyStick_Init+0x2cc>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	440b      	add	r3, r1
 80009b6:	3310      	adds	r3, #16
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
	HAL_ADC_Init(&hadc[JoyStick_Instance]);
 80009bc:	88fa      	ldrh	r2, [r7, #6]
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <JoyStick_Init+0x2cc>)
 80009c8:	4413      	add	r3, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fe1c 	bl	8002608 <HAL_ADC_Init>
    sConfig.Channel = JoyStick_CfgParam[JoyStick_Instance].ADCx_CH;
 80009d0:	88fa      	ldrh	r2, [r7, #6]
 80009d2:	4918      	ldr	r1, [pc, #96]	; (8000a34 <JoyStick_Init+0x2b4>)
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	440b      	add	r3, r1
 80009de:	3310      	adds	r3, #16
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <JoyStick_Init+0x2d0>)
 80009e4:	6013      	str	r3, [r2, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <JoyStick_Init+0x2d0>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <JoyStick_Init+0x2d0>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc[JoyStick_Instance], &sConfig);
 80009f2:	88fa      	ldrh	r2, [r7, #6]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <JoyStick_Init+0x2cc>)
 80009fe:	4413      	add	r3, r2
 8000a00:	4913      	ldr	r1, [pc, #76]	; (8000a50 <JoyStick_Init+0x2d0>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 f898 	bl	8002b38 <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <JoyStick_Init+0x2d4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10c      	bne.n	8000a2a <JoyStick_Init+0x2aa>
	{
		HAL_ADCEx_Calibration_Start(&hadc[JoyStick_Instance]);
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <JoyStick_Init+0x2cc>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fa1e 	bl	8002e60 <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <JoyStick_Init+0x2d4>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	08005e48 	.word	0x08005e48
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010c00 	.word	0x40010c00
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40011400 	.word	0x40011400
 8000a4c:	20000094 	.word	0x20000094
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	20000100 	.word	0x20000100

08000a58 <JoyStick_Read>:


void JoyStick_Read(uint16_t JoyStick_Instance, uint16_t* JoyStick_XY)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	80fb      	strh	r3, [r7, #6]
	uint32_t AD_RES;

	// Select The JoyStick Instance ADC Channel For X
	sConfig.Channel = JoyStick_CfgParam[JoyStick_Instance].ADCx_CH;
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	493c      	ldr	r1, [pc, #240]	; (8000b58 <JoyStick_Read+0x100>)
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	440b      	add	r3, r1
 8000a72:	3310      	adds	r3, #16
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <JoyStick_Read+0x104>)
 8000a78:	6013      	str	r3, [r2, #0]
    HAL_ADC_ConfigChannel(&hadc[JoyStick_Instance], &sConfig);
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	4a36      	ldr	r2, [pc, #216]	; (8000b60 <JoyStick_Read+0x108>)
 8000a86:	4413      	add	r3, r2
 8000a88:	4934      	ldr	r1, [pc, #208]	; (8000b5c <JoyStick_Read+0x104>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f854 	bl	8002b38 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc[JoyStick_Instance]);
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	4a31      	ldr	r2, [pc, #196]	; (8000b60 <JoyStick_Read+0x108>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fe8a 	bl	80027b8 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc[JoyStick_Instance], 1);
 8000aa4:	88fa      	ldrh	r2, [r7, #6]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <JoyStick_Read+0x108>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 ff2d 	bl	8002914 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick X
	AD_RES = HAL_ADC_GetValue(&hadc[JoyStick_Instance]);
 8000aba:	88fa      	ldrh	r2, [r7, #6]
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <JoyStick_Read+0x108>)
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 f829 	bl	8002b20 <HAL_ADC_GetValue>
 8000ace:	60f8      	str	r0, [r7, #12]
	JoyStick_XY[0] = AD_RES;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	801a      	strh	r2, [r3, #0]

	// Select The JoyStick Instance ADC Channel For Y
	sConfig.Channel = JoyStick_CfgParam[JoyStick_Instance].ADCy_CH;
 8000ad8:	88fa      	ldrh	r2, [r7, #6]
 8000ada:	491f      	ldr	r1, [pc, #124]	; (8000b58 <JoyStick_Read+0x100>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3314      	adds	r3, #20
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <JoyStick_Read+0x104>)
 8000aec:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc[JoyStick_Instance], &sConfig);
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <JoyStick_Read+0x108>)
 8000afa:	4413      	add	r3, r2
 8000afc:	4917      	ldr	r1, [pc, #92]	; (8000b5c <JoyStick_Read+0x104>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 f81a 	bl	8002b38 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc[JoyStick_Instance]);
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <JoyStick_Read+0x108>)
 8000b10:	4413      	add	r3, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fe50 	bl	80027b8 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc[JoyStick_Instance], 1);
 8000b18:	88fa      	ldrh	r2, [r7, #6]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <JoyStick_Read+0x108>)
 8000b24:	4413      	add	r3, r2
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fef3 	bl	8002914 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick Y
	AD_RES = HAL_ADC_GetValue(&hadc[JoyStick_Instance]);
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <JoyStick_Read+0x108>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 ffef 	bl	8002b20 <HAL_ADC_GetValue>
 8000b42:	60f8      	str	r0, [r7, #12]
	JoyStick_XY[1] = AD_RES;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	3302      	adds	r3, #2
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	b292      	uxth	r2, r2
 8000b4c:	801a      	strh	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08005e48 	.word	0x08005e48
 8000b5c:	200000f4 	.word	0x200000f4
 8000b60:	20000094 	.word	0x20000094

08000b64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x98>)
 8000b78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b90:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000ba4:	f001 fd30 	bl	8002608 <HAL_ADC_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bae:	f000 fcf9 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000bc4:	f001 ffb8 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bce:	f000 fce9 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_ADC1_Init+0x94>)
 8000be0:	f001 ffaa 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bea:	f000 fcdb 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000104 	.word	0x20000104
 8000bfc:	40012400 	.word	0x40012400

08000c00 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c12:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <MX_ADC2_Init+0x98>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c2c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c30:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 2;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c40:	f001 fce2 	bl	8002608 <HAL_ADC_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000c4a:	f000 fcab 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c60:	f001 ff6a 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 fc9b 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_ADC2_Init+0x94>)
 8000c7c:	f001 ff5c 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000c86:	f000 fc8d 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000134 	.word	0x20000134
 8000c98:	40012800 	.word	0x40012800

08000c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <HAL_ADC_MspInit+0xbc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d122      	bne.n	8000d02 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a26      	ldr	r2, [pc, #152]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cec:	230c      	movs	r3, #12
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <HAL_ADC_MspInit+0xc4>)
 8000cfc:	f002 fa6c 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d00:	e026      	b.n	8000d50 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_ADC_MspInit+0xc8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d121      	bne.n	8000d50 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_ADC_MspInit+0xc0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_ADC_MspInit+0xc4>)
 8000d4c:	f002 fa44 	bl	80031d8 <HAL_GPIO_Init>
}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40012400 	.word	0x40012400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40012800 	.word	0x40012800

08000d68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4b40      	ldr	r3, [pc, #256]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a3f      	ldr	r2, [pc, #252]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a39      	ldr	r2, [pc, #228]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <MX_GPIO_Init+0x118>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4828      	ldr	r0, [pc, #160]	; (8000e84 <MX_GPIO_Init+0x11c>)
 8000de2:	f002 fb8c 	bl	80034fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2101      	movs	r1, #1
 8000dea:	4827      	ldr	r0, [pc, #156]	; (8000e88 <MX_GPIO_Init+0x120>)
 8000dec:	f002 fb87 	bl	80034fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Back_rice_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Back_rice_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_GPIO_Init+0x124>)
 8000e06:	f002 f9e7 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <MX_GPIO_Init+0x11c>)
 8000e22:	f002 f9d9 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000e26:	2301      	movs	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <MX_GPIO_Init+0x120>)
 8000e3e:	f002 f9cb 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SMR_Pin|Front_rice_Pin|SML_Pin|Button3_L_Pin
 8000e42:	f644 537a 	movw	r3, #19834	; 0x4d7a
 8000e46:	613b      	str	r3, [r7, #16]
                          |Mode_Pin|Drop_rice_Pin|Take_rice_Pin|Speed_Pin
                          |Shooter_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_GPIO_Init+0x120>)
 8000e58:	f002 f9be 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_GPIO_Init+0x11c>)
 8000e72:	f002 f9b1 	bl	80031d8 <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40011000 	.word	0x40011000

08000e90 <map>:
long Map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
}

float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff f957 	bl	8000154 <__aeabi_fsub>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461c      	mov	r4, r3
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	6a38      	ldr	r0, [r7, #32]
 8000eae:	f7ff f951 	bl	8000154 <__aeabi_fsub>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff fa56 	bl	8000368 <__aeabi_fmul>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461c      	mov	r4, r3
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff f946 	bl	8000154 <__aeabi_fsub>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f7ff faff 	bl	80004d0 <__aeabi_fdiv>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6839      	ldr	r1, [r7, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f93e 	bl	8000158 <__addsf3>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
	...

08000ee8 <TransferMode>:
//		myRxData[32 + 1] = '\n';
//
//	}
//}

void TransferMode(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	; 0x50
 8000eec:	af00      	add	r7, sp, #0
	//-----------------------------Tx-setting----------------------------
	//get_input();
	NRF24_stopListening();
 8000eee:	f000 fda9 	bl	8001a44 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <TransferMode+0x60>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f000 fe22 	bl	8001b44 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 fee1 	bl	8001cc8 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8000f06:	2034      	movs	r0, #52	; 0x34
 8000f08:	f000 fe5b 	bl	8001bc2 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 fe6d 	bl	8001bec <NRF24_setPayloadSize>
	NRF24_enableAckPayload();
 8000f12:	f000 fe93 	bl	8001c3c <NRF24_enableAckPayload>

	if (NRF24_write(myTxData, 32)) {
 8000f16:	2120      	movs	r1, #32
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <TransferMode+0x64>)
 8000f1a:	f000 fd9f 	bl	8001a5c <NRF24_write>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00c      	beq.n	8000f3e <TransferMode+0x56>
		NRF24_read(AckPayload, 32);
 8000f24:	2120      	movs	r1, #32
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <TransferMode+0x68>)
 8000f28:	f000 fdec 	bl	8001b04 <NRF24_read>
		//print("Transmitted Successfully\r\n");

		char myDataack[80];
		sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <TransferMode+0x68>)
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <TransferMode+0x6c>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 fb06 	bl	8005544 <siprintf>
		//print(myDataack);
		flag = 0;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <TransferMode+0x70>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
	}
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	; 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000168 	.word	0x20000168
 8000f50:	20000188 	.word	0x20000188
 8000f54:	08005e34 	.word	0x08005e34
 8000f58:	20000164 	.word	0x20000164

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	; 0x58
 8000f60:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f001 facb 	bl	80024fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f9ff 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f7ff fefd 	bl	8000d68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6e:	f7ff fdf9 	bl	8000b64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f72:	f7ff fe45 	bl	8000c00 <MX_ADC2_Init>
  MX_SPI1_Init();
 8000f76:	f001 f821 	bl	8001fbc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f7a:	f001 fa23 	bl	80023c4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f7e:	f001 f993 	bl	80022a8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f82:	f001 f945 	bl	8002210 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //-----------------------------nrf-startup----------------------------------
    NRF24_begin(GPIOA, GPIOB, GPIO_PIN_4, GPIO_PIN_0, hspi1);
 8000f86:	4aa0      	ldr	r2, [pc, #640]	; (8001208 <main+0x2ac>)
 8000f88:	466b      	mov	r3, sp
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	2258      	movs	r2, #88	; 0x58
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fac2 	bl	8005518 <memcpy>
 8000f94:	2301      	movs	r3, #1
 8000f96:	2210      	movs	r2, #16
 8000f98:	499c      	ldr	r1, [pc, #624]	; (800120c <main+0x2b0>)
 8000f9a:	489d      	ldr	r0, [pc, #628]	; (8001210 <main+0x2b4>)
 8000f9c:	f000 fc72 	bl	8001884 <NRF24_begin>
//      	NRF24_openReadingPipe(1, RxpipeAddrs);
//      	NRF24_enableDynamicPayloads();
//      	NRF24_enableAckPayload();
//      	NRF24_startListening();
  // Joystick
    JoyStick_Init(JoyStick1);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fbed 	bl	8000780 <JoyStick_Init>
    JoyStick_Init(JoyStick2);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff fbea 	bl	8000780 <JoyStick_Init>
   // TiM 10ms
    HAL_TIM_Base_Start_IT(&htim2);
 8000fac:	4899      	ldr	r0, [pc, #612]	; (8001214 <main+0x2b8>)
 8000fae:	f003 fe13 	bl	8004bd8 <HAL_TIM_Base_Start_IT>
	  //** Potentiometer **//
//	  HAL_ADC_PollForConversion(&hadc1,2);
//	  read = HAL_ADC_GetValue(&hadc1);
//	  deg = map(read,0,4096,0,255);
	  //*** Joystick ***/
	  JoyStick_Read(JoyStick1, JoyStick1_XY);
 8000fb2:	4999      	ldr	r1, [pc, #612]	; (8001218 <main+0x2bc>)
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fd4f 	bl	8000a58 <JoyStick_Read>
	  JoyStick_Read(JoyStick2, JoyStick2_XY);
 8000fba:	4998      	ldr	r1, [pc, #608]	; (800121c <main+0x2c0>)
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fd4b 	bl	8000a58 <JoyStick_Read>
		XR = map(JoyStick1_XY[0], 0, 4096, -10, 10);
 8000fc2:	4b95      	ldr	r3, [pc, #596]	; (8001218 <main+0x2bc>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f976 	bl	80002b8 <__aeabi_ui2f>
 8000fcc:	4b94      	ldr	r3, [pc, #592]	; (8001220 <main+0x2c4>)
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	4b94      	ldr	r3, [pc, #592]	; (8001224 <main+0x2c8>)
 8000fd2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000fd6:	f04f 0100 	mov.w	r1, #0
 8000fda:	f7ff ff59 	bl	8000e90 <map>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fb87 	bl	80006f4 <__aeabi_f2iz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a8f      	ldr	r2, [pc, #572]	; (8001228 <main+0x2cc>)
 8000fea:	6013      	str	r3, [r2, #0]
		YR = map(JoyStick1_XY[1], 0, 4096, -10, 10);
 8000fec:	4b8a      	ldr	r3, [pc, #552]	; (8001218 <main+0x2bc>)
 8000fee:	885b      	ldrh	r3, [r3, #2]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f961 	bl	80002b8 <__aeabi_ui2f>
 8000ff6:	4b8a      	ldr	r3, [pc, #552]	; (8001220 <main+0x2c4>)
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4b8a      	ldr	r3, [pc, #552]	; (8001224 <main+0x2c8>)
 8000ffc:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001000:	f04f 0100 	mov.w	r1, #0
 8001004:	f7ff ff44 	bl	8000e90 <map>
 8001008:	4603      	mov	r3, r0
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fb72 	bl	80006f4 <__aeabi_f2iz>
 8001010:	4603      	mov	r3, r0
 8001012:	4a86      	ldr	r2, [pc, #536]	; (800122c <main+0x2d0>)
 8001014:	6013      	str	r3, [r2, #0]
		XL = map(JoyStick2_XY[0], 0, 4096, -10, 10);
 8001016:	4b81      	ldr	r3, [pc, #516]	; (800121c <main+0x2c0>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f94c 	bl	80002b8 <__aeabi_ui2f>
 8001020:	4b7f      	ldr	r3, [pc, #508]	; (8001220 <main+0x2c4>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <main+0x2c8>)
 8001026:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800102a:	f04f 0100 	mov.w	r1, #0
 800102e:	f7ff ff2f 	bl	8000e90 <map>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fb5d 	bl	80006f4 <__aeabi_f2iz>
 800103a:	4603      	mov	r3, r0
 800103c:	4a7c      	ldr	r2, [pc, #496]	; (8001230 <main+0x2d4>)
 800103e:	6013      	str	r3, [r2, #0]
		YL = map(JoyStick2_XY[1], 0, 4096, -10, 10);
 8001040:	4b76      	ldr	r3, [pc, #472]	; (800121c <main+0x2c0>)
 8001042:	885b      	ldrh	r3, [r3, #2]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f937 	bl	80002b8 <__aeabi_ui2f>
 800104a:	4b75      	ldr	r3, [pc, #468]	; (8001220 <main+0x2c4>)
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4b75      	ldr	r3, [pc, #468]	; (8001224 <main+0x2c8>)
 8001050:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	f7ff ff1a 	bl	8000e90 <map>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fb48 	bl	80006f4 <__aeabi_f2iz>
 8001064:	4603      	mov	r3, r0
 8001066:	4a73      	ldr	r2, [pc, #460]	; (8001234 <main+0x2d8>)
 8001068:	6013      	str	r3, [r2, #0]

		if (XL >= 9 && YL == 0) {
 800106a:	4b71      	ldr	r3, [pc, #452]	; (8001230 <main+0x2d4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b08      	cmp	r3, #8
 8001070:	dd0a      	ble.n	8001088 <main+0x12c>
 8001072:	4b70      	ldr	r3, [pc, #448]	; (8001234 <main+0x2d8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <main+0x12c>
			Vx = 20;
 800107a:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <main+0x2dc>)
 800107c:	2214      	movs	r2, #20
 800107e:	701a      	strb	r2, [r3, #0]
			Vy = 0;
 8001080:	4b6e      	ldr	r3, [pc, #440]	; (800123c <main+0x2e0>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e084      	b.n	8001192 <main+0x236>

		} else if (XL <= -9 && YL == 0) //Linear Velocity -X
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <main+0x2d4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f113 0f08 	cmn.w	r3, #8
 8001090:	da0a      	bge.n	80010a8 <main+0x14c>
 8001092:	4b68      	ldr	r3, [pc, #416]	; (8001234 <main+0x2d8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <main+0x14c>
				{
			Vx = 10;
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <main+0x2dc>)
 800109c:	220a      	movs	r2, #10
 800109e:	701a      	strb	r2, [r3, #0]
			Vy = 0;
 80010a0:	4b66      	ldr	r3, [pc, #408]	; (800123c <main+0x2e0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e074      	b.n	8001192 <main+0x236>

		} else if (YL >= 9 && XL == 0) //Angular Velocity +Y
 80010a8:	4b62      	ldr	r3, [pc, #392]	; (8001234 <main+0x2d8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	dd0a      	ble.n	80010c6 <main+0x16a>
 80010b0:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <main+0x2d4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <main+0x16a>
				{
			Vx = 0;
 80010b8:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <main+0x2dc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
			Vy = 20;
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <main+0x2e0>)
 80010c0:	2214      	movs	r2, #20
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e065      	b.n	8001192 <main+0x236>

		} else if (YL <= -9 && XL == 0) //Angular Velocity -Y
 80010c6:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <main+0x2d8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f113 0f08 	cmn.w	r3, #8
 80010ce:	da0a      	bge.n	80010e6 <main+0x18a>
 80010d0:	4b57      	ldr	r3, [pc, #348]	; (8001230 <main+0x2d4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <main+0x18a>
				{
			Vx = 0;
 80010d8:	4b57      	ldr	r3, [pc, #348]	; (8001238 <main+0x2dc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
			Vy = 10;
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <main+0x2e0>)
 80010e0:	220a      	movs	r2, #10
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e055      	b.n	8001192 <main+0x236>

		} else if (XL >= 9 && YL >= 9) //Rotate Forward wheel_L
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <main+0x2d4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	dd0a      	ble.n	8001104 <main+0x1a8>
 80010ee:	4b51      	ldr	r3, [pc, #324]	; (8001234 <main+0x2d8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	dd06      	ble.n	8001104 <main+0x1a8>
				{
			Vx = 20;
 80010f6:	4b50      	ldr	r3, [pc, #320]	; (8001238 <main+0x2dc>)
 80010f8:	2214      	movs	r2, #20
 80010fa:	701a      	strb	r2, [r3, #0]
			Vy = 20;
 80010fc:	4b4f      	ldr	r3, [pc, #316]	; (800123c <main+0x2e0>)
 80010fe:	2214      	movs	r2, #20
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e046      	b.n	8001192 <main+0x236>

		} else if (XL >= 9 && YL <= -9) //Rotate Forward wheel_R
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <main+0x2d4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b08      	cmp	r3, #8
 800110a:	dd0b      	ble.n	8001124 <main+0x1c8>
 800110c:	4b49      	ldr	r3, [pc, #292]	; (8001234 <main+0x2d8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f113 0f08 	cmn.w	r3, #8
 8001114:	da06      	bge.n	8001124 <main+0x1c8>
				{
			Vx = 20;
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <main+0x2dc>)
 8001118:	2214      	movs	r2, #20
 800111a:	701a      	strb	r2, [r3, #0]
			Vy = 10;
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <main+0x2e0>)
 800111e:	220a      	movs	r2, #10
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e036      	b.n	8001192 <main+0x236>

		} else if (XL <= -9 && YL <= -9) //Rotate Backward  Wheel_R
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <main+0x2d4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f113 0f08 	cmn.w	r3, #8
 800112c:	da0b      	bge.n	8001146 <main+0x1ea>
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <main+0x2d8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f113 0f08 	cmn.w	r3, #8
 8001136:	da06      	bge.n	8001146 <main+0x1ea>
				{
			Vx = 10;
 8001138:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <main+0x2dc>)
 800113a:	220a      	movs	r2, #10
 800113c:	701a      	strb	r2, [r3, #0]
			Vy = 10;
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <main+0x2e0>)
 8001140:	220a      	movs	r2, #10
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e025      	b.n	8001192 <main+0x236>
		} else if (XL <= -9 && YL >= 9) //Rotate Backward Wheel_L
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <main+0x2d4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f113 0f08 	cmn.w	r3, #8
 800114e:	da0a      	bge.n	8001166 <main+0x20a>
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <main+0x2d8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b08      	cmp	r3, #8
 8001156:	dd06      	ble.n	8001166 <main+0x20a>
				{
			Vx = 10;
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <main+0x2dc>)
 800115a:	220a      	movs	r2, #10
 800115c:	701a      	strb	r2, [r3, #0]
			Vy = 20;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <main+0x2e0>)
 8001160:	2214      	movs	r2, #20
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e015      	b.n	8001192 <main+0x236>
		} else if ((XL < 1 && XL > -1) && (YL < 1 && YL > -1)) //Stop
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <main+0x2d4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dc11      	bgt.n	8001192 <main+0x236>
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <main+0x2d4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0d      	blt.n	8001192 <main+0x236>
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <main+0x2d8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	dc09      	bgt.n	8001192 <main+0x236>
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <main+0x2d8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db05      	blt.n	8001192 <main+0x236>
				{
			Vx = 0;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <main+0x2dc>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
			Vy = 0;
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <main+0x2e0>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
		}

		if (YR >= 9)
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <main+0x2d0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b08      	cmp	r3, #8
 8001198:	dd03      	ble.n	80011a2 <main+0x246>
		{
			Vz = 20;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <main+0x2e4>)
 800119c:	2214      	movs	r2, #20
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e00f      	b.n	80011c2 <main+0x266>
		}
		else if (YR <= -9)
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <main+0x2d0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f113 0f08 	cmn.w	r3, #8
 80011aa:	da03      	bge.n	80011b4 <main+0x258>
		{
			Vz = 10;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <main+0x2e4>)
 80011ae:	220a      	movs	r2, #10
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e006      	b.n	80011c2 <main+0x266>
		}
		else if (YR == 0)
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <main+0x2d0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <main+0x266>
		{
			Vz = 0;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <main+0x2e4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
		}

		//******** Auto ***********//
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 80011c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <main+0x2b0>)
 80011c8:	f002 f982 	bl	80034d0 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <main+0x27e>
				{
			Stepper = 10; // goal 1
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <main+0x2e8>)
 80011d4:	220a      	movs	r2, #10
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e066      	b.n	80012a8 <main+0x34c>
		}
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)) {
 80011da:	2102      	movs	r1, #2
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <main+0x2b0>)
 80011de:	f002 f977 	bl	80034d0 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <main+0x294>
			Stepper = 20; // goal 2
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <main+0x2e8>)
 80011ea:	2214      	movs	r2, #20
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e05b      	b.n	80012a8 <main+0x34c>
		}
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)){
 80011f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <main+0x2b0>)
 80011f6:	f002 f96b 	bl	80034d0 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d025      	beq.n	800124c <main+0x2f0>
			PushRice = 10;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <main+0x2ec>)
 8001202:	220a      	movs	r2, #10
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e04f      	b.n	80012a8 <main+0x34c>
 8001208:	20000258 	.word	0x20000258
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40010800 	.word	0x40010800
 8001214:	200002b4 	.word	0x200002b4
 8001218:	200001a8 	.word	0x200001a8
 800121c:	200001ac 	.word	0x200001ac
 8001220:	41200000 	.word	0x41200000
 8001224:	c1200000 	.word	0xc1200000
 8001228:	200001b8 	.word	0x200001b8
 800122c:	200001bc 	.word	0x200001bc
 8001230:	200001b0 	.word	0x200001b0
 8001234:	200001b4 	.word	0x200001b4
 8001238:	200001c1 	.word	0x200001c1
 800123c:	200001c2 	.word	0x200001c2
 8001240:	200001c3 	.word	0x200001c3
 8001244:	200001e0 	.word	0x200001e0
 8001248:	200001e4 	.word	0x200001e4
		}
		else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001250:	4836      	ldr	r0, [pc, #216]	; (800132c <main+0x3d0>)
 8001252:	f002 f93d 	bl	80034d0 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <main+0x308>
			PushRice = 20;
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <main+0x3d4>)
 800125e:	2214      	movs	r2, #20
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e021      	b.n	80012a8 <main+0x34c>
		}
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8001264:	2108      	movs	r1, #8
 8001266:	4833      	ldr	r0, [pc, #204]	; (8001334 <main+0x3d8>)
 8001268:	f002 f932 	bl	80034d0 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <main+0x31e>
		{
			Pick = 1;
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <main+0x3dc>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e016      	b.n	80012a8 <main+0x34c>
		}
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800127a:	2110      	movs	r1, #16
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <main+0x3d8>)
 800127e:	f002 f927 	bl	80034d0 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <main+0x334>
		{
			DropRice = 1;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <main+0x3e0>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e00b      	b.n	80012a8 <main+0x34c>
		}
		else
		{
			Stepper = 0;
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <main+0x3e4>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
			PushRice = 0;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0x3d4>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
			Pick = 0;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <main+0x3dc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
			DropRice = 0;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <main+0x3e0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
		}
		myTxData[0] = Vx;
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <main+0x3e8>)
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <main+0x3ec>)
 80012ae:	701a      	strb	r2, [r3, #0]
		myTxData[1] = Vy;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <main+0x3f0>)
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <main+0x3ec>)
 80012b6:	705a      	strb	r2, [r3, #1]
		myTxData[2] = Vz;
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <main+0x3f4>)
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <main+0x3ec>)
 80012be:	709a      	strb	r2, [r3, #2]
		myTxData[3] = Speed;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <main+0x3f8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa3b 	bl	8000740 <__aeabi_f2uiz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <main+0x3ec>)
 80012d0:	70da      	strb	r2, [r3, #3]
		myTxData[4] = Stepper;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <main+0x3e4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <main+0x3ec>)
 80012da:	711a      	strb	r2, [r3, #4]
		myTxData[5] = PushRice;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <main+0x3d4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <main+0x3ec>)
 80012e4:	715a      	strb	r2, [r3, #5]
		myTxData[6] = mode;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <main+0x3fc>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <main+0x3ec>)
 80012ec:	719a      	strb	r2, [r3, #6]
		myTxData[7] = Shooter;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <main+0x400>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <main+0x3ec>)
 80012f6:	71da      	strb	r2, [r3, #7]
		myTxData[8] = DropRice;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <main+0x3e0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <main+0x3ec>)
 8001300:	721a      	strb	r2, [r3, #8]
		myTxData[9] = TakeRice;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <main+0x404>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <main+0x3ec>)
 800130a:	725a      	strb	r2, [r3, #9]
		myTxData[10] = SpeedShooter;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <main+0x408>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <main+0x3ec>)
 8001314:	729a      	strb	r2, [r3, #10]
		myTxData[11] = Pick;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <main+0x3dc>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <main+0x3ec>)
 800131c:	72da      	strb	r2, [r3, #11]


		/* Transmit message*/
		TransferMode();
 800131e:	f7ff fde3 	bl	8000ee8 <TransferMode>
		HAL_Delay(20); //[ms]
 8001322:	2014      	movs	r0, #20
 8001324:	f001 f94c 	bl	80025c0 <HAL_Delay>
	  JoyStick_Read(JoyStick1, JoyStick1_XY);
 8001328:	e643      	b.n	8000fb2 <main+0x56>
 800132a:	bf00      	nop
 800132c:	40011000 	.word	0x40011000
 8001330:	200001e4 	.word	0x200001e4
 8001334:	40010c00 	.word	0x40010c00
 8001338:	200001ec 	.word	0x200001ec
 800133c:	200001d8 	.word	0x200001d8
 8001340:	200001e0 	.word	0x200001e0
 8001344:	200001c1 	.word	0x200001c1
 8001348:	20000168 	.word	0x20000168
 800134c:	200001c2 	.word	0x200001c2
 8001350:	200001c3 	.word	0x200001c3
 8001354:	200001c4 	.word	0x200001c4
 8001358:	200001c0 	.word	0x200001c0
 800135c:	200001dc 	.word	0x200001dc
 8001360:	200001d4 	.word	0x200001d4
 8001364:	200001e8 	.word	0x200001e8

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	2228      	movs	r2, #40	; 0x28
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f004 f8dc 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001398:	2301      	movs	r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a6:	2301      	movs	r3, #1
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f8b6 	bl	8003530 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ca:	f000 f8eb 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2102      	movs	r1, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fb22 	bl	8003a34 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013f6:	f000 f8d5 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013fa:	2302      	movs	r3, #2
 80013fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001402:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fca2 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001412:	f000 f8c7 	bl	80015a4 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3750      	adds	r7, #80	; 0x50
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_TIM_PeriodElapsedCallback>:
//			Speed = 0;
//		}
//		previousMillis = currentMillis;
//	}
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001430:	f040 8093 	bne.w	800155a <HAL_TIM_PeriodElapsedCallback+0x13a>

    /* BUTTON 1 (PB3) MODE AUTO = 1, MENU = 0 */

      button1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001438:	484a      	ldr	r0, [pc, #296]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800143a:	f002 f849 	bl	80034d0 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001444:	701a      	strb	r2, [r3, #0]
      if(button1_state == GPIO_PIN_RESET && button1_last_state == GPIO_PIN_SET) {
 8001446:	4b48      	ldr	r3, [pc, #288]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d110      	bne.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x50>
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10c      	bne.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x50>
        mode++;
 8001456:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001460:	701a      	strb	r2, [r3, #0]
        if (mode > 1){
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d902      	bls.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x50>
          mode = 0; /* Auto = 1 CHANGE MODE MENU */
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
        }
      }
      button1_last_state = button1_state;
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001476:	701a      	strb	r2, [r3, #0]
//        DropRice++;
//        if (DropRice > 1){
//          DropRice = 0;
//        }
//      }
      button2_last_state = button2_state;
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800147e:	701a      	strb	r2, [r3, #0]
    /* BUTTON 3 (PB5) TAKE RICE */
      button3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001480:	2120      	movs	r1, #32
 8001482:	4838      	ldr	r0, [pc, #224]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001484:	f002 f824 	bl	80034d0 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800148e:	701a      	strb	r2, [r3, #0]
      if(button3_state == GPIO_PIN_RESET && button3_last_state == GPIO_PIN_SET) {
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x98>
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10b      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x98>
        TakeRice++;
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a37      	ldr	r2, [pc, #220]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80014a8:	6013      	str	r3, [r2, #0]
        if (TakeRice > 2){
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	dd02      	ble.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x98>
          TakeRice = 0;
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
        }
      }
      button3_last_state = button3_state;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80014be:	701a      	strb	r2, [r3, #0]

    /* BUTTON 4 (PB8) COUNT SHOOTER */

      button4_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80014c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c4:	4827      	ldr	r0, [pc, #156]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014c6:	f002 f803 	bl	80034d0 <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80014d0:	701a      	strb	r2, [r3, #0]
      if(button4_state == GPIO_PIN_RESET && button4_last_state == GPIO_PIN_SET) {
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <HAL_TIM_PeriodElapsedCallback+0xda>
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10b      	bne.n	80014fa <HAL_TIM_PeriodElapsedCallback+0xda>
        Shooter++;
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80014ea:	6013      	str	r3, [r2, #0]
        if (Shooter > 6){
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	dd02      	ble.n	80014fa <HAL_TIM_PeriodElapsedCallback+0xda>
          Shooter = 0;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
        }
      }
      button4_last_state = button4_state;
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001500:	701a      	strb	r2, [r3, #0]

      button5_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001506:	f001 ffe3 	bl	80034d0 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001510:	701a      	strb	r2, [r3, #0]
		if (button5_state == GPIO_PIN_RESET
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d11b      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x132>
				&& button5_last_state == GPIO_PIN_SET) {
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d117      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x132>
			Speed++;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe14 	bl	8000158 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001536:	601a      	str	r2, [r3, #0]
			if (Speed > 6) {
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4918      	ldr	r1, [pc, #96]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f8ce 	bl	80006e0 <__aeabi_fcmpgt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x132>
				Speed = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
			}
		}
		button5_last_state = button5_state;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001558:	701a      	strb	r2, [r3, #0]


  }
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40010c00 	.word	0x40010c00
 8001568:	200001c8 	.word	0x200001c8
 800156c:	200001cd 	.word	0x200001cd
 8001570:	200001c0 	.word	0x200001c0
 8001574:	200001c9 	.word	0x200001c9
 8001578:	200001ce 	.word	0x200001ce
 800157c:	200001ca 	.word	0x200001ca
 8001580:	200001cf 	.word	0x200001cf
 8001584:	200001d4 	.word	0x200001d4
 8001588:	200001cb 	.word	0x200001cb
 800158c:	200001d0 	.word	0x200001d0
 8001590:	200001dc 	.word	0x200001dc
 8001594:	200001cc 	.word	0x200001cc
 8001598:	200001d1 	.word	0x200001d1
 800159c:	200001c4 	.word	0x200001c4
 80015a0:	40c00000 	.word	0x40c00000

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <NRF24_DelayMicroSeconds+0x38>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <NRF24_DelayMicroSeconds+0x3c>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9a      	lsrs	r2, r3, #18
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80015d0:	bf00      	nop
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	60fa      	str	r2, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1fa      	bne.n	80015d2 <NRF24_DelayMicroSeconds+0x22>
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000008 	.word	0x20000008
 80015ec:	165e9f81 	.word	0x165e9f81

080015f0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_SET);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <NRF24_csn+0x20>
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <NRF24_csn+0x38>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <NRF24_csn+0x3c>)
 8001604:	8811      	ldrh	r1, [r2, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	4618      	mov	r0, r3
 800160a:	f001 ff78 	bl	80034fe <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800160e:	e007      	b.n	8001620 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <NRF24_csn+0x38>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <NRF24_csn+0x3c>)
 8001616:	8811      	ldrh	r1, [r2, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f001 ff6f 	bl	80034fe <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001f4 	.word	0x200001f4
 800162c:	200001fc 	.word	0x200001fc

08001630 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_SET);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <NRF24_ce+0x20>
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <NRF24_ce+0x38>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <NRF24_ce+0x3c>)
 8001644:	8811      	ldrh	r1, [r2, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4618      	mov	r0, r3
 800164a:	f001 ff58 	bl	80034fe <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800164e:	e007      	b.n	8001660 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <NRF24_ce+0x38>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a05      	ldr	r2, [pc, #20]	; (800166c <NRF24_ce+0x3c>)
 8001656:	8811      	ldrh	r1, [r2, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f001 ff4f 	bl	80034fe <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001f8 	.word	0x200001f8
 800166c:	200001fe 	.word	0x200001fe

08001670 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff ffb8 	bl	80015f0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	b2db      	uxtb	r3, r3
 8001688:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800168a:	f107 010c 	add.w	r1, r7, #12
 800168e:	2364      	movs	r3, #100	; 0x64
 8001690:	2201      	movs	r2, #1
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <NRF24_read_register+0x4c>)
 8001694:	f002 fd4c 	bl	8004130 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	1c59      	adds	r1, r3, #1
 800169e:	2364      	movs	r3, #100	; 0x64
 80016a0:	2201      	movs	r2, #1
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <NRF24_read_register+0x4c>)
 80016a4:	f002 fe87 	bl	80043b6 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff ff9f 	bl	80015f0 <NRF24_csn>
	return retData;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000200 	.word	0x20000200

080016c0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff8d 	bl	80015f0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	2364      	movs	r3, #100	; 0x64
 80016e6:	2201      	movs	r2, #1
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <NRF24_read_registerN+0x4c>)
 80016ea:	f002 fd21 	bl	8004130 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <NRF24_read_registerN+0x4c>)
 80016f8:	f002 fe5d 	bl	80043b6 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff ff77 	bl	80015f0 <NRF24_csn>
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000200 	.word	0x20000200

08001710 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ff65 	bl	80015f0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	b2db      	uxtb	r3, r3
 800172e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001734:	f107 010c 	add.w	r1, r7, #12
 8001738:	2364      	movs	r3, #100	; 0x64
 800173a:	2202      	movs	r2, #2
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <NRF24_write_register+0x40>)
 800173e:	f002 fcf7 	bl	8004130 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff ff54 	bl	80015f0 <NRF24_csn>
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000200 	.word	0x20000200

08001754 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	4613      	mov	r3, r2
 8001762:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff ff43 	bl	80015f0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	b2db      	uxtb	r3, r3
 8001772:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001774:	f107 010c 	add.w	r1, r7, #12
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	2201      	movs	r2, #1
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <NRF24_write_registerN+0x4c>)
 800177e:	f002 fcd7 	bl	8004130 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	b29a      	uxth	r2, r3
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <NRF24_write_registerN+0x4c>)
 800178c:	f002 fcd0 	bl	8004130 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff ff2d 	bl	80015f0 <NRF24_csn>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000200 	.word	0x20000200

080017a4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff ff1d 	bl	80015f0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80017b6:	23a0      	movs	r3, #160	; 0xa0
 80017b8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80017ba:	f107 010f 	add.w	r1, r7, #15
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	2201      	movs	r2, #1
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <NRF24_write_payload+0x40>)
 80017c4:	f002 fcb4 	bl	8004130 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	2364      	movs	r3, #100	; 0x64
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <NRF24_write_payload+0x40>)
 80017d2:	f002 fcad 	bl	8004130 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff ff0a 	bl	80015f0 <NRF24_csn>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000200 	.word	0x20000200

080017e8 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80017f4:	f000 fa10 	bl	8001c18 <NRF24_getPayloadSize>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	4293      	cmp	r3, r2
 8001800:	d303      	bcc.n	800180a <NRF24_read_payload+0x22>
 8001802:	f000 fa09 	bl	8001c18 <NRF24_getPayloadSize>
 8001806:	4603      	mov	r3, r0
 8001808:	e000      	b.n	800180c <NRF24_read_payload+0x24>
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff feee 	bl	80015f0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001814:	2361      	movs	r3, #97	; 0x61
 8001816:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001818:	f107 010e 	add.w	r1, r7, #14
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	2201      	movs	r2, #1
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <NRF24_read_payload+0x5c>)
 8001822:	f002 fc85 	bl	8004130 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	b29a      	uxth	r2, r3
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <NRF24_read_payload+0x5c>)
 8001830:	f002 fdc1 	bl	80043b6 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fedb 	bl	80015f0 <NRF24_csn>
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000200 	.word	0x20000200

08001848 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800184c:	21ff      	movs	r1, #255	; 0xff
 800184e:	20e1      	movs	r0, #225	; 0xe1
 8001850:	f7ff ff5e 	bl	8001710 <NRF24_write_register>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800185c:	21ff      	movs	r1, #255	; 0xff
 800185e:	20e2      	movs	r0, #226	; 0xe2
 8001860:	f7ff ff56 	bl	8001710 <NRF24_write_register>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800186e:	2007      	movs	r0, #7
 8001870:	f7ff fefe 	bl	8001670 <NRF24_read_register>
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001878:	79fb      	ldrb	r3, [r7, #7]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT_CSN, GPIO_TypeDef *nrf24PORT_CE, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	460b      	mov	r3, r1
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	80bb      	strh	r3, [r7, #4]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800189a:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <NRF24_begin+0x1ac>)
 800189c:	4618      	mov	r0, r3
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	2258      	movs	r2, #88	; 0x58
 80018a4:	4619      	mov	r1, r3
 80018a6:	f003 fe37 	bl	8005518 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT_CSN = nrf24PORT_CSN;
 80018aa:	4a62      	ldr	r2, [pc, #392]	; (8001a34 <NRF24_begin+0x1b0>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6013      	str	r3, [r2, #0]
	nrf24_PORT_CE = nrf24PORT_CE;
 80018b0:	4a61      	ldr	r2, [pc, #388]	; (8001a38 <NRF24_begin+0x1b4>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80018b6:	4a61      	ldr	r2, [pc, #388]	; (8001a3c <NRF24_begin+0x1b8>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80018bc:	4a60      	ldr	r2, [pc, #384]	; (8001a40 <NRF24_begin+0x1bc>)
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff fe94 	bl	80015f0 <NRF24_csn>
	NRF24_ce(0);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff feb1 	bl	8001630 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f000 fe76 	bl	80025c0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80018d4:	2108      	movs	r1, #8
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff ff1a 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80018dc:	213f      	movs	r1, #63	; 0x3f
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff ff16 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80018e4:	2103      	movs	r1, #3
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7ff ff12 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80018ec:	2103      	movs	r1, #3
 80018ee:	2003      	movs	r0, #3
 80018f0:	f7ff ff0e 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80018f4:	2103      	movs	r1, #3
 80018f6:	2004      	movs	r0, #4
 80018f8:	f7ff ff0a 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80018fc:	2102      	movs	r1, #2
 80018fe:	2005      	movs	r0, #5
 8001900:	f7ff ff06 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001904:	210f      	movs	r1, #15
 8001906:	2006      	movs	r0, #6
 8001908:	f7ff ff02 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800190c:	210e      	movs	r1, #14
 800190e:	2007      	movs	r0, #7
 8001910:	f7ff fefe 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001914:	2100      	movs	r1, #0
 8001916:	2008      	movs	r0, #8
 8001918:	f7ff fefa 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800191c:	2100      	movs	r1, #0
 800191e:	2009      	movs	r0, #9
 8001920:	f7ff fef6 	bl	8001710 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001924:	23e7      	movs	r3, #231	; 0xe7
 8001926:	753b      	strb	r3, [r7, #20]
 8001928:	23e7      	movs	r3, #231	; 0xe7
 800192a:	74fb      	strb	r3, [r7, #19]
 800192c:	23e7      	movs	r3, #231	; 0xe7
 800192e:	74bb      	strb	r3, [r7, #18]
 8001930:	23e7      	movs	r3, #231	; 0xe7
 8001932:	747b      	strb	r3, [r7, #17]
 8001934:	23e7      	movs	r3, #231	; 0xe7
 8001936:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2205      	movs	r2, #5
 800193e:	4619      	mov	r1, r3
 8001940:	200a      	movs	r0, #10
 8001942:	f7ff ff07 	bl	8001754 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001946:	23c2      	movs	r3, #194	; 0xc2
 8001948:	753b      	strb	r3, [r7, #20]
 800194a:	23c2      	movs	r3, #194	; 0xc2
 800194c:	74fb      	strb	r3, [r7, #19]
 800194e:	23c2      	movs	r3, #194	; 0xc2
 8001950:	74bb      	strb	r3, [r7, #18]
 8001952:	23c2      	movs	r3, #194	; 0xc2
 8001954:	747b      	strb	r3, [r7, #17]
 8001956:	23c2      	movs	r3, #194	; 0xc2
 8001958:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2205      	movs	r2, #5
 8001960:	4619      	mov	r1, r3
 8001962:	200b      	movs	r0, #11
 8001964:	f7ff fef6 	bl	8001754 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001968:	21c3      	movs	r1, #195	; 0xc3
 800196a:	200c      	movs	r0, #12
 800196c:	f7ff fed0 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001970:	21c4      	movs	r1, #196	; 0xc4
 8001972:	200d      	movs	r0, #13
 8001974:	f7ff fecc 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001978:	21c5      	movs	r1, #197	; 0xc5
 800197a:	200e      	movs	r0, #14
 800197c:	f7ff fec8 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001980:	21c6      	movs	r1, #198	; 0xc6
 8001982:	200f      	movs	r0, #15
 8001984:	f7ff fec4 	bl	8001710 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001988:	23e7      	movs	r3, #231	; 0xe7
 800198a:	753b      	strb	r3, [r7, #20]
 800198c:	23e7      	movs	r3, #231	; 0xe7
 800198e:	74fb      	strb	r3, [r7, #19]
 8001990:	23e7      	movs	r3, #231	; 0xe7
 8001992:	74bb      	strb	r3, [r7, #18]
 8001994:	23e7      	movs	r3, #231	; 0xe7
 8001996:	747b      	strb	r3, [r7, #17]
 8001998:	23e7      	movs	r3, #231	; 0xe7
 800199a:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2205      	movs	r2, #5
 80019a2:	4619      	mov	r1, r3
 80019a4:	2010      	movs	r0, #16
 80019a6:	f7ff fed5 	bl	8001754 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80019aa:	2100      	movs	r1, #0
 80019ac:	2011      	movs	r0, #17
 80019ae:	f7ff feaf 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	2012      	movs	r0, #18
 80019b6:	f7ff feab 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80019ba:	2100      	movs	r1, #0
 80019bc:	2013      	movs	r0, #19
 80019be:	f7ff fea7 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	2014      	movs	r0, #20
 80019c6:	f7ff fea3 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80019ca:	2100      	movs	r1, #0
 80019cc:	2015      	movs	r0, #21
 80019ce:	f7ff fe9f 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80019d2:	2100      	movs	r1, #0
 80019d4:	2016      	movs	r0, #22
 80019d6:	f7ff fe9b 	bl	8001710 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80019da:	f000 fad5 	bl	8001f88 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80019de:	2100      	movs	r1, #0
 80019e0:	201c      	movs	r0, #28
 80019e2:	f7ff fe95 	bl	8001710 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80019e6:	2100      	movs	r1, #0
 80019e8:	201d      	movs	r0, #29
 80019ea:	f7ff fe91 	bl	8001710 <NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80019ee:	210f      	movs	r1, #15
 80019f0:	200f      	movs	r0, #15
 80019f2:	f000 f8cb 	bl	8001b8c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80019f6:	2003      	movs	r0, #3
 80019f8:	f000 f97b 	bl	8001cf2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 f9b1 	bl	8001d64 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001a02:	2002      	movs	r0, #2
 8001a04:	f000 f9f4 	bl	8001df0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001a08:	f000 f946 	bl	8001c98 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f000 f8ed 	bl	8001bec <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001a12:	f000 fab0 	bl	8001f76 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001a16:	204c      	movs	r0, #76	; 0x4c
 8001a18:	f000 f8d3 	bl	8001bc2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001a1c:	f7ff ff14 	bl	8001848 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a20:	f7ff ff1a 	bl	8001858 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001a24:	f000 fa0c 	bl	8001e40 <NRF24_powerDown>
	
}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000200 	.word	0x20000200
 8001a34:	200001f4 	.word	0x200001f4
 8001a38:	200001f8 	.word	0x200001f8
 8001a3c:	200001fc 	.word	0x200001fc
 8001a40:	200001fe 	.word	0x200001fe

08001a44 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fdf1 	bl	8001630 <NRF24_ce>
	NRF24_flush_tx();
 8001a4e:	f7ff fefb 	bl	8001848 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a52:	f7ff ff01 	bl	8001858 <NRF24_flush_rx>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001a68:	f000 fa85 	bl	8001f76 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fa24 	bl	8001ebe <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001a76:	f000 fd99 	bl	80025ac <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001a80:	f107 030d 	add.w	r3, r7, #13
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	2008      	movs	r0, #8
 8001a8a:	f7ff fe19 	bl	80016c0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001a8e:	f7ff feeb 	bl	8001868 <NRF24_get_status>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <NRF24_write+0x54>
 8001aa0:	f000 fd84 	bl	80025ac <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8e7      	bhi.n	8001a80 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001ab0:	f107 010b 	add.w	r1, r7, #11
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <NRF24_write+0x90>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fa28 	bl	8001f10 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <NRF24_write+0x90>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001acc:	f000 f8ae 	bl	8001c2c <NRF24_getDynamicPayloadSize>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <NRF24_write+0x94>)
 8001ad6:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001ad8:	f000 f80c 	bl	8001af4 <NRF24_available>
	NRF24_flush_tx();
 8001adc:	f7ff feb4 	bl	8001848 <NRF24_flush_tx>
	return retStatus;
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200001ed 	.word	0x200001ed
 8001af0:	200001ee 	.word	0x200001ee

08001af4 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 f9b0 	bl	8001e5e <NRF24_availablePipe>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fe67 	bl	80017e8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001b1a:	2017      	movs	r0, #23
 8001b1c:	f7ff fda8 	bl	8001670 <NRF24_read_register>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001b28:	f7ff fe96 	bl	8001858 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001b2c:	f000 f87e 	bl	8001c2c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2205      	movs	r2, #5
 8001b52:	4619      	mov	r1, r3
 8001b54:	200a      	movs	r0, #10
 8001b56:	f7ff fdfd 	bl	8001754 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2010      	movs	r0, #16
 8001b62:	f7ff fdf7 	bl	8001754 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001b66:	2320      	movs	r3, #32
 8001b68:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <NRF24_openWritingPipe+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bf28      	it	cs
 8001b74:	4613      	movcs	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2011      	movs	r0, #17
 8001b7c:	f7ff fdc8 	bl	8001710 <NRF24_write_register>
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001ef 	.word	0x200001ef

08001b8c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7ff fdab 	bl	8001710 <NRF24_write_register>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <NRF24_setChannel>:


//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001bcc:	237f      	movs	r3, #127	; 0x7f
 8001bce:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf28      	it	cs
 8001bd8:	4613      	movcs	r3, r2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2005      	movs	r0, #5
 8001be0:	f7ff fd96 	bl	8001710 <NRF24_write_register>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	bf28      	it	cs
 8001c02:	4613      	movcs	r3, r2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <NRF24_setPayloadSize+0x28>)
 8001c08:	701a      	strb	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	200001ef 	.word	0x200001ef

08001c18 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	return payload_size;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <NRF24_getPayloadSize+0x10>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	200001ef 	.word	0x200001ef

08001c2c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001c30:	2060      	movs	r0, #96	; 0x60
 8001c32:	f7ff fd1d 	bl	8001670 <NRF24_read_register>
 8001c36:	4603      	mov	r3, r0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001c40:	201d      	movs	r0, #29
 8001c42:	f7ff fd15 	bl	8001670 <NRF24_read_register>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f043 0306 	orr.w	r3, r3, #6
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4619      	mov	r1, r3
 8001c50:	201d      	movs	r0, #29
 8001c52:	f7ff fd5d 	bl	8001710 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7ff fd0a 	bl	8001670 <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001c62:	f000 f991 	bl	8001f88 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001c66:	201d      	movs	r0, #29
 8001c68:	f7ff fd02 	bl	8001670 <NRF24_read_register>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f043 0306 	orr.w	r3, r3, #6
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	201d      	movs	r0, #29
 8001c78:	f7ff fd4a 	bl	8001710 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f7ff fcf7 	bl	8001670 <NRF24_read_register>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f043 0303 	orr.w	r3, r3, #3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	201c      	movs	r0, #28
 8001c8e:	f7ff fd3f 	bl	8001710 <NRF24_write_register>
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001c9c:	201d      	movs	r0, #29
 8001c9e:	f7ff fce7 	bl	8001670 <NRF24_read_register>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	201d      	movs	r0, #29
 8001cae:	f7ff fd2f 	bl	8001710 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f7ff fd2b 	bl	8001710 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001cba:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <NRF24_disableDynamicPayloads+0x2c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200001f0 	.word	0x200001f0

08001cc8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001cd8:	213f      	movs	r1, #63	; 0x3f
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff fd18 	bl	8001710 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001ce0:	e003      	b.n	8001cea <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fd13 	bl	8001710 <NRF24_write_register>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001cfc:	2006      	movs	r0, #6
 8001cfe:	f7ff fcb7 	bl	8001670 <NRF24_read_register>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	f023 0306 	bic.w	r3, r3, #6
 8001d0c:	73fb      	strb	r3, [r7, #15]
 // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d104      	bne.n	8001d1e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f043 0306 	orr.w	r3, r3, #6
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e019      	b.n	8001d52 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d104      	bne.n	8001d2e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e011      	b.n	8001d52 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d104      	bne.n	8001d3e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e009      	b.n	8001d52 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d103      	bne.n	8001d52 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f043 0306 	orr.w	r3, r3, #6
 8001d50:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	4619      	mov	r1, r3
 8001d56:	2006      	movs	r0, #6
 8001d58:	f7ff fcda 	bl	8001710 <NRF24_write_register>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001d72:	2006      	movs	r0, #6
 8001d74:	f7ff fc7c 	bl	8001670 <NRF24_read_register>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <NRF24_setDataRate+0x88>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001d88:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d107      	bne.n	8001da0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <NRF24_setDataRate+0x88>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	f043 0320 	orr.w	r3, r3, #32
 8001d9c:	73bb      	strb	r3, [r7, #14]
 8001d9e:	e00d      	b.n	8001dbc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <NRF24_setDataRate+0x88>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	73bb      	strb	r3, [r7, #14]
 8001db4:	e002      	b.n	8001dbc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <NRF24_setDataRate+0x88>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2006      	movs	r0, #6
 8001dc2:	f7ff fca5 	bl	8001710 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001dc6:	2006      	movs	r0, #6
 8001dc8:	f7ff fc52 	bl	8001670 <NRF24_read_register>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d102      	bne.n	8001ddc <NRF24_setDataRate+0x78>
  {
    result = true;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e002      	b.n	8001de2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <NRF24_setDataRate+0x88>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200001f1 	.word	0x200001f1

08001df0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fc38 	bl	8001670 <NRF24_read_register>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f023 030c 	bic.w	r3, r3, #12
 8001e06:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00f      	beq.n	8001e2e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d104      	bne.n	8001e1e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e007      	b.n	8001e2e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	4619      	mov	r1, r3
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fc6c 	bl	8001710 <NRF24_write_register>
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fc13 	bl	8001670 <NRF24_read_register>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f023 0302 	bic.w	r3, r3, #2
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fc5b 	bl	8001710 <NRF24_write_register>
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001e66:	f7ff fcff 	bl	8001868 <NRF24_get_status>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d017      	beq.n	8001eb4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	2007      	movs	r0, #7
 8001e9e:	f7ff fc37 	bl	8001710 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001eac:	2120      	movs	r1, #32
 8001eae:	2007      	movs	r0, #7
 8001eb0:	f7ff fc2e 	bl	8001710 <NRF24_write_register>
    }
  }
  return result;
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fbd0 	bl	8001670 <NRF24_read_register>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fc15 	bl	8001710 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8001ee6:	2096      	movs	r0, #150	; 0x96
 8001ee8:	f7ff fb62 	bl	80015b0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fc57 	bl	80017a4 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff fb9a 	bl	8001630 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001efc:	200f      	movs	r0, #15
 8001efe:	f7ff fb57 	bl	80015b0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fb94 	bl	8001630 <NRF24_ce>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001f1c:	f7ff fca4 	bl	8001868 <NRF24_get_status>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001f2a:	2170      	movs	r1, #112	; 0x70
 8001f2c:	2007      	movs	r0, #7
 8001f2e:	f7ff fbef 	bl	8001710 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	701a      	strb	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001f7a:	2170      	movs	r1, #112	; 0x70
 8001f7c:	2007      	movs	r0, #7
 8001f7e:	f7ff fbc7 	bl	8001710 <NRF24_write_register>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fb2e 	bl	80015f0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001f94:	2350      	movs	r3, #80	; 0x50
 8001f96:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001f98:	2373      	movs	r3, #115	; 0x73
 8001f9a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001f9c:	1d39      	adds	r1, r7, #4
 8001f9e:	2364      	movs	r3, #100	; 0x64
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <NRF24_ACTIVATE_cmd+0x30>)
 8001fa4:	f002 f8c4 	bl	8004130 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fb21 	bl	80015f0 <NRF24_csn>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000200 	.word	0x20000200

08001fbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <MX_SPI1_Init+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff0:	2218      	movs	r2, #24
 8001ff2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_SPI1_Init+0x64>)
 8002008:	220a      	movs	r2, #10
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_SPI1_Init+0x64>)
 800200e:	f002 f80b 	bl	8004028 <HAL_SPI_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002018:	f7ff fac4 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000258 	.word	0x20000258
 8002024:	40013000 	.word	0x40013000

08002028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d12f      	bne.n	80020a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 800204e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002078:	23a0      	movs	r3, #160	; 0xa0
 800207a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4619      	mov	r1, r3
 800208a:	480b      	ldr	r0, [pc, #44]	; (80020b8 <HAL_SPI_MspInit+0x90>)
 800208c:	f001 f8a4 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002090:	2340      	movs	r3, #64	; 0x40
 8002092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_SPI_MspInit+0x90>)
 80020a4:	f001 f898 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020a8:	bf00      	nop
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_MspInit+0x5c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_MspInit+0x5c>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_MspInit+0x5c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_MspInit+0x5c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_MspInit+0x5c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_MspInit+0x5c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_MspInit+0x60>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_MspInit+0x60>)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <NMI_Handler+0x4>

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <MemManage_Handler+0x4>

08002132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <UsageFault_Handler+0x4>

0800213e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002166:	f000 fa0f 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TIM2_IRQHandler+0x10>)
 8002176:	f002 fd7b 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200002b4 	.word	0x200002b4

08002184 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <TIM3_IRQHandler+0x10>)
 800218a:	f002 fd71 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200002fc 	.word	0x200002fc

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f003 f97c 	bl	80054c4 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20002800 	.word	0x20002800
 80021f8:	00000400 	.word	0x00000400
 80021fc:	200002b0 	.word	0x200002b0
 8002200:	200003a0 	.word	0x200003a0

08002204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	463b      	mov	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MX_TIM2_Init+0x94>)
 800222e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002232:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002236:	228f      	movs	r2, #143	; 0x8f
 8002238:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MX_TIM2_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002242:	f242 720f 	movw	r2, #9999	; 0x270f
 8002246:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MX_TIM2_Init+0x94>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002254:	4813      	ldr	r0, [pc, #76]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002256:	f002 fc6f 	bl	8004b38 <HAL_TIM_Base_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002260:	f7ff f9a0 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4619      	mov	r1, r3
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002272:	f002 fe05 	bl	8004e80 <HAL_TIM_ConfigClockSource>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800227c:	f7ff f992 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_TIM2_Init+0x94>)
 800228e:	f002 ffd1 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002298:	f7ff f984 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	200002b4 	.word	0x200002b4

080022a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022bc:	463b      	mov	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <MX_TIM3_Init+0x94>)
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <MX_TIM3_Init+0x98>)
 80022c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <MX_TIM3_Init+0x94>)
 80022cc:	2247      	movs	r2, #71	; 0x47
 80022ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_TIM3_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <MX_TIM3_Init+0x94>)
 80022d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80022dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <MX_TIM3_Init+0x94>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <MX_TIM3_Init+0x94>)
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022ea:	4814      	ldr	r0, [pc, #80]	; (800233c <MX_TIM3_Init+0x94>)
 80022ec:	f002 fc24 	bl	8004b38 <HAL_TIM_Base_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022f6:	f7ff f955 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_TIM3_Init+0x94>)
 8002308:	f002 fdba 	bl	8004e80 <HAL_TIM_ConfigClockSource>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002312:	f7ff f947 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <MX_TIM3_Init+0x94>)
 8002324:	f002 ff86 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800232e:	f7ff f939 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200002fc 	.word	0x200002fc
 8002340:	40000400 	.word	0x40000400

08002344 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d114      	bne.n	8002380 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	201c      	movs	r0, #28
 8002374:	f000 fef9 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002378:	201c      	movs	r0, #28
 800237a:	f000 ff12 	bl	80031a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800237e:	e018      	b.n	80023b2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_TIM_Base_MspInit+0x7c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d113      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	201d      	movs	r0, #29
 80023a8:	f000 fedf 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ac:	201d      	movs	r0, #29
 80023ae:	f000 fef8 	bl	80031a2 <HAL_NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40000400 	.word	0x40000400

080023c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_USART1_UART_Init+0x4c>)
 80023fc:	f002 ff84 	bl	8005308 <HAL_UART_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002406:	f7ff f8cd 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000344 	.word	0x20000344
 8002414:	40013800 	.word	0x40013800

08002418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_UART_MspInit+0x8c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d131      	bne.n	800249c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_UART_MspInit+0x90>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_UART_MspInit+0x90>)
 800243e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_UART_MspInit+0x90>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0x90>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_UART_MspInit+0x90>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_UART_MspInit+0x90>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4619      	mov	r1, r3
 800247c:	480b      	ldr	r0, [pc, #44]	; (80024ac <HAL_UART_MspInit+0x94>)
 800247e:	f000 feab 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4619      	mov	r1, r3
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <HAL_UART_MspInit+0x94>)
 8002498:	f000 fe9e 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010800 	.word	0x40010800

080024b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b0:	f7ff fea8 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480b      	ldr	r0, [pc, #44]	; (80024e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024b6:	490c      	ldr	r1, [pc, #48]	; (80024e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024cc:	4c09      	ldr	r4, [pc, #36]	; (80024f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024da:	f002 fff9 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024de:	f7fe fd3d 	bl	8000f5c <main>
  bx lr
 80024e2:	4770      	bx	lr
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024ec:	08005ef4 	.word	0x08005ef4
  ldr r2, =_sbss
 80024f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024f4:	200003a0 	.word	0x200003a0

080024f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC1_2_IRQHandler>
	...

080024fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_Init+0x28>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_Init+0x28>)
 8002506:	f043 0310 	orr.w	r3, r3, #16
 800250a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f000 fe21 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002512:	200f      	movs	r0, #15
 8002514:	f000 f808 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002518:	f7ff fdd0 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_InitTick+0x54>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x58>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fe39 	bl	80031be <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d80a      	bhi.n	8002572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002564:	f000 fe01 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <HAL_InitTick+0x5c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000008 	.word	0x20000008
 8002580:	20000010 	.word	0x20000010
 8002584:	2000000c 	.word	0x2000000c

08002588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_IncTick+0x1c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_IncTick+0x20>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <HAL_IncTick+0x20>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000010 	.word	0x20000010
 80025a8:	2000038c 	.word	0x2000038c

080025ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_GetTick+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	2000038c 	.word	0x2000038c

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff fff0 	bl	80025ac <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffe0 	bl	80025ac <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000010 	.word	0x20000010

08002608 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0be      	b.n	80027a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fb28 	bl	8000c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fbc5 	bl	8002ddc <ADC_ConversionStop_Disable>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 8099 	bne.w	8002796 <HAL_ADC_Init+0x18e>
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8095 	bne.w	8002796 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002674:	f023 0302 	bic.w	r3, r3, #2
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002688:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7b1b      	ldrb	r3, [r3, #12]
 800268e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002690:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	4313      	orrs	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a0:	d003      	beq.n	80026aa <HAL_ADC_Init+0xa2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_ADC_Init+0xa8>
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_Init+0xaa>
 80026b0:	2300      	movs	r3, #0
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7d1b      	ldrb	r3, [r3, #20]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d119      	bne.n	80026f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7b1b      	ldrb	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	035a      	lsls	r2, r3, #13
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	e00b      	b.n	80026f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_ADC_Init+0x1a8>)
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	430b      	orrs	r3, r1
 800271a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002724:	d003      	beq.n	800272e <HAL_ADC_Init+0x126>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d104      	bne.n	8002738 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	3b01      	subs	r3, #1
 8002734:	051b      	lsls	r3, r3, #20
 8002736:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	430a      	orrs	r2, r1
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_ADC_Init+0x1ac>)
 8002754:	4013      	ands	r3, r2
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	d10b      	bne.n	8002774 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002772:	e018      	b.n	80027a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f023 0312 	bic.w	r3, r3, #18
 800277c:	f043 0210 	orr.w	r2, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002794:	e007      	b.n	80027a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	ffe1f7fd 	.word	0xffe1f7fd
 80027b4:	ff1f0efe 	.word	0xff1f0efe

080027b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_Start+0x1a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e098      	b.n	8002904 <HAL_ADC_Start+0x14c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 faa4 	bl	8002d28 <ADC_Enable>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 8087 	bne.w	80028fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a41      	ldr	r2, [pc, #260]	; (800290c <HAL_ADC_Start+0x154>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d105      	bne.n	8002816 <HAL_ADC_Start+0x5e>
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_ADC_Start+0x158>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d026      	beq.n	800287e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002840:	e01d      	b.n	800287e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2f      	ldr	r2, [pc, #188]	; (8002910 <HAL_ADC_Start+0x158>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_ADC_Start+0xaa>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2b      	ldr	r2, [pc, #172]	; (800290c <HAL_ADC_Start+0x154>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10d      	bne.n	800287e <HAL_ADC_Start+0xc6>
 8002862:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_ADC_Start+0x158>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002876:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f023 0206 	bic.w	r2, r3, #6
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c
 8002896:	e002      	b.n	800289e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f06f 0202 	mvn.w	r2, #2
 80028ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028be:	d113      	bne.n	80028e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028c4:	4a11      	ldr	r2, [pc, #68]	; (800290c <HAL_ADC_Start+0x154>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d105      	bne.n	80028d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_ADC_Start+0x158>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	e00c      	b.n	8002902 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	e003      	b.n	8002902 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40012800 	.word	0x40012800
 8002910:	40012400 	.word	0x40012400

08002914 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800292a:	f7ff fe3f 	bl	80025ac <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0d3      	b.n	8002afe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d131      	bne.n	80029c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d12a      	bne.n	80029c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002972:	e021      	b.n	80029b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297a:	d01d      	beq.n	80029b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_ADC_PollForConversion+0x7e>
 8002982:	f7ff fe13 	bl	80025ac <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d212      	bcs.n	80029b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0a2      	b.n	8002afe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0d6      	beq.n	8002974 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029c6:	e070      	b.n	8002aaa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029c8:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <HAL_ADC_PollForConversion+0x1f4>)
 80029ca:	681c      	ldr	r4, [r3, #0]
 80029cc:	2002      	movs	r0, #2
 80029ce:	f001 fa75 	bl	8003ebc <HAL_RCCEx_GetPeriphCLKFreq>
 80029d2:	4603      	mov	r3, r0
 80029d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <HAL_ADC_PollForConversion+0x1f8>)
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x104>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <HAL_ADC_PollForConversion+0x1fc>)
 80029ee:	400b      	ands	r3, r1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x104>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <HAL_ADC_PollForConversion+0x200>)
 80029fc:	400b      	ands	r3, r1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x100>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68d9      	ldr	r1, [r3, #12]
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_ADC_PollForConversion+0x204>)
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x100>
 8002a10:	2314      	movs	r3, #20
 8002a12:	e020      	b.n	8002a56 <HAL_ADC_PollForConversion+0x142>
 8002a14:	2329      	movs	r3, #41	; 0x29
 8002a16:	e01e      	b.n	8002a56 <HAL_ADC_PollForConversion+0x142>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_ADC_PollForConversion+0x200>)
 8002a20:	400b      	ands	r3, r1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_PollForConversion+0x120>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_ADC_PollForConversion+0x204>)
 8002a2e:	400b      	ands	r3, r1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <HAL_ADC_PollForConversion+0x13c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6919      	ldr	r1, [r3, #16]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_ADC_PollForConversion+0x208>)
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HAL_ADC_PollForConversion+0x140>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68d9      	ldr	r1, [r3, #12]
 8002a48:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <HAL_ADC_PollForConversion+0x208>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_PollForConversion+0x140>
 8002a50:	2354      	movs	r3, #84	; 0x54
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_PollForConversion+0x142>
 8002a54:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a5c:	e021      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a64:	d01a      	beq.n	8002a9c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_ADC_PollForConversion+0x168>
 8002a6c:	f7ff fd9e 	bl	80025ac <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d20f      	bcs.n	8002a9c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d90b      	bls.n	8002a9c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e030      	b.n	8002afe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d8d9      	bhi.n	8002a5e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f06f 0212 	mvn.w	r2, #18
 8002ab2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002aca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ace:	d115      	bne.n	8002afc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d111      	bne.n	8002afc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000008 	.word	0x20000008
 8002b0c:	24924924 	.word	0x24924924
 8002b10:	00924924 	.word	0x00924924
 8002b14:	12492492 	.word	0x12492492
 8002b18:	00492492 	.word	0x00492492
 8002b1c:	00249249 	.word	0x00249249

08002b20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x20>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0dc      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x1da>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d81c      	bhi.n	8002ba2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3b05      	subs	r3, #5
 8002b7a:	221f      	movs	r2, #31
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	4019      	ands	r1, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	3b05      	subs	r3, #5
 8002b94:	fa00 f203 	lsl.w	r2, r0, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba0:	e03c      	b.n	8002c1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d81c      	bhi.n	8002be4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b23      	subs	r3, #35	; 0x23
 8002bbc:	221f      	movs	r2, #31
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4019      	ands	r1, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3b23      	subs	r3, #35	; 0x23
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
 8002be2:	e01b      	b.n	8002c1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b41      	subs	r3, #65	; 0x41
 8002bf6:	221f      	movs	r2, #31
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4019      	ands	r1, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b41      	subs	r3, #65	; 0x41
 8002c10:	fa00 f203 	lsl.w	r2, r0, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d91c      	bls.n	8002c5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68d9      	ldr	r1, [r3, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	3b1e      	subs	r3, #30
 8002c36:	2207      	movs	r2, #7
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	4019      	ands	r1, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6898      	ldr	r0, [r3, #8]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b1e      	subs	r3, #30
 8002c50:	fa00 f203 	lsl.w	r2, r0, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	e019      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6919      	ldr	r1, [r3, #16]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	2207      	movs	r2, #7
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	4019      	ands	r1, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6898      	ldr	r0, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d003      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c9e:	2b11      	cmp	r3, #17
 8002ca0:	d132      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d125      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d126      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cc8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d11a      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_ADC_ConfigChannel+0x1ec>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	0c9a      	lsrs	r2, r3, #18
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ce8:	e002      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x1b2>
 8002cf6:	e007      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012400 	.word	0x40012400
 8002d20:	20000008 	.word	0x20000008
 8002d24:	431bde83 	.word	0x431bde83

08002d28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d040      	beq.n	8002dc8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <ADC_Enable+0xac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <ADC_Enable+0xb0>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	0c9b      	lsrs	r3, r3, #18
 8002d62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d64:	e002      	b.n	8002d6c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f9      	bne.n	8002d66 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d72:	f7ff fc1b 	bl	80025ac <HAL_GetTick>
 8002d76:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d78:	e01f      	b.n	8002dba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d7a:	f7ff fc17 	bl	80025ac <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d918      	bls.n	8002dba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d011      	beq.n	8002dba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e007      	b.n	8002dca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d1d8      	bne.n	8002d7a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	431bde83 	.word	0x431bde83

08002ddc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d12e      	bne.n	8002e54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e06:	f7ff fbd1 	bl	80025ac <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e0c:	e01b      	b.n	8002e46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e0e:	f7ff fbcd 	bl	80025ac <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d914      	bls.n	8002e46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10d      	bne.n	8002e46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e007      	b.n	8002e56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d0dc      	beq.n	8002e0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ADCEx_Calibration_Start+0x1e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e097      	b.n	8002fae <HAL_ADCEx_Calibration_Start+0x14e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffa8 	bl	8002ddc <ADC_ConversionStop_Disable>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff49 	bl	8002d28 <ADC_Enable>
 8002e96:	4603      	mov	r3, r0
 8002e98:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8081 	bne.w	8002fa4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eaa:	f023 0302 	bic.w	r3, r3, #2
 8002eae:	f043 0202 	orr.w	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002eb6:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_ADCEx_Calibration_Start+0x158>)
 8002eb8:	681c      	ldr	r4, [r3, #0]
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f000 fffe 	bl	8003ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ec6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002ec8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ee8:	f7ff fb60 	bl	80025ac <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002eee:	e01b      	b.n	8002f28 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ef0:	f7ff fb5c 	bl	80025ac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b0a      	cmp	r3, #10
 8002efc:	d914      	bls.n	8002f28 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f023 0312 	bic.w	r3, r3, #18
 8002f14:	f043 0210 	orr.w	r2, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e042      	b.n	8002fae <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1dc      	bne.n	8002ef0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0204 	orr.w	r2, r2, #4
 8002f44:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f46:	f7ff fb31 	bl	80025ac <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f4c:	e01b      	b.n	8002f86 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f4e:	f7ff fb2d 	bl	80025ac <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b0a      	cmp	r3, #10
 8002f5a:	d914      	bls.n	8002f86 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	f023 0312 	bic.w	r3, r3, #18
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e013      	b.n	8002fae <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1dc      	bne.n	8002f4e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	f023 0303 	bic.w	r3, r3, #3
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000008 	.word	0x20000008

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4906      	ldr	r1, [pc, #24]	; (8003054 <__NVIC_EnableIRQ+0x34>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100

08003058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	2b00      	cmp	r3, #0
 800306a:	db0a      	blt.n	8003082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <__NVIC_SetPriority+0x4c>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	440b      	add	r3, r1
 800307c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003080:	e00a      	b.n	8003098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <__NVIC_SetPriority+0x50>)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	3b04      	subs	r3, #4
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	440b      	add	r3, r1
 8003096:	761a      	strb	r2, [r3, #24]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000e100 	.word	0xe000e100
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f1c3 0307 	rsb	r3, r3, #7
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	bf28      	it	cs
 80030ca:	2304      	movcs	r3, #4
 80030cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d902      	bls.n	80030dc <NVIC_EncodePriority+0x30>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3b03      	subs	r3, #3
 80030da:	e000      	b.n	80030de <NVIC_EncodePriority+0x32>
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	401a      	ands	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43d9      	mvns	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	4313      	orrs	r3, r2
         );
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003134:	f7ff ff90 	bl	8003058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff2d 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317c:	f7ff ff42 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff90 	bl	80030ac <NVIC_EncodePriority>
 800318c:	4602      	mov	r2, r0
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff5f 	bl	8003058 <__NVIC_SetPriority>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff35 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffa2 	bl	8003110 <SysTick_Config>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b08b      	sub	sp, #44	; 0x2c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e161      	b.n	80034b0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031ec:	2201      	movs	r2, #1
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	429a      	cmp	r2, r3
 8003206:	f040 8150 	bne.w	80034aa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a97      	ldr	r2, [pc, #604]	; (800346c <HAL_GPIO_Init+0x294>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d05e      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003214:	4a95      	ldr	r2, [pc, #596]	; (800346c <HAL_GPIO_Init+0x294>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d875      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800321a:	4a95      	ldr	r2, [pc, #596]	; (8003470 <HAL_GPIO_Init+0x298>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d058      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003220:	4a93      	ldr	r2, [pc, #588]	; (8003470 <HAL_GPIO_Init+0x298>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d86f      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003226:	4a93      	ldr	r2, [pc, #588]	; (8003474 <HAL_GPIO_Init+0x29c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d052      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 800322c:	4a91      	ldr	r2, [pc, #580]	; (8003474 <HAL_GPIO_Init+0x29c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d869      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003232:	4a91      	ldr	r2, [pc, #580]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04c      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003238:	4a8f      	ldr	r2, [pc, #572]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d863      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800323e:	4a8f      	ldr	r2, [pc, #572]	; (800347c <HAL_GPIO_Init+0x2a4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d046      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003244:	4a8d      	ldr	r2, [pc, #564]	; (800347c <HAL_GPIO_Init+0x2a4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d85d      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800324a:	2b12      	cmp	r3, #18
 800324c:	d82a      	bhi.n	80032a4 <HAL_GPIO_Init+0xcc>
 800324e:	2b12      	cmp	r3, #18
 8003250:	d859      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_GPIO_Init+0x80>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	080032d3 	.word	0x080032d3
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080032bf 	.word	0x080032bf
 8003264:	08003301 	.word	0x08003301
 8003268:	08003307 	.word	0x08003307
 800326c:	08003307 	.word	0x08003307
 8003270:	08003307 	.word	0x08003307
 8003274:	08003307 	.word	0x08003307
 8003278:	08003307 	.word	0x08003307
 800327c:	08003307 	.word	0x08003307
 8003280:	08003307 	.word	0x08003307
 8003284:	08003307 	.word	0x08003307
 8003288:	08003307 	.word	0x08003307
 800328c:	08003307 	.word	0x08003307
 8003290:	08003307 	.word	0x08003307
 8003294:	08003307 	.word	0x08003307
 8003298:	08003307 	.word	0x08003307
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	4a76      	ldr	r2, [pc, #472]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032aa:	e02c      	b.n	8003306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	623b      	str	r3, [r7, #32]
          break;
 80032b2:	e029      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	3304      	adds	r3, #4
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e024      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	3308      	adds	r3, #8
 80032c4:	623b      	str	r3, [r7, #32]
          break;
 80032c6:	e01f      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	330c      	adds	r3, #12
 80032ce:	623b      	str	r3, [r7, #32]
          break;
 80032d0:	e01a      	b.n	8003308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032da:	2304      	movs	r3, #4
 80032dc:	623b      	str	r3, [r7, #32]
          break;
 80032de:	e013      	b.n	8003308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e8:	2308      	movs	r3, #8
 80032ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	611a      	str	r2, [r3, #16]
          break;
 80032f2:	e009      	b.n	8003308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f4:	2308      	movs	r3, #8
 80032f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	615a      	str	r2, [r3, #20]
          break;
 80032fe:	e003      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x130>
          break;
 8003306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d801      	bhi.n	8003312 <HAL_GPIO_Init+0x13a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_Init+0x13e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2bff      	cmp	r3, #255	; 0xff
 800331c:	d802      	bhi.n	8003324 <HAL_GPIO_Init+0x14c>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	e002      	b.n	800332a <HAL_GPIO_Init+0x152>
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3b08      	subs	r3, #8
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	210f      	movs	r1, #15
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80a9 	beq.w	80034aa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003358:	4b4a      	ldr	r3, [pc, #296]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a49      	ldr	r2, [pc, #292]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003370:	4a45      	ldr	r2, [pc, #276]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	; (800348c <HAL_GPIO_Init+0x2b4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00d      	beq.n	80033b8 <HAL_GPIO_Init+0x1e0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <HAL_GPIO_Init+0x1dc>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <HAL_GPIO_Init+0x2bc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_GPIO_Init+0x1d8>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e004      	b.n	80033ba <HAL_GPIO_Init+0x1e2>
 80033b0:	2303      	movs	r3, #3
 80033b2:	e002      	b.n	80033ba <HAL_GPIO_Init+0x1e2>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_GPIO_Init+0x1e2>
 80033b8:	2300      	movs	r3, #0
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	f002 0203 	and.w	r2, r2, #3
 80033c0:	0092      	lsls	r2, r2, #2
 80033c2:	4093      	lsls	r3, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ca:	492f      	ldr	r1, [pc, #188]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	3302      	adds	r3, #2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	492b      	ldr	r1, [pc, #172]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]
 80033f0:	e006      	b.n	8003400 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	4927      	ldr	r1, [pc, #156]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4921      	ldr	r1, [pc, #132]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
 8003418:	e006      	b.n	8003428 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	43db      	mvns	r3, r3
 8003422:	491d      	ldr	r1, [pc, #116]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003424:	4013      	ands	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003434:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4917      	ldr	r1, [pc, #92]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	e006      	b.n	8003450 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	43db      	mvns	r3, r3
 800344a:	4913      	ldr	r1, [pc, #76]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800344c:	4013      	ands	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01f      	beq.n	800349c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	490d      	ldr	r1, [pc, #52]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	e01f      	b.n	80034aa <HAL_GPIO_Init+0x2d2>
 800346a:	bf00      	nop
 800346c:	10320000 	.word	0x10320000
 8003470:	10310000 	.word	0x10310000
 8003474:	10220000 	.word	0x10220000
 8003478:	10210000 	.word	0x10210000
 800347c:	10120000 	.word	0x10120000
 8003480:	10110000 	.word	0x10110000
 8003484:	40021000 	.word	0x40021000
 8003488:	40010000 	.word	0x40010000
 800348c:	40010800 	.word	0x40010800
 8003490:	40010c00 	.word	0x40010c00
 8003494:	40011000 	.word	0x40011000
 8003498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_GPIO_Init+0x2f4>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4909      	ldr	r1, [pc, #36]	; (80034cc <HAL_GPIO_Init+0x2f4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f47f ae96 	bne.w	80031ec <HAL_GPIO_Init+0x14>
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	372c      	adds	r7, #44	; 0x2c
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	40010400 	.word	0x40010400

080034d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e001      	b.n	80034f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	807b      	strh	r3, [r7, #2]
 800350a:	4613      	mov	r3, r2
 800350c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800350e:	787b      	ldrb	r3, [r7, #1]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003514:	887a      	ldrh	r2, [r7, #2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800351a:	e003      	b.n	8003524 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800351c:	887b      	ldrh	r3, [r7, #2]
 800351e:	041a      	lsls	r2, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
	...

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e272      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355c:	4b8f      	ldr	r3, [pc, #572]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
 8003568:	4b8c      	ldr	r3, [pc, #560]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x12c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e24c      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x76>
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7f      	ldr	r2, [pc, #508]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b7b      	ldr	r3, [pc, #492]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7a      	ldr	r2, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b78      	ldr	r3, [pc, #480]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a77      	ldr	r2, [pc, #476]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xbc>
 80035d2:	4b72      	ldr	r3, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a71      	ldr	r2, [pc, #452]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6a      	ldr	r2, [pc, #424]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a67      	ldr	r2, [pc, #412]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe ffce 	bl	80025ac <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe ffca 	bl	80025ac <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e200      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5d      	ldr	r3, [pc, #372]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe4>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe ffba 	bl	80025ac <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe ffb6 	bl	80025ac <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1ec      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x10c>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c0      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4939      	ldr	r1, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe ff6f 	bl	80025ac <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fe ff6b 	bl	80025ac <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1a1      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4927      	ldr	r1, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe ff4e 	bl	80025ac <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fe ff4a 	bl	80025ac <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e180      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03a      	beq.n	80037b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d019      	beq.n	800377a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe ff2e 	bl	80025ac <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe ff2a 	bl	80025ac <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e160      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003772:	2001      	movs	r0, #1
 8003774:	f000 face 	bl	8003d14 <RCC_Delay>
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003780:	f7fe ff14 	bl	80025ac <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003786:	e00f      	b.n	80037a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fe ff10 	bl	80025ac <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d908      	bls.n	80037a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e146      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	42420000 	.word	0x42420000
 80037a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b92      	ldr	r3, [pc, #584]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e9      	bne.n	8003788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a6 	beq.w	800390e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4a87      	ldr	r2, [pc, #540]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	61d3      	str	r3, [r2, #28]
 80037de:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fe fed1 	bl	80025ac <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fe fecd 	bl	80025ac <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e103      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x312>
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e02d      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x334>
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6213      	str	r3, [r2, #32]
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x356>
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4a60      	ldr	r2, [pc, #384]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6213      	str	r3, [r2, #32]
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7fe fe81 	bl	80025ac <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe fe7d 	bl	80025ac <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0b1      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x37e>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fe fe6b 	bl	80025ac <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe fe67 	bl	80025ac <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e09b      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8087 	beq.w	8003a26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d061      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d146      	bne.n	80039ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCC_OscConfig+0x4cc>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe fe3b 	bl	80025ac <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe fe37 	bl	80025ac <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e06d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394c:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d108      	bne.n	8003974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4921      	ldr	r1, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a19      	ldr	r1, [r3, #32]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	430b      	orrs	r3, r1
 8003986:	491b      	ldr	r1, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x4cc>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe fe0b 	bl	80025ac <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe fe07 	bl	80025ac <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x46a>
 80039b8:	e035      	b.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fdf4 	bl	80025ac <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe fdf0 	bl	80025ac <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e026      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x498>
 80039e6:	e01e      	b.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e019      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x500>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0d0      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	4965      	ldr	r1, [pc, #404]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ab2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d040      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e073      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4936      	ldr	r1, [pc, #216]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fe fd42 	bl	80025ac <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fe fd3e 	bl	80025ac <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e053      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d210      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0207 	bic.w	r2, r3, #7
 8003b6a:	4922      	ldr	r1, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f821 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1cc>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1d0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fca0 	bl	8002528 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08005e78 	.word	0x08005e78
 8003c00:	20000008 	.word	0x20000008
 8003c04:	2000000c 	.word	0x2000000c

08003c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x30>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x36>
 8003c36:	e027      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c3a:	613b      	str	r3, [r7, #16]
      break;
 8003c3c:	e027      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0c5b      	lsrs	r3, r3, #17
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	fb03 f202 	mul.w	r2, r3, r2
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e004      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	613b      	str	r3, [r7, #16]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8a:	613b      	str	r3, [r7, #16]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	693b      	ldr	r3, [r7, #16]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	007a1200 	.word	0x007a1200
 8003ca4:	08005e90 	.word	0x08005e90
 8003ca8:	08005ea0 	.word	0x08005ea0
 8003cac:	003d0900 	.word	0x003d0900

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff2 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08005e88 	.word	0x08005e88

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf0:	f7ff ffde 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08005e88 	.word	0x08005e88

08003d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <RCC_Delay+0x34>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <RCC_Delay+0x38>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0a5b      	lsrs	r3, r3, #9
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d30:	bf00      	nop
  }
  while (Delay --);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	60fa      	str	r2, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f9      	bne.n	8003d30 <RCC_Delay+0x1c>
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	10624dd3 	.word	0x10624dd3

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d07d      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b4c      	ldr	r3, [pc, #304]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
 8003d88:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b46      	ldr	r3, [pc, #280]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d118      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da4:	4b43      	ldr	r3, [pc, #268]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a42      	ldr	r2, [pc, #264]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db0:	f7fe fbfc 	bl	80025ac <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fe fbf8 	bl	80025ac <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e06d      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b3a      	ldr	r3, [pc, #232]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d027      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df4:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e0a:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d014      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fbc7 	bl	80025ac <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fe fbc3 	bl	80025ac <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e036      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4917      	ldr	r1, [pc, #92]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	490b      	ldr	r1, [pc, #44]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	42420440 	.word	0x42420440

08003ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	f200 808a 	bhi.w	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d045      	beq.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d075      	beq.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ef2:	e082      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ef4:	4b46      	ldr	r3, [pc, #280]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003efa:	4b45      	ldr	r3, [pc, #276]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d07b      	beq.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	0c9b      	lsrs	r3, r3, #18
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a41      	ldr	r2, [pc, #260]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	0c5b      	lsrs	r3, r3, #17
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f38:	4a38      	ldr	r2, [pc, #224]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e004      	b.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4a34      	ldr	r2, [pc, #208]	; (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f60:	d102      	bne.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	61bb      	str	r3, [r7, #24]
      break;
 8003f66:	e04a      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
      break;
 8003f76:	e042      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f88:	d108      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e01f      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003fb4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e00f      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc6:	d11c      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003fd4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fd8:	61bb      	str	r3, [r7, #24]
      break;
 8003fda:	e012      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fdc:	e011      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fde:	f7ff fe85 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0b9b      	lsrs	r3, r3, #14
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
      break;
 8003ff8:	e004      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004002:	bf00      	nop
    }
  }
  return (frequency);
 8004004:	69bb      	ldr	r3, [r7, #24]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	08005ea4 	.word	0x08005ea4
 8004018:	08005eb4 	.word	0x08005eb4
 800401c:	007a1200 	.word	0x007a1200
 8004020:	003d0900 	.word	0x003d0900
 8004024:	aaaaaaab 	.word	0xaaaaaaab

08004028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e076      	b.n	8004128 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404a:	d009      	beq.n	8004060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	61da      	str	r2, [r3, #28]
 8004052:	e005      	b.n	8004060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd ffd4 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004096:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e4:	ea42 0103 	orr.w	r1, r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	0c1a      	lsrs	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f002 0204 	and.w	r2, r2, #4
 8004106:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004116:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_SPI_Transmit+0x22>
 800414e:	2302      	movs	r3, #2
 8004150:	e12d      	b.n	80043ae <HAL_SPI_Transmit+0x27e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415a:	f7fe fa27 	bl	80025ac <HAL_GetTick>
 800415e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004174:	e116      	b.n	80043a4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_Transmit+0x52>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004186:	e10d      	b.n	80043a4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2203      	movs	r2, #3
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ce:	d10f      	bne.n	80041f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d007      	beq.n	800420e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d14f      	bne.n	80042b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_SPI_Transmit+0xf6>
 8004220:	8afb      	ldrh	r3, [r7, #22]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d142      	bne.n	80042ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800424a:	e02f      	b.n	80042ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d112      	bne.n	8004280 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	86da      	strh	r2, [r3, #54]	; 0x36
 800427e:	e015      	b.n	80042ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004280:	f7fe f994 	bl	80025ac <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d803      	bhi.n	8004298 <HAL_SPI_Transmit+0x168>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004296:	d102      	bne.n	800429e <HAL_SPI_Transmit+0x16e>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042aa:	e07b      	b.n	80043a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ca      	bne.n	800424c <HAL_SPI_Transmit+0x11c>
 80042b6:	e050      	b.n	800435a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_Transmit+0x196>
 80042c0:	8afb      	ldrh	r3, [r7, #22]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d144      	bne.n	8004350 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ec:	e030      	b.n	8004350 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d113      	bne.n	8004324 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	86da      	strh	r2, [r3, #54]	; 0x36
 8004322:	e015      	b.n	8004350 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004324:	f7fe f942 	bl	80025ac <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d803      	bhi.n	800433c <HAL_SPI_Transmit+0x20c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433a:	d102      	bne.n	8004342 <HAL_SPI_Transmit+0x212>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800434e:	e029      	b.n	80043a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1c9      	bne.n	80042ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	6839      	ldr	r1, [r7, #0]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fbcc 	bl	8004afc <SPI_EndRxTxTransaction>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e003      	b.n	80043a4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af02      	add	r7, sp, #8
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
 80043d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043da:	e0fb      	b.n	80045d4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e4:	d112      	bne.n	800440c <HAL_SPI_Receive+0x56>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2204      	movs	r2, #4
 80043f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f8ef 	bl	80045e6 <HAL_SPI_TransmitReceive>
 8004408:	4603      	mov	r3, r0
 800440a:	e0e8      	b.n	80045de <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_SPI_Receive+0x64>
 8004416:	2302      	movs	r3, #2
 8004418:	e0e1      	b.n	80045de <HAL_SPI_Receive+0x228>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004422:	f7fe f8c3 	bl	80025ac <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Receive+0x7e>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004438:	e0cc      	b.n	80045d4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2204      	movs	r2, #4
 800443e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	d10f      	bne.n	80044a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d007      	beq.n	80044c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d16a      	bne.n	800459e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044c8:	e032      	b.n	8004530 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d115      	bne.n	8004504 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f103 020c 	add.w	r2, r3, #12
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004502:	e015      	b.n	8004530 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004504:	f7fe f852 	bl	80025ac <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d803      	bhi.n	800451c <HAL_SPI_Receive+0x166>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800451a:	d102      	bne.n	8004522 <HAL_SPI_Receive+0x16c>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800452e:	e051      	b.n	80045d4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1c7      	bne.n	80044ca <HAL_SPI_Receive+0x114>
 800453a:	e035      	b.n	80045a8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d113      	bne.n	8004572 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	b292      	uxth	r2, r2
 8004556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	1c9a      	adds	r2, r3, #2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004570:	e015      	b.n	800459e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004572:	f7fe f81b 	bl	80025ac <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d803      	bhi.n	800458a <HAL_SPI_Receive+0x1d4>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004588:	d102      	bne.n	8004590 <HAL_SPI_Receive+0x1da>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800459c:	e01a      	b.n	80045d4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1c9      	bne.n	800453c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa53 	bl	8004a58 <SPI_EndRxTransaction>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	e003      	b.n	80045d4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08c      	sub	sp, #48	; 0x30
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045f4:	2301      	movs	r3, #1
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_SPI_TransmitReceive+0x26>
 8004608:	2302      	movs	r3, #2
 800460a:	e198      	b.n	800493e <HAL_SPI_TransmitReceive+0x358>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004614:	f7fd ffca 	bl	80025ac <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800462e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004632:	2b01      	cmp	r3, #1
 8004634:	d00f      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x70>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463c:	d107      	bne.n	800464e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <HAL_SPI_TransmitReceive+0x68>
 8004646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800464a:	2b04      	cmp	r3, #4
 800464c:	d003      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800464e:	2302      	movs	r3, #2
 8004650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004654:	e16d      	b.n	8004932 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x82>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x82>
 8004662:	887b      	ldrh	r3, [r7, #2]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800466e:	e160      	b.n	8004932 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b04      	cmp	r3, #4
 800467a:	d003      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2205      	movs	r2, #5
 8004680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	887a      	ldrh	r2, [r7, #2]
 80046a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	887a      	ldrh	r2, [r7, #2]
 80046ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d007      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e0:	d17c      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x10a>
 80046ea:	8b7b      	ldrh	r3, [r7, #26]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d16a      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004714:	e057      	b.n	80047c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d11b      	bne.n	800475c <HAL_SPI_TransmitReceive+0x176>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <HAL_SPI_TransmitReceive+0x176>
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d113      	bne.n	800475c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	881a      	ldrh	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	d119      	bne.n	800479e <HAL_SPI_TransmitReceive+0x1b8>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d014      	beq.n	800479e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	b292      	uxth	r2, r2
 8004780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800479a:	2301      	movs	r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800479e:	f7fd ff05 	bl	80025ac <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d80b      	bhi.n	80047c6 <HAL_SPI_TransmitReceive+0x1e0>
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d007      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80047c4:	e0b5      	b.n	8004932 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1a2      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x130>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d19d      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x130>
 80047da:	e080      	b.n	80048de <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x204>
 80047e4:	8b7b      	ldrh	r3, [r7, #26]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d16f      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	e05b      	b.n	80048ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d11c      	bne.n	800485a <HAL_SPI_TransmitReceive+0x274>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d017      	beq.n	800485a <HAL_SPI_TransmitReceive+0x274>
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d114      	bne.n	800485a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d119      	bne.n	800489c <HAL_SPI_TransmitReceive+0x2b6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d014      	beq.n	800489c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800489c:	f7fd fe86 	bl	80025ac <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d803      	bhi.n	80048b4 <HAL_SPI_TransmitReceive+0x2ce>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x2d4>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80048c8:	e033      	b.n	8004932 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d19e      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x22c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d199      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f90a 	bl	8004afc <SPI_EndRxTxTransaction>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048fa:	e01a      	b.n	8004932 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004928:	e003      	b.n	8004932 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800493a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	; 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004958:	f7fd fe28 	bl	80025ac <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4413      	add	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004968:	f7fd fe20 	bl	80025ac <HAL_GetTick>
 800496c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	0d1b      	lsrs	r3, r3, #20
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497e:	e054      	b.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004986:	d050      	beq.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004988:	f7fd fe10 	bl	80025ac <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	429a      	cmp	r2, r3
 8004996:	d902      	bls.n	800499e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13d      	bne.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b6:	d111      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	d004      	beq.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d107      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e4:	d10f      	bne.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e017      	b.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d19b      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000008 	.word	0x20000008

08004a58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6c:	d111      	bne.n	8004a92 <SPI_EndRxTransaction+0x3a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	d004      	beq.n	8004a82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d107      	bne.n	8004a92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a90:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9a:	d117      	bne.n	8004acc <SPI_EndRxTransaction+0x74>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	d112      	bne.n	8004acc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2101      	movs	r1, #1
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff ff49 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01a      	beq.n	8004af2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e013      	b.n	8004af4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2180      	movs	r1, #128	; 0x80
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff ff36 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e000      	b.n	8004af4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff ff18 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f043 0220 	orr.w	r2, r3, #32
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e000      	b.n	8004b30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e041      	b.n	8004bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fd fbf0 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f000 fa6e 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d001      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e035      	b.n	8004c5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <HAL_TIM_Base_Start_IT+0x90>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x4e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x4e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <HAL_TIM_Base_Start_IT+0x94>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d010      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	e007      	b.n	8004c5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40000400 	.word	0x40000400

08004c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0202 	mvn.w	r2, #2
 8004c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9b4 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9a7 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9b6 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0204 	mvn.w	r2, #4
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f98a 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f97d 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f98c 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f960 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f953 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f962 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0210 	mvn.w	r2, #16
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f936 	bl	8005020 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f929 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f938 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0201 	mvn.w	r2, #1
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc fb16 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa6b 	bl	80052f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d10e      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d107      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f8fc 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d10e      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d107      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0220 	mvn.w	r2, #32
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa36 	bl	80052e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_ConfigClockSource+0x1c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0b4      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x186>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d03e      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0xd4>
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	f200 8087 	bhi.w	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	f000 8086 	beq.w	8004ff2 <HAL_TIM_ConfigClockSource+0x172>
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eea:	d87f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b70      	cmp	r3, #112	; 0x70
 8004eee:	d01a      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0xa6>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d87b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b60      	cmp	r3, #96	; 0x60
 8004ef6:	d050      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x11a>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d877      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b50      	cmp	r3, #80	; 0x50
 8004efe:	d03c      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xfa>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d873      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d058      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x13a>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d86f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d064      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d86b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d060      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d867      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d05c      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d05a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	e062      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f000 f95e 	bl	80051f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]
      break;
 8004f52:	e04f      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f000 f947 	bl	80051f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f76:	609a      	str	r2, [r3, #8]
      break;
 8004f78:	e03c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f000 f8be 	bl	8005108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2150      	movs	r1, #80	; 0x50
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f915 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004f98:	e02c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 f8dc 	bl	8005164 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2160      	movs	r1, #96	; 0x60
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f905 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e01c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 f89e 	bl	8005108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f8f5 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e00c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 f8ec 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004fea:	e003      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e000      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
	...

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a25      	ldr	r2, [pc, #148]	; (8005100 <TIM_Base_SetConfig+0xa8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0x28>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0x28>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a22      	ldr	r2, [pc, #136]	; (8005104 <TIM_Base_SetConfig+0xac>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1a      	ldr	r2, [pc, #104]	; (8005100 <TIM_Base_SetConfig+0xa8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a17      	ldr	r2, [pc, #92]	; (8005104 <TIM_Base_SetConfig+0xac>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <TIM_Base_SetConfig+0xa8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d103      	bne.n	80050f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	615a      	str	r2, [r3, #20]
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40000400 	.word	0x40000400

08005108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 030a 	bic.w	r3, r3, #10
 8005144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0210 	bic.w	r2, r3, #16
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f043 0307 	orr.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	021a      	lsls	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	431a      	orrs	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4313      	orrs	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e041      	b.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a14      	ldr	r2, [pc, #80]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005298:	d004      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400

080052e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e042      	b.n	80053a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fd f872 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f82b 	bl	80053a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80053e2:	f023 030c 	bic.w	r3, r3, #12
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2c      	ldr	r2, [pc, #176]	; (80054bc <UART_SetConfig+0x114>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d103      	bne.n	8005418 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7fe fc6c 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	e002      	b.n	800541e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fe fc54 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 800541c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009a      	lsls	r2, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <UART_SetConfig+0x118>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	0119      	lsls	r1, r3, #4
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009a      	lsls	r2, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	fbb2 f2f3 	udiv	r2, r2, r3
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <UART_SetConfig+0x118>)
 8005456:	fba3 0302 	umull	r0, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2064      	movs	r0, #100	; 0x64
 800545e:	fb00 f303 	mul.w	r3, r0, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	3332      	adds	r3, #50	; 0x32
 8005468:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <UART_SetConfig+0x118>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005474:	4419      	add	r1, r3
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009a      	lsls	r2, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	fbb2 f2f3 	udiv	r2, r2, r3
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <UART_SetConfig+0x118>)
 800548e:	fba3 0302 	umull	r0, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2064      	movs	r0, #100	; 0x64
 8005496:	fb00 f303 	mul.w	r3, r0, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	3332      	adds	r3, #50	; 0x32
 80054a0:	4a07      	ldr	r2, [pc, #28]	; (80054c0 <UART_SetConfig+0x118>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	f003 020f 	and.w	r2, r3, #15
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	440a      	add	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40013800 	.word	0x40013800
 80054c0:	51eb851f 	.word	0x51eb851f

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	; (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000014 	.word	0x20000014

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	2600      	movs	r6, #0
 80054d4:	4d0c      	ldr	r5, [pc, #48]	; (8005508 <__libc_init_array+0x38>)
 80054d6:	4c0d      	ldr	r4, [pc, #52]	; (800550c <__libc_init_array+0x3c>)
 80054d8:	1b64      	subs	r4, r4, r5
 80054da:	10a4      	asrs	r4, r4, #2
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	f000 fc9c 	bl	8005e1c <_init>
 80054e4:	2600      	movs	r6, #0
 80054e6:	4d0a      	ldr	r5, [pc, #40]	; (8005510 <__libc_init_array+0x40>)
 80054e8:	4c0a      	ldr	r4, [pc, #40]	; (8005514 <__libc_init_array+0x44>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	08005eec 	.word	0x08005eec
 800550c:	08005eec 	.word	0x08005eec
 8005510:	08005eec 	.word	0x08005eec
 8005514:	08005ef0 	.word	0x08005ef0

08005518 <memcpy>:
 8005518:	440a      	add	r2, r1
 800551a:	4291      	cmp	r1, r2
 800551c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005520:	d100      	bne.n	8005524 <memcpy+0xc>
 8005522:	4770      	bx	lr
 8005524:	b510      	push	{r4, lr}
 8005526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800552a:	4291      	cmp	r1, r2
 800552c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005530:	d1f9      	bne.n	8005526 <memcpy+0xe>
 8005532:	bd10      	pop	{r4, pc}

08005534 <memset>:
 8005534:	4603      	mov	r3, r0
 8005536:	4402      	add	r2, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <siprintf>:
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800554a:	b500      	push	{lr}
 800554c:	b09c      	sub	sp, #112	; 0x70
 800554e:	ab1d      	add	r3, sp, #116	; 0x74
 8005550:	9002      	str	r0, [sp, #8]
 8005552:	9006      	str	r0, [sp, #24]
 8005554:	9107      	str	r1, [sp, #28]
 8005556:	9104      	str	r1, [sp, #16]
 8005558:	4808      	ldr	r0, [pc, #32]	; (800557c <siprintf+0x38>)
 800555a:	4909      	ldr	r1, [pc, #36]	; (8005580 <siprintf+0x3c>)
 800555c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	a902      	add	r1, sp, #8
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	f000 f868 	bl	800563c <_svfiprintf_r>
 800556c:	2200      	movs	r2, #0
 800556e:	9b02      	ldr	r3, [sp, #8]
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	b01c      	add	sp, #112	; 0x70
 8005574:	f85d eb04 	ldr.w	lr, [sp], #4
 8005578:	b003      	add	sp, #12
 800557a:	4770      	bx	lr
 800557c:	20000014 	.word	0x20000014
 8005580:	ffff0208 	.word	0xffff0208

08005584 <__ssputs_r>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	688e      	ldr	r6, [r1, #8]
 800558a:	4682      	mov	sl, r0
 800558c:	429e      	cmp	r6, r3
 800558e:	460c      	mov	r4, r1
 8005590:	4690      	mov	r8, r2
 8005592:	461f      	mov	r7, r3
 8005594:	d838      	bhi.n	8005608 <__ssputs_r+0x84>
 8005596:	898a      	ldrh	r2, [r1, #12]
 8005598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800559c:	d032      	beq.n	8005604 <__ssputs_r+0x80>
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	6909      	ldr	r1, [r1, #16]
 80055a2:	3301      	adds	r3, #1
 80055a4:	eba5 0901 	sub.w	r9, r5, r1
 80055a8:	6965      	ldr	r5, [r4, #20]
 80055aa:	444b      	add	r3, r9
 80055ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055b4:	106d      	asrs	r5, r5, #1
 80055b6:	429d      	cmp	r5, r3
 80055b8:	bf38      	it	cc
 80055ba:	461d      	movcc	r5, r3
 80055bc:	0553      	lsls	r3, r2, #21
 80055be:	d531      	bpl.n	8005624 <__ssputs_r+0xa0>
 80055c0:	4629      	mov	r1, r5
 80055c2:	f000 fb61 	bl	8005c88 <_malloc_r>
 80055c6:	4606      	mov	r6, r0
 80055c8:	b950      	cbnz	r0, 80055e0 <__ssputs_r+0x5c>
 80055ca:	230c      	movs	r3, #12
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d0:	f8ca 3000 	str.w	r3, [sl]
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	464a      	mov	r2, r9
 80055e2:	6921      	ldr	r1, [r4, #16]
 80055e4:	f7ff ff98 	bl	8005518 <memcpy>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	6126      	str	r6, [r4, #16]
 80055f6:	444e      	add	r6, r9
 80055f8:	6026      	str	r6, [r4, #0]
 80055fa:	463e      	mov	r6, r7
 80055fc:	6165      	str	r5, [r4, #20]
 80055fe:	eba5 0509 	sub.w	r5, r5, r9
 8005602:	60a5      	str	r5, [r4, #8]
 8005604:	42be      	cmp	r6, r7
 8005606:	d900      	bls.n	800560a <__ssputs_r+0x86>
 8005608:	463e      	mov	r6, r7
 800560a:	4632      	mov	r2, r6
 800560c:	4641      	mov	r1, r8
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	f000 fab8 	bl	8005b84 <memmove>
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	2000      	movs	r0, #0
 8005618:	1b9b      	subs	r3, r3, r6
 800561a:	60a3      	str	r3, [r4, #8]
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	4433      	add	r3, r6
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	e7db      	b.n	80055dc <__ssputs_r+0x58>
 8005624:	462a      	mov	r2, r5
 8005626:	f000 fba3 	bl	8005d70 <_realloc_r>
 800562a:	4606      	mov	r6, r0
 800562c:	2800      	cmp	r0, #0
 800562e:	d1e1      	bne.n	80055f4 <__ssputs_r+0x70>
 8005630:	4650      	mov	r0, sl
 8005632:	6921      	ldr	r1, [r4, #16]
 8005634:	f000 fac0 	bl	8005bb8 <_free_r>
 8005638:	e7c7      	b.n	80055ca <__ssputs_r+0x46>
	...

0800563c <_svfiprintf_r>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	4698      	mov	r8, r3
 8005642:	898b      	ldrh	r3, [r1, #12]
 8005644:	4607      	mov	r7, r0
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	460d      	mov	r5, r1
 800564a:	4614      	mov	r4, r2
 800564c:	b09d      	sub	sp, #116	; 0x74
 800564e:	d50e      	bpl.n	800566e <_svfiprintf_r+0x32>
 8005650:	690b      	ldr	r3, [r1, #16]
 8005652:	b963      	cbnz	r3, 800566e <_svfiprintf_r+0x32>
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	f000 fb17 	bl	8005c88 <_malloc_r>
 800565a:	6028      	str	r0, [r5, #0]
 800565c:	6128      	str	r0, [r5, #16]
 800565e:	b920      	cbnz	r0, 800566a <_svfiprintf_r+0x2e>
 8005660:	230c      	movs	r3, #12
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005668:	e0d1      	b.n	800580e <_svfiprintf_r+0x1d2>
 800566a:	2340      	movs	r3, #64	; 0x40
 800566c:	616b      	str	r3, [r5, #20]
 800566e:	2300      	movs	r3, #0
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	2320      	movs	r3, #32
 8005674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005678:	2330      	movs	r3, #48	; 0x30
 800567a:	f04f 0901 	mov.w	r9, #1
 800567e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005682:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005828 <_svfiprintf_r+0x1ec>
 8005686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800568a:	4623      	mov	r3, r4
 800568c:	469a      	mov	sl, r3
 800568e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005692:	b10a      	cbz	r2, 8005698 <_svfiprintf_r+0x5c>
 8005694:	2a25      	cmp	r2, #37	; 0x25
 8005696:	d1f9      	bne.n	800568c <_svfiprintf_r+0x50>
 8005698:	ebba 0b04 	subs.w	fp, sl, r4
 800569c:	d00b      	beq.n	80056b6 <_svfiprintf_r+0x7a>
 800569e:	465b      	mov	r3, fp
 80056a0:	4622      	mov	r2, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff ff6d 	bl	8005584 <__ssputs_r>
 80056aa:	3001      	adds	r0, #1
 80056ac:	f000 80aa 	beq.w	8005804 <_svfiprintf_r+0x1c8>
 80056b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056b2:	445a      	add	r2, fp
 80056b4:	9209      	str	r2, [sp, #36]	; 0x24
 80056b6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80a2 	beq.w	8005804 <_svfiprintf_r+0x1c8>
 80056c0:	2300      	movs	r3, #0
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ca:	f10a 0a01 	add.w	sl, sl, #1
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	9307      	str	r3, [sp, #28]
 80056d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056d6:	931a      	str	r3, [sp, #104]	; 0x68
 80056d8:	4654      	mov	r4, sl
 80056da:	2205      	movs	r2, #5
 80056dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e0:	4851      	ldr	r0, [pc, #324]	; (8005828 <_svfiprintf_r+0x1ec>)
 80056e2:	f000 fa41 	bl	8005b68 <memchr>
 80056e6:	9a04      	ldr	r2, [sp, #16]
 80056e8:	b9d8      	cbnz	r0, 8005722 <_svfiprintf_r+0xe6>
 80056ea:	06d0      	lsls	r0, r2, #27
 80056ec:	bf44      	itt	mi
 80056ee:	2320      	movmi	r3, #32
 80056f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f4:	0711      	lsls	r1, r2, #28
 80056f6:	bf44      	itt	mi
 80056f8:	232b      	movmi	r3, #43	; 0x2b
 80056fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005702:	2b2a      	cmp	r3, #42	; 0x2a
 8005704:	d015      	beq.n	8005732 <_svfiprintf_r+0xf6>
 8005706:	4654      	mov	r4, sl
 8005708:	2000      	movs	r0, #0
 800570a:	f04f 0c0a 	mov.w	ip, #10
 800570e:	9a07      	ldr	r2, [sp, #28]
 8005710:	4621      	mov	r1, r4
 8005712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005716:	3b30      	subs	r3, #48	; 0x30
 8005718:	2b09      	cmp	r3, #9
 800571a:	d94e      	bls.n	80057ba <_svfiprintf_r+0x17e>
 800571c:	b1b0      	cbz	r0, 800574c <_svfiprintf_r+0x110>
 800571e:	9207      	str	r2, [sp, #28]
 8005720:	e014      	b.n	800574c <_svfiprintf_r+0x110>
 8005722:	eba0 0308 	sub.w	r3, r0, r8
 8005726:	fa09 f303 	lsl.w	r3, r9, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	46a2      	mov	sl, r4
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	e7d2      	b.n	80056d8 <_svfiprintf_r+0x9c>
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	9103      	str	r1, [sp, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfbb      	ittet	lt
 800573e:	425b      	neglt	r3, r3
 8005740:	f042 0202 	orrlt.w	r2, r2, #2
 8005744:	9307      	strge	r3, [sp, #28]
 8005746:	9307      	strlt	r3, [sp, #28]
 8005748:	bfb8      	it	lt
 800574a:	9204      	strlt	r2, [sp, #16]
 800574c:	7823      	ldrb	r3, [r4, #0]
 800574e:	2b2e      	cmp	r3, #46	; 0x2e
 8005750:	d10c      	bne.n	800576c <_svfiprintf_r+0x130>
 8005752:	7863      	ldrb	r3, [r4, #1]
 8005754:	2b2a      	cmp	r3, #42	; 0x2a
 8005756:	d135      	bne.n	80057c4 <_svfiprintf_r+0x188>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3402      	adds	r4, #2
 800575c:	1d1a      	adds	r2, r3, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	9203      	str	r2, [sp, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb8      	it	lt
 8005766:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800582c <_svfiprintf_r+0x1f0>
 8005770:	2203      	movs	r2, #3
 8005772:	4650      	mov	r0, sl
 8005774:	7821      	ldrb	r1, [r4, #0]
 8005776:	f000 f9f7 	bl	8005b68 <memchr>
 800577a:	b140      	cbz	r0, 800578e <_svfiprintf_r+0x152>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	eba0 000a 	sub.w	r0, r0, sl
 8005782:	fa03 f000 	lsl.w	r0, r3, r0
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	3401      	adds	r4, #1
 800578a:	4303      	orrs	r3, r0
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005792:	2206      	movs	r2, #6
 8005794:	4826      	ldr	r0, [pc, #152]	; (8005830 <_svfiprintf_r+0x1f4>)
 8005796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800579a:	f000 f9e5 	bl	8005b68 <memchr>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d038      	beq.n	8005814 <_svfiprintf_r+0x1d8>
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <_svfiprintf_r+0x1f8>)
 80057a4:	bb1b      	cbnz	r3, 80057ee <_svfiprintf_r+0x1b2>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	3307      	adds	r3, #7
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	3308      	adds	r3, #8
 80057b0:	9303      	str	r3, [sp, #12]
 80057b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b4:	4433      	add	r3, r6
 80057b6:	9309      	str	r3, [sp, #36]	; 0x24
 80057b8:	e767      	b.n	800568a <_svfiprintf_r+0x4e>
 80057ba:	460c      	mov	r4, r1
 80057bc:	2001      	movs	r0, #1
 80057be:	fb0c 3202 	mla	r2, ip, r2, r3
 80057c2:	e7a5      	b.n	8005710 <_svfiprintf_r+0xd4>
 80057c4:	2300      	movs	r3, #0
 80057c6:	f04f 0c0a 	mov.w	ip, #10
 80057ca:	4619      	mov	r1, r3
 80057cc:	3401      	adds	r4, #1
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	4620      	mov	r0, r4
 80057d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057d6:	3a30      	subs	r2, #48	; 0x30
 80057d8:	2a09      	cmp	r2, #9
 80057da:	d903      	bls.n	80057e4 <_svfiprintf_r+0x1a8>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0c5      	beq.n	800576c <_svfiprintf_r+0x130>
 80057e0:	9105      	str	r1, [sp, #20]
 80057e2:	e7c3      	b.n	800576c <_svfiprintf_r+0x130>
 80057e4:	4604      	mov	r4, r0
 80057e6:	2301      	movs	r3, #1
 80057e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ec:	e7f0      	b.n	80057d0 <_svfiprintf_r+0x194>
 80057ee:	ab03      	add	r3, sp, #12
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	462a      	mov	r2, r5
 80057f4:	4638      	mov	r0, r7
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <_svfiprintf_r+0x1fc>)
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	f3af 8000 	nop.w
 80057fe:	1c42      	adds	r2, r0, #1
 8005800:	4606      	mov	r6, r0
 8005802:	d1d6      	bne.n	80057b2 <_svfiprintf_r+0x176>
 8005804:	89ab      	ldrh	r3, [r5, #12]
 8005806:	065b      	lsls	r3, r3, #25
 8005808:	f53f af2c 	bmi.w	8005664 <_svfiprintf_r+0x28>
 800580c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800580e:	b01d      	add	sp, #116	; 0x74
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005814:	ab03      	add	r3, sp, #12
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	462a      	mov	r2, r5
 800581a:	4638      	mov	r0, r7
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <_svfiprintf_r+0x1fc>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	f000 f87c 	bl	800591c <_printf_i>
 8005824:	e7eb      	b.n	80057fe <_svfiprintf_r+0x1c2>
 8005826:	bf00      	nop
 8005828:	08005eb6 	.word	0x08005eb6
 800582c:	08005ebc 	.word	0x08005ebc
 8005830:	08005ec0 	.word	0x08005ec0
 8005834:	00000000 	.word	0x00000000
 8005838:	08005585 	.word	0x08005585

0800583c <_printf_common>:
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	4616      	mov	r6, r2
 8005842:	4699      	mov	r9, r3
 8005844:	688a      	ldr	r2, [r1, #8]
 8005846:	690b      	ldr	r3, [r1, #16]
 8005848:	4607      	mov	r7, r0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfb8      	it	lt
 800584e:	4613      	movlt	r3, r2
 8005850:	6033      	str	r3, [r6, #0]
 8005852:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005856:	460c      	mov	r4, r1
 8005858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800585c:	b10a      	cbz	r2, 8005862 <_printf_common+0x26>
 800585e:	3301      	adds	r3, #1
 8005860:	6033      	str	r3, [r6, #0]
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	0699      	lsls	r1, r3, #26
 8005866:	bf42      	ittt	mi
 8005868:	6833      	ldrmi	r3, [r6, #0]
 800586a:	3302      	addmi	r3, #2
 800586c:	6033      	strmi	r3, [r6, #0]
 800586e:	6825      	ldr	r5, [r4, #0]
 8005870:	f015 0506 	ands.w	r5, r5, #6
 8005874:	d106      	bne.n	8005884 <_printf_common+0x48>
 8005876:	f104 0a19 	add.w	sl, r4, #25
 800587a:	68e3      	ldr	r3, [r4, #12]
 800587c:	6832      	ldr	r2, [r6, #0]
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	42ab      	cmp	r3, r5
 8005882:	dc28      	bgt.n	80058d6 <_printf_common+0x9a>
 8005884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005888:	1e13      	subs	r3, r2, #0
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	bf18      	it	ne
 800588e:	2301      	movne	r3, #1
 8005890:	0692      	lsls	r2, r2, #26
 8005892:	d42d      	bmi.n	80058f0 <_printf_common+0xb4>
 8005894:	4649      	mov	r1, r9
 8005896:	4638      	mov	r0, r7
 8005898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800589c:	47c0      	blx	r8
 800589e:	3001      	adds	r0, #1
 80058a0:	d020      	beq.n	80058e4 <_printf_common+0xa8>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	68e5      	ldr	r5, [r4, #12]
 80058a6:	f003 0306 	and.w	r3, r3, #6
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	bf18      	it	ne
 80058ae:	2500      	movne	r5, #0
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	f04f 0600 	mov.w	r6, #0
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	bf08      	it	eq
 80058ba:	1aad      	subeq	r5, r5, r2
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	bf08      	it	eq
 80058c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bfc4      	itt	gt
 80058c8:	1a9b      	subgt	r3, r3, r2
 80058ca:	18ed      	addgt	r5, r5, r3
 80058cc:	341a      	adds	r4, #26
 80058ce:	42b5      	cmp	r5, r6
 80058d0:	d11a      	bne.n	8005908 <_printf_common+0xcc>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e008      	b.n	80058e8 <_printf_common+0xac>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4652      	mov	r2, sl
 80058da:	4649      	mov	r1, r9
 80058dc:	4638      	mov	r0, r7
 80058de:	47c0      	blx	r8
 80058e0:	3001      	adds	r0, #1
 80058e2:	d103      	bne.n	80058ec <_printf_common+0xb0>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7c4      	b.n	800587a <_printf_common+0x3e>
 80058f0:	2030      	movs	r0, #48	; 0x30
 80058f2:	18e1      	adds	r1, r4, r3
 80058f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058fe:	4422      	add	r2, r4
 8005900:	3302      	adds	r3, #2
 8005902:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005906:	e7c5      	b.n	8005894 <_printf_common+0x58>
 8005908:	2301      	movs	r3, #1
 800590a:	4622      	mov	r2, r4
 800590c:	4649      	mov	r1, r9
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	3001      	adds	r0, #1
 8005914:	d0e6      	beq.n	80058e4 <_printf_common+0xa8>
 8005916:	3601      	adds	r6, #1
 8005918:	e7d9      	b.n	80058ce <_printf_common+0x92>
	...

0800591c <_printf_i>:
 800591c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	7e0f      	ldrb	r7, [r1, #24]
 8005922:	4691      	mov	r9, r2
 8005924:	2f78      	cmp	r7, #120	; 0x78
 8005926:	4680      	mov	r8, r0
 8005928:	460c      	mov	r4, r1
 800592a:	469a      	mov	sl, r3
 800592c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800592e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005932:	d807      	bhi.n	8005944 <_printf_i+0x28>
 8005934:	2f62      	cmp	r7, #98	; 0x62
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x32>
 8005938:	2f00      	cmp	r7, #0
 800593a:	f000 80d9 	beq.w	8005af0 <_printf_i+0x1d4>
 800593e:	2f58      	cmp	r7, #88	; 0x58
 8005940:	f000 80a4 	beq.w	8005a8c <_printf_i+0x170>
 8005944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800594c:	e03a      	b.n	80059c4 <_printf_i+0xa8>
 800594e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005952:	2b15      	cmp	r3, #21
 8005954:	d8f6      	bhi.n	8005944 <_printf_i+0x28>
 8005956:	a101      	add	r1, pc, #4	; (adr r1, 800595c <_printf_i+0x40>)
 8005958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059c9 	.word	0x080059c9
 8005964:	08005945 	.word	0x08005945
 8005968:	08005945 	.word	0x08005945
 800596c:	08005945 	.word	0x08005945
 8005970:	08005945 	.word	0x08005945
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005945 	.word	0x08005945
 800597c:	08005945 	.word	0x08005945
 8005980:	08005945 	.word	0x08005945
 8005984:	08005945 	.word	0x08005945
 8005988:	08005ad7 	.word	0x08005ad7
 800598c:	080059f9 	.word	0x080059f9
 8005990:	08005ab9 	.word	0x08005ab9
 8005994:	08005945 	.word	0x08005945
 8005998:	08005945 	.word	0x08005945
 800599c:	08005af9 	.word	0x08005af9
 80059a0:	08005945 	.word	0x08005945
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005945 	.word	0x08005945
 80059ac:	08005945 	.word	0x08005945
 80059b0:	08005ac1 	.word	0x08005ac1
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	602a      	str	r2, [r5, #0]
 80059bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0a4      	b.n	8005b12 <_printf_i+0x1f6>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	6829      	ldr	r1, [r5, #0]
 80059cc:	0606      	lsls	r6, r0, #24
 80059ce:	f101 0304 	add.w	r3, r1, #4
 80059d2:	d50a      	bpl.n	80059ea <_printf_i+0xce>
 80059d4:	680e      	ldr	r6, [r1, #0]
 80059d6:	602b      	str	r3, [r5, #0]
 80059d8:	2e00      	cmp	r6, #0
 80059da:	da03      	bge.n	80059e4 <_printf_i+0xc8>
 80059dc:	232d      	movs	r3, #45	; 0x2d
 80059de:	4276      	negs	r6, r6
 80059e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e4:	230a      	movs	r3, #10
 80059e6:	485e      	ldr	r0, [pc, #376]	; (8005b60 <_printf_i+0x244>)
 80059e8:	e019      	b.n	8005a1e <_printf_i+0x102>
 80059ea:	680e      	ldr	r6, [r1, #0]
 80059ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	bf18      	it	ne
 80059f4:	b236      	sxthne	r6, r6
 80059f6:	e7ef      	b.n	80059d8 <_printf_i+0xbc>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	1d19      	adds	r1, r3, #4
 80059fe:	6029      	str	r1, [r5, #0]
 8005a00:	0601      	lsls	r1, r0, #24
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0xec>
 8005a04:	681e      	ldr	r6, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0xf2>
 8005a08:	0646      	lsls	r6, r0, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0xe8>
 8005a0c:	881e      	ldrh	r6, [r3, #0]
 8005a0e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a10:	bf0c      	ite	eq
 8005a12:	2308      	moveq	r3, #8
 8005a14:	230a      	movne	r3, #10
 8005a16:	4852      	ldr	r0, [pc, #328]	; (8005b60 <_printf_i+0x244>)
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a1e:	6865      	ldr	r5, [r4, #4]
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	bfa8      	it	ge
 8005a24:	6821      	ldrge	r1, [r4, #0]
 8005a26:	60a5      	str	r5, [r4, #8]
 8005a28:	bfa4      	itt	ge
 8005a2a:	f021 0104 	bicge.w	r1, r1, #4
 8005a2e:	6021      	strge	r1, [r4, #0]
 8005a30:	b90e      	cbnz	r6, 8005a36 <_printf_i+0x11a>
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	d04d      	beq.n	8005ad2 <_printf_i+0x1b6>
 8005a36:	4615      	mov	r5, r2
 8005a38:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a3c:	fb03 6711 	mls	r7, r3, r1, r6
 8005a40:	5dc7      	ldrb	r7, [r0, r7]
 8005a42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a46:	4637      	mov	r7, r6
 8005a48:	42bb      	cmp	r3, r7
 8005a4a:	460e      	mov	r6, r1
 8005a4c:	d9f4      	bls.n	8005a38 <_printf_i+0x11c>
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d10b      	bne.n	8005a6a <_printf_i+0x14e>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	07de      	lsls	r6, r3, #31
 8005a56:	d508      	bpl.n	8005a6a <_printf_i+0x14e>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	6861      	ldr	r1, [r4, #4]
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	bfde      	ittt	le
 8005a60:	2330      	movle	r3, #48	; 0x30
 8005a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a6a:	1b52      	subs	r2, r2, r5
 8005a6c:	6122      	str	r2, [r4, #16]
 8005a6e:	464b      	mov	r3, r9
 8005a70:	4621      	mov	r1, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	f8cd a000 	str.w	sl, [sp]
 8005a78:	aa03      	add	r2, sp, #12
 8005a7a:	f7ff fedf 	bl	800583c <_printf_common>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d14c      	bne.n	8005b1c <_printf_i+0x200>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a86:	b004      	add	sp, #16
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	4834      	ldr	r0, [pc, #208]	; (8005b60 <_printf_i+0x244>)
 8005a8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a92:	6829      	ldr	r1, [r5, #0]
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a9a:	6029      	str	r1, [r5, #0]
 8005a9c:	061d      	lsls	r5, r3, #24
 8005a9e:	d514      	bpl.n	8005aca <_printf_i+0x1ae>
 8005aa0:	07df      	lsls	r7, r3, #31
 8005aa2:	bf44      	itt	mi
 8005aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8005aa8:	6023      	strmi	r3, [r4, #0]
 8005aaa:	b91e      	cbnz	r6, 8005ab4 <_printf_i+0x198>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	f023 0320 	bic.w	r3, r3, #32
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	e7af      	b.n	8005a18 <_printf_i+0xfc>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	f043 0320 	orr.w	r3, r3, #32
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	2378      	movs	r3, #120	; 0x78
 8005ac2:	4828      	ldr	r0, [pc, #160]	; (8005b64 <_printf_i+0x248>)
 8005ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ac8:	e7e3      	b.n	8005a92 <_printf_i+0x176>
 8005aca:	0659      	lsls	r1, r3, #25
 8005acc:	bf48      	it	mi
 8005ace:	b2b6      	uxthmi	r6, r6
 8005ad0:	e7e6      	b.n	8005aa0 <_printf_i+0x184>
 8005ad2:	4615      	mov	r5, r2
 8005ad4:	e7bb      	b.n	8005a4e <_printf_i+0x132>
 8005ad6:	682b      	ldr	r3, [r5, #0]
 8005ad8:	6826      	ldr	r6, [r4, #0]
 8005ada:	1d18      	adds	r0, r3, #4
 8005adc:	6961      	ldr	r1, [r4, #20]
 8005ade:	6028      	str	r0, [r5, #0]
 8005ae0:	0635      	lsls	r5, r6, #24
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	d501      	bpl.n	8005aea <_printf_i+0x1ce>
 8005ae6:	6019      	str	r1, [r3, #0]
 8005ae8:	e002      	b.n	8005af0 <_printf_i+0x1d4>
 8005aea:	0670      	lsls	r0, r6, #25
 8005aec:	d5fb      	bpl.n	8005ae6 <_printf_i+0x1ca>
 8005aee:	8019      	strh	r1, [r3, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	4615      	mov	r5, r2
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	e7ba      	b.n	8005a6e <_printf_i+0x152>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	2100      	movs	r1, #0
 8005afc:	1d1a      	adds	r2, r3, #4
 8005afe:	602a      	str	r2, [r5, #0]
 8005b00:	681d      	ldr	r5, [r3, #0]
 8005b02:	6862      	ldr	r2, [r4, #4]
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 f82f 	bl	8005b68 <memchr>
 8005b0a:	b108      	cbz	r0, 8005b10 <_printf_i+0x1f4>
 8005b0c:	1b40      	subs	r0, r0, r5
 8005b0e:	6060      	str	r0, [r4, #4]
 8005b10:	6863      	ldr	r3, [r4, #4]
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	2300      	movs	r3, #0
 8005b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b1a:	e7a8      	b.n	8005a6e <_printf_i+0x152>
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	47d0      	blx	sl
 8005b26:	3001      	adds	r0, #1
 8005b28:	d0ab      	beq.n	8005a82 <_printf_i+0x166>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	079b      	lsls	r3, r3, #30
 8005b2e:	d413      	bmi.n	8005b58 <_printf_i+0x23c>
 8005b30:	68e0      	ldr	r0, [r4, #12]
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	4298      	cmp	r0, r3
 8005b36:	bfb8      	it	lt
 8005b38:	4618      	movlt	r0, r3
 8005b3a:	e7a4      	b.n	8005a86 <_printf_i+0x16a>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4649      	mov	r1, r9
 8005b42:	4640      	mov	r0, r8
 8005b44:	47d0      	blx	sl
 8005b46:	3001      	adds	r0, #1
 8005b48:	d09b      	beq.n	8005a82 <_printf_i+0x166>
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	9903      	ldr	r1, [sp, #12]
 8005b50:	1a5b      	subs	r3, r3, r1
 8005b52:	42ab      	cmp	r3, r5
 8005b54:	dcf2      	bgt.n	8005b3c <_printf_i+0x220>
 8005b56:	e7eb      	b.n	8005b30 <_printf_i+0x214>
 8005b58:	2500      	movs	r5, #0
 8005b5a:	f104 0619 	add.w	r6, r4, #25
 8005b5e:	e7f5      	b.n	8005b4c <_printf_i+0x230>
 8005b60:	08005ec7 	.word	0x08005ec7
 8005b64:	08005ed8 	.word	0x08005ed8

08005b68 <memchr>:
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	b2c9      	uxtb	r1, r1
 8005b6e:	4402      	add	r2, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	d101      	bne.n	8005b7a <memchr+0x12>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e003      	b.n	8005b82 <memchr+0x1a>
 8005b7a:	7804      	ldrb	r4, [r0, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	428c      	cmp	r4, r1
 8005b80:	d1f6      	bne.n	8005b70 <memchr+0x8>
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <memmove>:
 8005b84:	4288      	cmp	r0, r1
 8005b86:	b510      	push	{r4, lr}
 8005b88:	eb01 0402 	add.w	r4, r1, r2
 8005b8c:	d902      	bls.n	8005b94 <memmove+0x10>
 8005b8e:	4284      	cmp	r4, r0
 8005b90:	4623      	mov	r3, r4
 8005b92:	d807      	bhi.n	8005ba4 <memmove+0x20>
 8005b94:	1e43      	subs	r3, r0, #1
 8005b96:	42a1      	cmp	r1, r4
 8005b98:	d008      	beq.n	8005bac <memmove+0x28>
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba2:	e7f8      	b.n	8005b96 <memmove+0x12>
 8005ba4:	4601      	mov	r1, r0
 8005ba6:	4402      	add	r2, r0
 8005ba8:	428a      	cmp	r2, r1
 8005baa:	d100      	bne.n	8005bae <memmove+0x2a>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bb6:	e7f7      	b.n	8005ba8 <memmove+0x24>

08005bb8 <_free_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d040      	beq.n	8005c42 <_free_r+0x8a>
 8005bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc4:	1f0c      	subs	r4, r1, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bfb8      	it	lt
 8005bca:	18e4      	addlt	r4, r4, r3
 8005bcc:	f000 f910 	bl	8005df0 <__malloc_lock>
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <_free_r+0x8c>)
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	b933      	cbnz	r3, 8005be4 <_free_r+0x2c>
 8005bd6:	6063      	str	r3, [r4, #4]
 8005bd8:	6014      	str	r4, [r2, #0]
 8005bda:	4628      	mov	r0, r5
 8005bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be0:	f000 b90c 	b.w	8005dfc <__malloc_unlock>
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	d908      	bls.n	8005bfa <_free_r+0x42>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf01      	itttt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	1809      	addeq	r1, r1, r0
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	e7ed      	b.n	8005bd6 <_free_r+0x1e>
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	b10b      	cbz	r3, 8005c04 <_free_r+0x4c>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d9fa      	bls.n	8005bfa <_free_r+0x42>
 8005c04:	6811      	ldr	r1, [r2, #0]
 8005c06:	1850      	adds	r0, r2, r1
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d10b      	bne.n	8005c24 <_free_r+0x6c>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	4401      	add	r1, r0
 8005c10:	1850      	adds	r0, r2, r1
 8005c12:	4283      	cmp	r3, r0
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	d1e0      	bne.n	8005bda <_free_r+0x22>
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4401      	add	r1, r0
 8005c1e:	6011      	str	r1, [r2, #0]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	e7da      	b.n	8005bda <_free_r+0x22>
 8005c24:	d902      	bls.n	8005c2c <_free_r+0x74>
 8005c26:	230c      	movs	r3, #12
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	e7d6      	b.n	8005bda <_free_r+0x22>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	1821      	adds	r1, r4, r0
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf01      	itttt	eq
 8005c34:	6819      	ldreq	r1, [r3, #0]
 8005c36:	685b      	ldreq	r3, [r3, #4]
 8005c38:	1809      	addeq	r1, r1, r0
 8005c3a:	6021      	streq	r1, [r4, #0]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	6054      	str	r4, [r2, #4]
 8005c40:	e7cb      	b.n	8005bda <_free_r+0x22>
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20000390 	.word	0x20000390

08005c48 <sbrk_aligned>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4e0e      	ldr	r6, [pc, #56]	; (8005c84 <sbrk_aligned+0x3c>)
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	6831      	ldr	r1, [r6, #0]
 8005c50:	4605      	mov	r5, r0
 8005c52:	b911      	cbnz	r1, 8005c5a <sbrk_aligned+0x12>
 8005c54:	f000 f8bc 	bl	8005dd0 <_sbrk_r>
 8005c58:	6030      	str	r0, [r6, #0]
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 f8b7 	bl	8005dd0 <_sbrk_r>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	d00a      	beq.n	8005c7c <sbrk_aligned+0x34>
 8005c66:	1cc4      	adds	r4, r0, #3
 8005c68:	f024 0403 	bic.w	r4, r4, #3
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d007      	beq.n	8005c80 <sbrk_aligned+0x38>
 8005c70:	1a21      	subs	r1, r4, r0
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f8ac 	bl	8005dd0 <_sbrk_r>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d101      	bne.n	8005c80 <sbrk_aligned+0x38>
 8005c7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c80:	4620      	mov	r0, r4
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	20000394 	.word	0x20000394

08005c88 <_malloc_r>:
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	1ccd      	adds	r5, r1, #3
 8005c8e:	f025 0503 	bic.w	r5, r5, #3
 8005c92:	3508      	adds	r5, #8
 8005c94:	2d0c      	cmp	r5, #12
 8005c96:	bf38      	it	cc
 8005c98:	250c      	movcc	r5, #12
 8005c9a:	2d00      	cmp	r5, #0
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	db01      	blt.n	8005ca4 <_malloc_r+0x1c>
 8005ca0:	42a9      	cmp	r1, r5
 8005ca2:	d905      	bls.n	8005cb0 <_malloc_r+0x28>
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	4630      	mov	r0, r6
 8005cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb0:	4e2e      	ldr	r6, [pc, #184]	; (8005d6c <_malloc_r+0xe4>)
 8005cb2:	f000 f89d 	bl	8005df0 <__malloc_lock>
 8005cb6:	6833      	ldr	r3, [r6, #0]
 8005cb8:	461c      	mov	r4, r3
 8005cba:	bb34      	cbnz	r4, 8005d0a <_malloc_r+0x82>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	f7ff ffc2 	bl	8005c48 <sbrk_aligned>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	d14d      	bne.n	8005d66 <_malloc_r+0xde>
 8005cca:	6834      	ldr	r4, [r6, #0]
 8005ccc:	4626      	mov	r6, r4
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	d140      	bne.n	8005d54 <_malloc_r+0xcc>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	eb04 0803 	add.w	r8, r4, r3
 8005cdc:	f000 f878 	bl	8005dd0 <_sbrk_r>
 8005ce0:	4580      	cmp	r8, r0
 8005ce2:	d13a      	bne.n	8005d5a <_malloc_r+0xd2>
 8005ce4:	6821      	ldr	r1, [r4, #0]
 8005ce6:	3503      	adds	r5, #3
 8005ce8:	1a6d      	subs	r5, r5, r1
 8005cea:	f025 0503 	bic.w	r5, r5, #3
 8005cee:	3508      	adds	r5, #8
 8005cf0:	2d0c      	cmp	r5, #12
 8005cf2:	bf38      	it	cc
 8005cf4:	250c      	movcc	r5, #12
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f7ff ffa5 	bl	8005c48 <sbrk_aligned>
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d02b      	beq.n	8005d5a <_malloc_r+0xd2>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	442b      	add	r3, r5
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	e00e      	b.n	8005d28 <_malloc_r+0xa0>
 8005d0a:	6822      	ldr	r2, [r4, #0]
 8005d0c:	1b52      	subs	r2, r2, r5
 8005d0e:	d41e      	bmi.n	8005d4e <_malloc_r+0xc6>
 8005d10:	2a0b      	cmp	r2, #11
 8005d12:	d916      	bls.n	8005d42 <_malloc_r+0xba>
 8005d14:	1961      	adds	r1, r4, r5
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	6025      	str	r5, [r4, #0]
 8005d1a:	bf18      	it	ne
 8005d1c:	6059      	strne	r1, [r3, #4]
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	bf08      	it	eq
 8005d22:	6031      	streq	r1, [r6, #0]
 8005d24:	5162      	str	r2, [r4, r5]
 8005d26:	604b      	str	r3, [r1, #4]
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f104 060b 	add.w	r6, r4, #11
 8005d2e:	f000 f865 	bl	8005dfc <__malloc_unlock>
 8005d32:	f026 0607 	bic.w	r6, r6, #7
 8005d36:	1d23      	adds	r3, r4, #4
 8005d38:	1af2      	subs	r2, r6, r3
 8005d3a:	d0b6      	beq.n	8005caa <_malloc_r+0x22>
 8005d3c:	1b9b      	subs	r3, r3, r6
 8005d3e:	50a3      	str	r3, [r4, r2]
 8005d40:	e7b3      	b.n	8005caa <_malloc_r+0x22>
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	bf0c      	ite	eq
 8005d48:	6032      	streq	r2, [r6, #0]
 8005d4a:	605a      	strne	r2, [r3, #4]
 8005d4c:	e7ec      	b.n	8005d28 <_malloc_r+0xa0>
 8005d4e:	4623      	mov	r3, r4
 8005d50:	6864      	ldr	r4, [r4, #4]
 8005d52:	e7b2      	b.n	8005cba <_malloc_r+0x32>
 8005d54:	4634      	mov	r4, r6
 8005d56:	6876      	ldr	r6, [r6, #4]
 8005d58:	e7b9      	b.n	8005cce <_malloc_r+0x46>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	f000 f84c 	bl	8005dfc <__malloc_unlock>
 8005d64:	e7a1      	b.n	8005caa <_malloc_r+0x22>
 8005d66:	6025      	str	r5, [r4, #0]
 8005d68:	e7de      	b.n	8005d28 <_malloc_r+0xa0>
 8005d6a:	bf00      	nop
 8005d6c:	20000390 	.word	0x20000390

08005d70 <_realloc_r>:
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	4680      	mov	r8, r0
 8005d76:	4614      	mov	r4, r2
 8005d78:	460e      	mov	r6, r1
 8005d7a:	b921      	cbnz	r1, 8005d86 <_realloc_r+0x16>
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	f7ff bf81 	b.w	8005c88 <_malloc_r>
 8005d86:	b92a      	cbnz	r2, 8005d94 <_realloc_r+0x24>
 8005d88:	f7ff ff16 	bl	8005bb8 <_free_r>
 8005d8c:	4625      	mov	r5, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d94:	f000 f838 	bl	8005e08 <_malloc_usable_size_r>
 8005d98:	4284      	cmp	r4, r0
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	d802      	bhi.n	8005da4 <_realloc_r+0x34>
 8005d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005da2:	d812      	bhi.n	8005dca <_realloc_r+0x5a>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4640      	mov	r0, r8
 8005da8:	f7ff ff6e 	bl	8005c88 <_malloc_r>
 8005dac:	4605      	mov	r5, r0
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0ed      	beq.n	8005d8e <_realloc_r+0x1e>
 8005db2:	42bc      	cmp	r4, r7
 8005db4:	4622      	mov	r2, r4
 8005db6:	4631      	mov	r1, r6
 8005db8:	bf28      	it	cs
 8005dba:	463a      	movcs	r2, r7
 8005dbc:	f7ff fbac 	bl	8005518 <memcpy>
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	f7ff fef8 	bl	8005bb8 <_free_r>
 8005dc8:	e7e1      	b.n	8005d8e <_realloc_r+0x1e>
 8005dca:	4635      	mov	r5, r6
 8005dcc:	e7df      	b.n	8005d8e <_realloc_r+0x1e>
	...

08005dd0 <_sbrk_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4d05      	ldr	r5, [pc, #20]	; (8005dec <_sbrk_r+0x1c>)
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fc f9dc 	bl	8002198 <_sbrk>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_sbrk_r+0x1a>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_sbrk_r+0x1a>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20000398 	.word	0x20000398

08005df0 <__malloc_lock>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__malloc_lock+0x8>)
 8005df2:	f000 b811 	b.w	8005e18 <__retarget_lock_acquire_recursive>
 8005df6:	bf00      	nop
 8005df8:	2000039c 	.word	0x2000039c

08005dfc <__malloc_unlock>:
 8005dfc:	4801      	ldr	r0, [pc, #4]	; (8005e04 <__malloc_unlock+0x8>)
 8005dfe:	f000 b80c 	b.w	8005e1a <__retarget_lock_release_recursive>
 8005e02:	bf00      	nop
 8005e04:	2000039c 	.word	0x2000039c

08005e08 <_malloc_usable_size_r>:
 8005e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0c:	1f18      	subs	r0, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bfbc      	itt	lt
 8005e12:	580b      	ldrlt	r3, [r1, r0]
 8005e14:	18c0      	addlt	r0, r0, r3
 8005e16:	4770      	bx	lr

08005e18 <__retarget_lock_acquire_recursive>:
 8005e18:	4770      	bx	lr

08005e1a <__retarget_lock_release_recursive>:
 8005e1a:	4770      	bx	lr

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
