
Shooter_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006844  08006844  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800684c  0800684c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000042d8  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200042e8  200042e8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b183  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b13  00000000  00000000  0003b1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015e0  00000000  00000000  00040428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f72  00000000  00000000  00041a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7ef  00000000  00000000  0006497a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9fbc  00000000  00000000  00080169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a125  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000630c  00000000  00000000  0015a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067b4 	.word	0x080067b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080067b4 	.word	0x080067b4

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_ddiv>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800042a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800042e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000432:	bf1d      	ittte	ne
 8000434:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000438:	ea94 0f0c 	teqne	r4, ip
 800043c:	ea95 0f0c 	teqne	r5, ip
 8000440:	f000 f8a7 	bleq	8000592 <__aeabi_ddiv+0x16e>
 8000444:	eba4 0405 	sub.w	r4, r4, r5
 8000448:	ea81 0e03 	eor.w	lr, r1, r3
 800044c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000450:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000454:	f000 8088 	beq.w	8000568 <__aeabi_ddiv+0x144>
 8000458:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800045c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000460:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000464:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000468:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800046c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000470:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000474:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000478:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800047c:	429d      	cmp	r5, r3
 800047e:	bf08      	it	eq
 8000480:	4296      	cmpeq	r6, r2
 8000482:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000486:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800048a:	d202      	bcs.n	8000492 <__aeabi_ddiv+0x6e>
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000492:	1ab6      	subs	r6, r6, r2
 8000494:	eb65 0503 	sbc.w	r5, r5, r3
 8000498:	085b      	lsrs	r3, r3, #1
 800049a:	ea4f 0232 	mov.w	r2, r2, rrx
 800049e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80004a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80004a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004ae:	bf22      	ittt	cs
 80004b0:	1ab6      	subcs	r6, r6, r2
 80004b2:	4675      	movcs	r5, lr
 80004b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80004b8:	085b      	lsrs	r3, r3, #1
 80004ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80004be:	ebb6 0e02 	subs.w	lr, r6, r2
 80004c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004c6:	bf22      	ittt	cs
 80004c8:	1ab6      	subcs	r6, r6, r2
 80004ca:	4675      	movcs	r5, lr
 80004cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004de:	bf22      	ittt	cs
 80004e0:	1ab6      	subcs	r6, r6, r2
 80004e2:	4675      	movcs	r5, lr
 80004e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80004ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80004f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004f6:	bf22      	ittt	cs
 80004f8:	1ab6      	subcs	r6, r6, r2
 80004fa:	4675      	movcs	r5, lr
 80004fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000500:	ea55 0e06 	orrs.w	lr, r5, r6
 8000504:	d018      	beq.n	8000538 <__aeabi_ddiv+0x114>
 8000506:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800050a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800050e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000512:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000516:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800051a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800051e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000522:	d1c0      	bne.n	80004a6 <__aeabi_ddiv+0x82>
 8000524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000528:	d10b      	bne.n	8000542 <__aeabi_ddiv+0x11e>
 800052a:	ea41 0100 	orr.w	r1, r1, r0
 800052e:	f04f 0000 	mov.w	r0, #0
 8000532:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000536:	e7b6      	b.n	80004a6 <__aeabi_ddiv+0x82>
 8000538:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800053c:	bf04      	itt	eq
 800053e:	4301      	orreq	r1, r0
 8000540:	2000      	moveq	r0, #0
 8000542:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000546:	bf88      	it	hi
 8000548:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800054c:	f63f aeaf 	bhi.w	80002ae <__aeabi_dmul+0xde>
 8000550:	ebb5 0c03 	subs.w	ip, r5, r3
 8000554:	bf04      	itt	eq
 8000556:	ebb6 0c02 	subseq.w	ip, r6, r2
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800056c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000570:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000574:	bfc2      	ittt	gt
 8000576:	ebd4 050c 	rsbsgt	r5, r4, ip
 800057a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800057e:	bd70      	popgt	{r4, r5, r6, pc}
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f04f 0e00 	mov.w	lr, #0
 8000588:	3c01      	subs	r4, #1
 800058a:	e690      	b.n	80002ae <__aeabi_dmul+0xde>
 800058c:	ea45 0e06 	orr.w	lr, r5, r6
 8000590:	e68d      	b.n	80002ae <__aeabi_dmul+0xde>
 8000592:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000596:	ea94 0f0c 	teq	r4, ip
 800059a:	bf08      	it	eq
 800059c:	ea95 0f0c 	teqeq	r5, ip
 80005a0:	f43f af3b 	beq.w	800041a <__aeabi_dmul+0x24a>
 80005a4:	ea94 0f0c 	teq	r4, ip
 80005a8:	d10a      	bne.n	80005c0 <__aeabi_ddiv+0x19c>
 80005aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005ae:	f47f af34 	bne.w	800041a <__aeabi_dmul+0x24a>
 80005b2:	ea95 0f0c 	teq	r5, ip
 80005b6:	f47f af25 	bne.w	8000404 <__aeabi_dmul+0x234>
 80005ba:	4610      	mov	r0, r2
 80005bc:	4619      	mov	r1, r3
 80005be:	e72c      	b.n	800041a <__aeabi_dmul+0x24a>
 80005c0:	ea95 0f0c 	teq	r5, ip
 80005c4:	d106      	bne.n	80005d4 <__aeabi_ddiv+0x1b0>
 80005c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005ca:	f43f aefd 	beq.w	80003c8 <__aeabi_dmul+0x1f8>
 80005ce:	4610      	mov	r0, r2
 80005d0:	4619      	mov	r1, r3
 80005d2:	e722      	b.n	800041a <__aeabi_dmul+0x24a>
 80005d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005d8:	bf18      	it	ne
 80005da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005de:	f47f aec5 	bne.w	800036c <__aeabi_dmul+0x19c>
 80005e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80005e6:	f47f af0d 	bne.w	8000404 <__aeabi_dmul+0x234>
 80005ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80005ee:	f47f aeeb 	bne.w	80003c8 <__aeabi_dmul+0x1f8>
 80005f2:	e712      	b.n	800041a <__aeabi_dmul+0x24a>

080005f4 <__gedf2>:
 80005f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005f8:	e006      	b.n	8000608 <__cmpdf2+0x4>
 80005fa:	bf00      	nop

080005fc <__ledf2>:
 80005fc:	f04f 0c01 	mov.w	ip, #1
 8000600:	e002      	b.n	8000608 <__cmpdf2+0x4>
 8000602:	bf00      	nop

08000604 <__cmpdf2>:
 8000604:	f04f 0c01 	mov.w	ip, #1
 8000608:	f84d cd04 	str.w	ip, [sp, #-4]!
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000618:	bf18      	it	ne
 800061a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800061e:	d01b      	beq.n	8000658 <__cmpdf2+0x54>
 8000620:	b001      	add	sp, #4
 8000622:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000626:	bf0c      	ite	eq
 8000628:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800062c:	ea91 0f03 	teqne	r1, r3
 8000630:	bf02      	ittt	eq
 8000632:	ea90 0f02 	teqeq	r0, r2
 8000636:	2000      	moveq	r0, #0
 8000638:	4770      	bxeq	lr
 800063a:	f110 0f00 	cmn.w	r0, #0
 800063e:	ea91 0f03 	teq	r1, r3
 8000642:	bf58      	it	pl
 8000644:	4299      	cmppl	r1, r3
 8000646:	bf08      	it	eq
 8000648:	4290      	cmpeq	r0, r2
 800064a:	bf2c      	ite	cs
 800064c:	17d8      	asrcs	r0, r3, #31
 800064e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000652:	f040 0001 	orr.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800065c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000660:	d102      	bne.n	8000668 <__cmpdf2+0x64>
 8000662:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000666:	d107      	bne.n	8000678 <__cmpdf2+0x74>
 8000668:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800066c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000670:	d1d6      	bne.n	8000620 <__cmpdf2+0x1c>
 8000672:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000676:	d0d3      	beq.n	8000620 <__cmpdf2+0x1c>
 8000678:	f85d 0b04 	ldr.w	r0, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <__aeabi_cdrcmple>:
 8000680:	4684      	mov	ip, r0
 8000682:	4610      	mov	r0, r2
 8000684:	4662      	mov	r2, ip
 8000686:	468c      	mov	ip, r1
 8000688:	4619      	mov	r1, r3
 800068a:	4663      	mov	r3, ip
 800068c:	e000      	b.n	8000690 <__aeabi_cdcmpeq>
 800068e:	bf00      	nop

08000690 <__aeabi_cdcmpeq>:
 8000690:	b501      	push	{r0, lr}
 8000692:	f7ff ffb7 	bl	8000604 <__cmpdf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd01      	pop	{r0, pc}

080006a0 <__aeabi_dcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cdcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_dcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cdcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cdcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffce 	bl	8000680 <__aeabi_cdrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc4 	bl	8000680 <__aeabi_cdrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_d2uiz>:
 8000704:	004a      	lsls	r2, r1, #1
 8000706:	d211      	bcs.n	800072c <__aeabi_d2uiz+0x28>
 8000708:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800070c:	d211      	bcs.n	8000732 <__aeabi_d2uiz+0x2e>
 800070e:	d50d      	bpl.n	800072c <__aeabi_d2uiz+0x28>
 8000710:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000714:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000718:	d40e      	bmi.n	8000738 <__aeabi_d2uiz+0x34>
 800071a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800071e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000722:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000726:	fa23 f002 	lsr.w	r0, r3, r2
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000736:	d102      	bne.n	800073e <__aeabi_d2uiz+0x3a>
 8000738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <__aeabi_uldivmod>:
 8000744:	b953      	cbnz	r3, 800075c <__aeabi_uldivmod+0x18>
 8000746:	b94a      	cbnz	r2, 800075c <__aeabi_uldivmod+0x18>
 8000748:	2900      	cmp	r1, #0
 800074a:	bf08      	it	eq
 800074c:	2800      	cmpeq	r0, #0
 800074e:	bf1c      	itt	ne
 8000750:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000754:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000758:	f000 b974 	b.w	8000a44 <__aeabi_idiv0>
 800075c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000760:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000764:	f000 f806 	bl	8000774 <__udivmoddi4>
 8000768:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000770:	b004      	add	sp, #16
 8000772:	4770      	bx	lr

08000774 <__udivmoddi4>:
 8000774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000778:	9d08      	ldr	r5, [sp, #32]
 800077a:	4604      	mov	r4, r0
 800077c:	468e      	mov	lr, r1
 800077e:	2b00      	cmp	r3, #0
 8000780:	d14d      	bne.n	800081e <__udivmoddi4+0xaa>
 8000782:	428a      	cmp	r2, r1
 8000784:	4694      	mov	ip, r2
 8000786:	d969      	bls.n	800085c <__udivmoddi4+0xe8>
 8000788:	fab2 f282 	clz	r2, r2
 800078c:	b152      	cbz	r2, 80007a4 <__udivmoddi4+0x30>
 800078e:	fa01 f302 	lsl.w	r3, r1, r2
 8000792:	f1c2 0120 	rsb	r1, r2, #32
 8000796:	fa20 f101 	lsr.w	r1, r0, r1
 800079a:	fa0c fc02 	lsl.w	ip, ip, r2
 800079e:	ea41 0e03 	orr.w	lr, r1, r3
 80007a2:	4094      	lsls	r4, r2
 80007a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007a8:	0c21      	lsrs	r1, r4, #16
 80007aa:	fbbe f6f8 	udiv	r6, lr, r8
 80007ae:	fa1f f78c 	uxth.w	r7, ip
 80007b2:	fb08 e316 	mls	r3, r8, r6, lr
 80007b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ba:	fb06 f107 	mul.w	r1, r6, r7
 80007be:	4299      	cmp	r1, r3
 80007c0:	d90a      	bls.n	80007d8 <__udivmoddi4+0x64>
 80007c2:	eb1c 0303 	adds.w	r3, ip, r3
 80007c6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007ca:	f080 811f 	bcs.w	8000a0c <__udivmoddi4+0x298>
 80007ce:	4299      	cmp	r1, r3
 80007d0:	f240 811c 	bls.w	8000a0c <__udivmoddi4+0x298>
 80007d4:	3e02      	subs	r6, #2
 80007d6:	4463      	add	r3, ip
 80007d8:	1a5b      	subs	r3, r3, r1
 80007da:	b2a4      	uxth	r4, r4
 80007dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e0:	fb08 3310 	mls	r3, r8, r0, r3
 80007e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007e8:	fb00 f707 	mul.w	r7, r0, r7
 80007ec:	42a7      	cmp	r7, r4
 80007ee:	d90a      	bls.n	8000806 <__udivmoddi4+0x92>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007f8:	f080 810a 	bcs.w	8000a10 <__udivmoddi4+0x29c>
 80007fc:	42a7      	cmp	r7, r4
 80007fe:	f240 8107 	bls.w	8000a10 <__udivmoddi4+0x29c>
 8000802:	4464      	add	r4, ip
 8000804:	3802      	subs	r0, #2
 8000806:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800080a:	1be4      	subs	r4, r4, r7
 800080c:	2600      	movs	r6, #0
 800080e:	b11d      	cbz	r5, 8000818 <__udivmoddi4+0xa4>
 8000810:	40d4      	lsrs	r4, r2
 8000812:	2300      	movs	r3, #0
 8000814:	e9c5 4300 	strd	r4, r3, [r5]
 8000818:	4631      	mov	r1, r6
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0xc2>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80ef 	beq.w	8000a06 <__udivmoddi4+0x292>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x160>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0xd4>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80f9 	bhi.w	8000a3a <__udivmoddi4+0x2c6>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0303 	sbc.w	r3, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	469e      	mov	lr, r3
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0e0      	beq.n	8000818 <__udivmoddi4+0xa4>
 8000856:	e9c5 4e00 	strd	r4, lr, [r5]
 800085a:	e7dd      	b.n	8000818 <__udivmoddi4+0xa4>
 800085c:	b902      	cbnz	r2, 8000860 <__udivmoddi4+0xec>
 800085e:	deff      	udf	#255	; 0xff
 8000860:	fab2 f282 	clz	r2, r2
 8000864:	2a00      	cmp	r2, #0
 8000866:	f040 8092 	bne.w	800098e <__udivmoddi4+0x21a>
 800086a:	eba1 010c 	sub.w	r1, r1, ip
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	2601      	movs	r6, #1
 8000878:	0c20      	lsrs	r0, r4, #16
 800087a:	fbb1 f3f7 	udiv	r3, r1, r7
 800087e:	fb07 1113 	mls	r1, r7, r3, r1
 8000882:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000886:	fb0e f003 	mul.w	r0, lr, r3
 800088a:	4288      	cmp	r0, r1
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x12c>
 800088e:	eb1c 0101 	adds.w	r1, ip, r1
 8000892:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000896:	d202      	bcs.n	800089e <__udivmoddi4+0x12a>
 8000898:	4288      	cmp	r0, r1
 800089a:	f200 80cb 	bhi.w	8000a34 <__udivmoddi4+0x2c0>
 800089e:	4643      	mov	r3, r8
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008a8:	fb07 1110 	mls	r1, r7, r0, r1
 80008ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008b0:	fb0e fe00 	mul.w	lr, lr, r0
 80008b4:	45a6      	cmp	lr, r4
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x156>
 80008b8:	eb1c 0404 	adds.w	r4, ip, r4
 80008bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008c0:	d202      	bcs.n	80008c8 <__udivmoddi4+0x154>
 80008c2:	45a6      	cmp	lr, r4
 80008c4:	f200 80bb 	bhi.w	8000a3e <__udivmoddi4+0x2ca>
 80008c8:	4608      	mov	r0, r1
 80008ca:	eba4 040e 	sub.w	r4, r4, lr
 80008ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008d2:	e79c      	b.n	800080e <__udivmoddi4+0x9a>
 80008d4:	f1c6 0720 	rsb	r7, r6, #32
 80008d8:	40b3      	lsls	r3, r6
 80008da:	fa22 fc07 	lsr.w	ip, r2, r7
 80008de:	ea4c 0c03 	orr.w	ip, ip, r3
 80008e2:	fa20 f407 	lsr.w	r4, r0, r7
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	431c      	orrs	r4, r3
 80008ec:	40f9      	lsrs	r1, r7
 80008ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008f2:	fa00 f306 	lsl.w	r3, r0, r6
 80008f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80008fa:	0c20      	lsrs	r0, r4, #16
 80008fc:	fa1f fe8c 	uxth.w	lr, ip
 8000900:	fb09 1118 	mls	r1, r9, r8, r1
 8000904:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000908:	fb08 f00e 	mul.w	r0, r8, lr
 800090c:	4288      	cmp	r0, r1
 800090e:	fa02 f206 	lsl.w	r2, r2, r6
 8000912:	d90b      	bls.n	800092c <__udivmoddi4+0x1b8>
 8000914:	eb1c 0101 	adds.w	r1, ip, r1
 8000918:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800091c:	f080 8088 	bcs.w	8000a30 <__udivmoddi4+0x2bc>
 8000920:	4288      	cmp	r0, r1
 8000922:	f240 8085 	bls.w	8000a30 <__udivmoddi4+0x2bc>
 8000926:	f1a8 0802 	sub.w	r8, r8, #2
 800092a:	4461      	add	r1, ip
 800092c:	1a09      	subs	r1, r1, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb1 f0f9 	udiv	r0, r1, r9
 8000934:	fb09 1110 	mls	r1, r9, r0, r1
 8000938:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	458e      	cmp	lr, r1
 8000942:	d908      	bls.n	8000956 <__udivmoddi4+0x1e2>
 8000944:	eb1c 0101 	adds.w	r1, ip, r1
 8000948:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800094c:	d26c      	bcs.n	8000a28 <__udivmoddi4+0x2b4>
 800094e:	458e      	cmp	lr, r1
 8000950:	d96a      	bls.n	8000a28 <__udivmoddi4+0x2b4>
 8000952:	3802      	subs	r0, #2
 8000954:	4461      	add	r1, ip
 8000956:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800095a:	fba0 9402 	umull	r9, r4, r0, r2
 800095e:	eba1 010e 	sub.w	r1, r1, lr
 8000962:	42a1      	cmp	r1, r4
 8000964:	46c8      	mov	r8, r9
 8000966:	46a6      	mov	lr, r4
 8000968:	d356      	bcc.n	8000a18 <__udivmoddi4+0x2a4>
 800096a:	d053      	beq.n	8000a14 <__udivmoddi4+0x2a0>
 800096c:	b15d      	cbz	r5, 8000986 <__udivmoddi4+0x212>
 800096e:	ebb3 0208 	subs.w	r2, r3, r8
 8000972:	eb61 010e 	sbc.w	r1, r1, lr
 8000976:	fa01 f707 	lsl.w	r7, r1, r7
 800097a:	fa22 f306 	lsr.w	r3, r2, r6
 800097e:	40f1      	lsrs	r1, r6
 8000980:	431f      	orrs	r7, r3
 8000982:	e9c5 7100 	strd	r7, r1, [r5]
 8000986:	2600      	movs	r6, #0
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	40d8      	lsrs	r0, r3
 8000994:	fa0c fc02 	lsl.w	ip, ip, r2
 8000998:	fa21 f303 	lsr.w	r3, r1, r3
 800099c:	4091      	lsls	r1, r2
 800099e:	4301      	orrs	r1, r0
 80009a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a4:	fa1f fe8c 	uxth.w	lr, ip
 80009a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80009ac:	fb07 3610 	mls	r6, r7, r0, r3
 80009b0:	0c0b      	lsrs	r3, r1, #16
 80009b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009b6:	fb00 f60e 	mul.w	r6, r0, lr
 80009ba:	429e      	cmp	r6, r3
 80009bc:	fa04 f402 	lsl.w	r4, r4, r2
 80009c0:	d908      	bls.n	80009d4 <__udivmoddi4+0x260>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009ca:	d22f      	bcs.n	8000a2c <__udivmoddi4+0x2b8>
 80009cc:	429e      	cmp	r6, r3
 80009ce:	d92d      	bls.n	8000a2c <__udivmoddi4+0x2b8>
 80009d0:	3802      	subs	r0, #2
 80009d2:	4463      	add	r3, ip
 80009d4:	1b9b      	subs	r3, r3, r6
 80009d6:	b289      	uxth	r1, r1
 80009d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80009dc:	fb07 3316 	mls	r3, r7, r6, r3
 80009e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e4:	fb06 f30e 	mul.w	r3, r6, lr
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x28a>
 80009ec:	eb1c 0101 	adds.w	r1, ip, r1
 80009f0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009f4:	d216      	bcs.n	8000a24 <__udivmoddi4+0x2b0>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d914      	bls.n	8000a24 <__udivmoddi4+0x2b0>
 80009fa:	3e02      	subs	r6, #2
 80009fc:	4461      	add	r1, ip
 80009fe:	1ac9      	subs	r1, r1, r3
 8000a00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a04:	e738      	b.n	8000878 <__udivmoddi4+0x104>
 8000a06:	462e      	mov	r6, r5
 8000a08:	4628      	mov	r0, r5
 8000a0a:	e705      	b.n	8000818 <__udivmoddi4+0xa4>
 8000a0c:	4606      	mov	r6, r0
 8000a0e:	e6e3      	b.n	80007d8 <__udivmoddi4+0x64>
 8000a10:	4618      	mov	r0, r3
 8000a12:	e6f8      	b.n	8000806 <__udivmoddi4+0x92>
 8000a14:	454b      	cmp	r3, r9
 8000a16:	d2a9      	bcs.n	800096c <__udivmoddi4+0x1f8>
 8000a18:	ebb9 0802 	subs.w	r8, r9, r2
 8000a1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a20:	3801      	subs	r0, #1
 8000a22:	e7a3      	b.n	800096c <__udivmoddi4+0x1f8>
 8000a24:	4646      	mov	r6, r8
 8000a26:	e7ea      	b.n	80009fe <__udivmoddi4+0x28a>
 8000a28:	4620      	mov	r0, r4
 8000a2a:	e794      	b.n	8000956 <__udivmoddi4+0x1e2>
 8000a2c:	4640      	mov	r0, r8
 8000a2e:	e7d1      	b.n	80009d4 <__udivmoddi4+0x260>
 8000a30:	46d0      	mov	r8, sl
 8000a32:	e77b      	b.n	800092c <__udivmoddi4+0x1b8>
 8000a34:	3b02      	subs	r3, #2
 8000a36:	4461      	add	r1, ip
 8000a38:	e732      	b.n	80008a0 <__udivmoddi4+0x12c>
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	e709      	b.n	8000852 <__udivmoddi4+0xde>
 8000a3e:	4464      	add	r4, ip
 8000a40:	3802      	subs	r0, #2
 8000a42:	e742      	b.n	80008ca <__udivmoddi4+0x156>

08000a44 <__aeabi_idiv0>:
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <MX_CAN1_Init+0xa0>)
 8000a52:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a56:	2206      	movs	r2, #6
 8000a58:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a74:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a9c:	f001 f9b6 	bl	8001e0c <HAL_CAN_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000aa6:	f000 fd57 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 8000ace:	230e      	movs	r3, #14
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000ad8:	f001 fa94 	bl	8002004 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000002c 	.word	0x2000002c
 8000ae8:	40006400 	.word	0x40006400

08000aec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_CAN_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d134      	bne.n	8000b78 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b58:	2309      	movs	r3, #9
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_CAN_MspInit+0x9c>)
 8000b64:	f002 f896 	bl	8002c94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f002 f867 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b72:	2014      	movs	r0, #20
 8000b74:	f002 f880 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40006400 	.word	0x40006400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400

08000b8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <vApplicationGetIdleTaskMemory+0x30>)
 8000ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000078 	.word	0x20000078
 8000bbc:	200000cc 	.word	0x200000cc

08000bc0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stepper_Task */
  osThreadDef(Stepper_Task, Stepper_Init, osPriorityNormal, 0, 500);
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_FREERTOS_Init+0x58>)
 8000bc8:	f107 041c 	add.w	r4, r7, #28
 8000bcc:	461d      	mov	r5, r3
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Stepper_TaskHandle = osThreadCreate(osThread(Stepper_Task), NULL);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fb90 	bl	8005306 <osThreadCreate>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <MX_FREERTOS_Init+0x5c>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Take_Rice_Task */
  osThreadDef(Take_Rice_Task, Take_Rice_Init, osPriorityNormal, 0, 2200);
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_FREERTOS_Init+0x60>)
 8000bee:	463c      	mov	r4, r7
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Take_Rice_TaskHandle = osThreadCreate(osThread(Take_Rice_Task), NULL);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 fb7f 	bl	8005306 <osThreadCreate>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <MX_FREERTOS_Init+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	; 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdb0      	pop	{r4, r5, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	080067ec 	.word	0x080067ec
 8000c1c:	20000070 	.word	0x20000070
 8000c20:	08006808 	.word	0x08006808
 8000c24:	20000074 	.word	0x20000074

08000c28 <Stepper_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Stepper_Init */
void Stepper_Init(void const * argument)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_Init */
  /* Infinite loop */
  for(;;)
  {
	  if (Stepper >= 0.5) {
 8000c30:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <Stepper_Init+0xec>)
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c42:	db06      	blt.n	8000c52 <Stepper_Init+0x2a>
			head = 5.0;
 8000c44:	4934      	ldr	r1, [pc, #208]	; (8000d18 <Stepper_Init+0xf0>)
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <Stepper_Init+0xf4>)
 8000c4c:	e9c1 2300 	strd	r2, r3, [r1]
 8000c50:	e017      	b.n	8000c82 <Stepper_Init+0x5a>
		} else if (Stepper <= -0.5) {
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <Stepper_Init+0xec>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	d806      	bhi.n	8000c74 <Stepper_Init+0x4c>
			head = -5.0;
 8000c66:	492c      	ldr	r1, [pc, #176]	; (8000d18 <Stepper_Init+0xf0>)
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <Stepper_Init+0xf8>)
 8000c6e:	e9c1 2300 	strd	r2, r3, [r1]
 8000c72:	e006      	b.n	8000c82 <Stepper_Init+0x5a>
		} else {
			head = 0;
 8000c74:	4928      	ldr	r1, [pc, #160]	; (8000d18 <Stepper_Init+0xf0>)
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (head >= 0) {
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <Stepper_Init+0xf0>)
 8000c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	f7ff fd24 	bl	80006dc <__aeabi_dcmpge>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d013      	beq.n	8000cc2 <Stepper_Init+0x9a>
			HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca0:	4820      	ldr	r0, [pc, #128]	; (8000d24 <Stepper_Init+0xfc>)
 8000ca2:	f002 f993 	bl	8002fcc <HAL_GPIO_WritePin>
			omega = head * gear_stepper;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <Stepper_Init+0xf0>)
 8000ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <Stepper_Init+0x100>)
 8000cb2:	f7ff fa8d 	bl	80001d0 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <Stepper_Init+0x104>)
 8000cbc:	e9c1 2300 	strd	r2, r3, [r1]
 8000cc0:	e023      	b.n	8000d0a <Stepper_Init+0xe2>

		} else if (head < 0) {
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <Stepper_Init+0xf0>)
 8000cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	f7ff fcf0 	bl	80006b4 <__aeabi_dcmplt>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d017      	beq.n	8000d0a <Stepper_Init+0xe2>
			HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <Stepper_Init+0xfc>)
 8000ce2:	f002 f973 	bl	8002fcc <HAL_GPIO_WritePin>
			omega = -1 * head * gear_stepper;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <Stepper_Init+0xf0>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	4614      	mov	r4, r2
 8000cee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <Stepper_Init+0x100>)
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	f7ff fa68 	bl	80001d0 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4909      	ldr	r1, [pc, #36]	; (8000d2c <Stepper_Init+0x104>)
 8000d06:	e9c1 2300 	strd	r2, r3, [r1]
		}

    osDelay(10);
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f004 fb47 	bl	800539e <osDelay>
	  if (Stepper >= 0.5) {
 8000d10:	e78e      	b.n	8000c30 <Stepper_Init+0x8>
 8000d12:	bf00      	nop
 8000d14:	20000384 	.word	0x20000384
 8000d18:	20000058 	.word	0x20000058
 8000d1c:	40140000 	.word	0x40140000
 8000d20:	c0140000 	.word	0xc0140000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40330000 	.word	0x40330000
 8000d2c:	20000060 	.word	0x20000060

08000d30 <Take_Rice_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Take_Rice_Init */
void Take_Rice_Init(void const * argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	if (((Position == 1 ) ||  (Position == 2) || (Position == 3 && state == 4 )) && state == 0)
 8000d38:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <Take_Rice_Init+0x134>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d00b      	beq.n	8000d58 <Take_Rice_Init+0x28>
 8000d40:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <Take_Rice_Init+0x134>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d007      	beq.n	8000d58 <Take_Rice_Init+0x28>
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <Take_Rice_Init+0x134>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d115      	bne.n	8000d7c <Take_Rice_Init+0x4c>
 8000d50:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <Take_Rice_Init+0x138>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d111      	bne.n	8000d7c <Take_Rice_Init+0x4c>
 8000d58:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <Take_Rice_Init+0x138>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10d      	bne.n	8000d7c <Take_Rice_Init+0x4c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //release
 8000d60:	2201      	movs	r2, #1
 8000d62:	2101      	movs	r1, #1
 8000d64:	4841      	ldr	r0, [pc, #260]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000d66:	f002 f931 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //Down
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	483f      	ldr	r0, [pc, #252]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000d70:	f002 f92c 	bl	8002fcc <HAL_GPIO_WritePin>
		state = 1;
 8000d74:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <Take_Rice_Init+0x138>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e06e      	b.n	8000e5a <Take_Rice_Init+0x12a>
	}
	else if (state == 1 && Catch ==1)
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <Take_Rice_Init+0x138>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d115      	bne.n	8000db0 <Take_Rice_Init+0x80>
 8000d84:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <Take_Rice_Init+0x140>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d111      	bne.n	8000db0 <Take_Rice_Init+0x80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //catch
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4836      	ldr	r0, [pc, #216]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000d92:	f002 f91b 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); // Down
 8000d96:	2201      	movs	r2, #1
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4834      	ldr	r0, [pc, #208]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000d9c:	f002 f916 	bl	8002fcc <HAL_GPIO_WritePin>
		osDelay(1000);
 8000da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da4:	f004 fafb 	bl	800539e <osDelay>
		state = 2;
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <Take_Rice_Init+0x138>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e054      	b.n	8000e5a <Take_Rice_Init+0x12a>
	}
	else if (state == 2)
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <Take_Rice_Init+0x138>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d111      	bne.n	8000ddc <Take_Rice_Init+0xac>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //cath
 8000db8:	2200      	movs	r2, #0
 8000dba:	2101      	movs	r1, #1
 8000dbc:	482b      	ldr	r0, [pc, #172]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000dbe:	f002 f905 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // up
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4829      	ldr	r0, [pc, #164]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000dc8:	f002 f900 	bl	8002fcc <HAL_GPIO_WritePin>
		osDelay(3000);
 8000dcc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dd0:	f004 fae5 	bl	800539e <osDelay>
		state = 3;
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <Take_Rice_Init+0x138>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e03e      	b.n	8000e5a <Take_Rice_Init+0x12a>

	}
	else if (state == 3 )
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <Take_Rice_Init+0x138>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d111      	bne.n	8000e08 <Take_Rice_Init+0xd8>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //release grip
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	4820      	ldr	r0, [pc, #128]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000dea:	f002 f8ef 	bl	8002fcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Up
 8000dee:	2200      	movs	r2, #0
 8000df0:	2102      	movs	r1, #2
 8000df2:	481e      	ldr	r0, [pc, #120]	; (8000e6c <Take_Rice_Init+0x13c>)
 8000df4:	f002 f8ea 	bl	8002fcc <HAL_GPIO_WritePin>
			osDelay(2000);
 8000df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dfc:	f004 facf 	bl	800539e <osDelay>
			state = 0;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <Take_Rice_Init+0x138>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e028      	b.n	8000e5a <Take_Rice_Init+0x12a>
		}

	else if  ( Position >=1 && state2 ==0)
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <Take_Rice_Init+0x134>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d010      	beq.n	8000e32 <Take_Rice_Init+0x102>
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <Take_Rice_Init+0x144>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10c      	bne.n	8000e32 <Take_Rice_Init+0x102>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // open
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4816      	ldr	r0, [pc, #88]	; (8000e78 <Take_Rice_Init+0x148>)
 8000e1e:	f002 f8d5 	bl	8002fcc <HAL_GPIO_WritePin>
			  osDelay(2000);
 8000e22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e26:	f004 faba 	bl	800539e <osDelay>
			  state2 = 1;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <Take_Rice_Init+0x144>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e013      	b.n	8000e5a <Take_Rice_Init+0x12a>
		  }
		  else if (Drop==1 && state2 == 1){
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <Take_Rice_Init+0x14c>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10f      	bne.n	8000e5a <Take_Rice_Init+0x12a>
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <Take_Rice_Init+0x144>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10b      	bne.n	8000e5a <Take_Rice_Init+0x12a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); //Push
 8000e42:	2200      	movs	r2, #0
 8000e44:	2101      	movs	r1, #1
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <Take_Rice_Init+0x148>)
 8000e48:	f002 f8c0 	bl	8002fcc <HAL_GPIO_WritePin>
				osDelay(3000);
 8000e4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e50:	f004 faa5 	bl	800539e <osDelay>
				state2 = 0;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <Take_Rice_Init+0x144>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
			}

    osDelay(10);
 8000e5a:	200a      	movs	r0, #10
 8000e5c:	f004 fa9f 	bl	800539e <osDelay>
	if (((Position == 1 ) ||  (Position == 2) || (Position == 3 && state == 4 )) && state == 0)
 8000e60:	e76a      	b.n	8000d38 <Take_Rice_Init+0x8>
 8000e62:	bf00      	nop
 8000e64:	2000037c 	.word	0x2000037c
 8000e68:	20000068 	.word	0x20000068
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	2000037d 	.word	0x2000037d
 8000e74:	20000069 	.word	0x20000069
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	20000388 	.word	0x20000388

08000e80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_GPIO_Init+0xe0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Drop_GPIO_Port, Drop_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4816      	ldr	r0, [pc, #88]	; (8000f64 <MX_GPIO_Init+0xe4>)
 8000f0c:	f002 f85e 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, grip_Pin|UpDown_Pin|DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_GPIO_Init+0xe8>)
 8000f18:	f002 f858 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Drop_Pin;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Drop_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_GPIO_Init+0xe4>)
 8000f34:	f001 feae 	bl	8002c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = grip_Pin|UpDown_Pin|DIR_Pin|STEP_Pin;
 8000f38:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_GPIO_Init+0xe8>)
 8000f52:	f001 fe9f 	bl	8002c94 <HAL_GPIO_Init>

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020400 	.word	0x40020400

08000f6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <MX_I2C1_Init+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x58>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000faa:	f002 f843 	bl	8003034 <HAL_I2C_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb4:	f000 fad0 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200002cc 	.word	0x200002cc
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	00061a80 	.word	0x00061a80

08000fc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_I2C_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12b      	bne.n	8001042 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001016:	2304      	movs	r3, #4
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <HAL_I2C_MspInit+0x8c>)
 8001022:	f001 fe37 	bl	8002c94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_I2C_MspInit+0x88>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400

08001058 <map>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input, float Max_Input, float Min_Output,
		float Max_Output) {
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001062:	edc7 0a04 	vstr	s1, [r7, #16]
 8001066:	ed87 1a03 	vstr	s2, [r7, #12]
 800106a:	edc7 1a02 	vstr	s3, [r7, #8]
 800106e:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
 8001072:	ed97 7a05 	vldr	s14, [r7, #20]
 8001076:	edd7 7a04 	vldr	s15, [r7, #16]
 800107a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800107e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001082:	edd7 7a02 	vldr	s15, [r7, #8]
 8001086:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800108a:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ (Max_Input - Min_Input) + Min_Output);
 800108e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001092:	edd7 7a04 	vldr	s15, [r7, #16]
 8001096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
 800109e:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80010be:	4a2b      	ldr	r2, [pc, #172]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 f99d 	bl	8002402 <HAL_CAN_GetRxMessage>
		cntt++;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80010d2:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 80010d4:	e002      	b.n	80010dc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			cntt = 0;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d8f8      	bhi.n	80010d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		}


	if (RxHeader.StdId == 0x102)
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80010ec:	d12a      	bne.n	8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
	{
		Push = RxData[2];
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80010f0:	789a      	ldrb	r2, [r3, #2]
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80010f4:	701a      	strb	r2, [r3, #0]
		Catch = RxData[3];
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80010f8:	78da      	ldrb	r2, [r3, #3]
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80010fc:	701a      	strb	r2, [r3, #0]
		Drop = RxData[4];
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001100:	791a      	ldrb	r2, [r3, #4]
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001104:	701a      	strb	r2, [r3, #0]
//		Push_manual = map(RxData[5], ;
		Stepper = map(RxData[7],0, 255, -1.0, 1.0);
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001108:	79db      	ldrb	r3, [r3, #7]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8001116:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800111a:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
 800111e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f7ff ff97 	bl	8001058 <map>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
		Shotter = RxData[6];
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001136:	799a      	ldrb	r2, [r3, #6]
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800113a:	701a      	strb	r2, [r3, #0]
		datacheck = 1;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
	{
		StateP = RxData[0];
		Position = RxData[1];
	}

}
 8001142:	e00d      	b.n	8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
	else if (RxHeader.StdId == 0x103)
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f240 1203 	movw	r2, #259	; 0x103
 800114c:	4293      	cmp	r3, r2
 800114e:	d107      	bne.n	8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		StateP = RxData[0];
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8001156:	701a      	strb	r2, [r3, #0]
		Position = RxData[1];
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800115a:	785a      	ldrb	r2, [r3, #1]
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800115e:	701a      	strb	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000358 	.word	0x20000358
 800116c:	20000320 	.word	0x20000320
 8001170:	20000370 	.word	0x20000370
 8001174:	20000380 	.word	0x20000380
 8001178:	2000037d 	.word	0x2000037d
 800117c:	20000388 	.word	0x20000388
 8001180:	437f0000 	.word	0x437f0000
 8001184:	00000000 	.word	0x00000000
 8001188:	20000384 	.word	0x20000384
 800118c:	2000037e 	.word	0x2000037e
 8001190:	2000036c 	.word	0x2000036c
 8001194:	20000389 	.word	0x20000389
 8001198:	2000037c 	.word	0x2000037c

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fdf2 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f848 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f7ff fe6a 	bl	8000e80 <MX_GPIO_Init>
  MX_CAN1_Init();
 80011ac:	f7ff fc4c 	bl	8000a48 <MX_CAN1_Init>
  MX_I2C1_Init();
 80011b0:	f7ff fedc 	bl	8000f6c <MX_I2C1_Init>
  MX_TIM3_Init();
 80011b4:	f000 fba2 	bl	80018fc <MX_TIM3_Init>
  MX_SPI1_Init();
 80011b8:	f000 f9d4 	bl	8001564 <MX_SPI1_Init>
  MX_TIM12_Init();
 80011bc:	f000 fc50 	bl	8001a60 <MX_TIM12_Init>
  MX_TIM2_Init();
 80011c0:	f000 fb50 	bl	8001864 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80011c4:	f000 fd44 	bl	8001c50 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80011c8:	f000 fbfc 	bl	80019c4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  /*** Configure TIMER ***/
  HAL_TIM_Base_Start_IT(&htim5);
 80011cc:	4814      	ldr	r0, [pc, #80]	; (8001220 <main+0x84>)
 80011ce:	f002 fdd7 	bl	8003d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <main+0x88>)
 80011d4:	f002 fdd4 	bl	8003d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <main+0x8c>)
 80011da:	f002 fdd1 	bl	8003d80 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011de:	2100      	movs	r1, #0
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <main+0x90>)
 80011e2:	f002 fe8d 	bl	8003f00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011e6:	2104      	movs	r1, #4
 80011e8:	4810      	ldr	r0, [pc, #64]	; (800122c <main+0x90>)
 80011ea:	f002 fe89 	bl	8003f00 <HAL_TIM_PWM_Start>

  /*** Configure CAN ***/
  HAL_CAN_Start(&hcan1);
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <main+0x94>)
 80011f0:	f000 ffe8 	bl	80021c4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011f4:	2102      	movs	r1, #2
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <main+0x94>)
 80011f8:	f001 fa15 	bl	8002626 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 8;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <main+0x98>)
 80011fe:	2208      	movs	r2, #8
 8001200:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <main+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <main+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x409;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <main+0x98>)
 8001210:	f240 4209 	movw	r2, #1033	; 0x409
 8001214:	601a      	str	r2, [r3, #0]

  /** Configure ADC ***/
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001216:	f7ff fcd3 	bl	8000bc0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800121a:	f004 f86d 	bl	80052f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x82>
 8001220:	200004bc 	.word	0x200004bc
 8001224:	2000042c 	.word	0x2000042c
 8001228:	20000504 	.word	0x20000504
 800122c:	20000474 	.word	0x20000474
 8001230:	2000002c 	.word	0x2000002c
 8001234:	2000033c 	.word	0x2000033c

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	; 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f005 faac 	bl	80067a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <SystemClock_Config+0xcc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <SystemClock_Config+0xcc>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <SystemClock_Config+0xd0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a21      	ldr	r2, [pc, #132]	; (8001308 <SystemClock_Config+0xd0>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <SystemClock_Config+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a8:	2308      	movs	r3, #8
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012ac:	23a8      	movs	r3, #168	; 0xa8
 80012ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fffd 	bl	80032bc <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c8:	f000 f946 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2105      	movs	r1, #5
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fa5e 	bl	80037ac <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012f6:	f000 f92f 	bl	8001558 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	; 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000
 800130c:	00000000 	.word	0x00000000

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM12){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a76      	ldr	r2, [pc, #472]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	f040 80a7 	bne.w	8001472 <HAL_TIM_PeriodElapsedCallback+0x162>
//
		if (Shotter >= 1)
 8001324:	4b75      	ldr	r3, [pc, #468]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			pwm1 = 700;
 800132c:	4b74      	ldr	r3, [pc, #464]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800132e:	4a75      	ldr	r2, [pc, #468]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e007      	b.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		else if (Shotter < 1)
 8001334:	4b71      	ldr	r3, [pc, #452]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			pwm1 = 0;
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
		}
		// Control Motor
		if (pwm1 > 10) {
 8001344:	4b6e      	ldr	r3, [pc, #440]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	dd0c      	ble.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x62>
			TIM3->CCR1 = 0;
 8001358:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800135a:	2200      	movs	r2, #0
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = pwm1;
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	4b68      	ldr	r3, [pc, #416]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
 8001370:	e01e      	b.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
		} else if (pwm1 < -10) {
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d50e      	bpl.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x94>
			TIM3->CCR1 = -1 * pwm1;
 8001386:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eef1 7a67 	vneg.f32	s15, s15
 8001390:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001396:	ee17 2a90 	vmov	r2, s15
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 800139c:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38
 80013a2:	e005      	b.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
		} else {
			TIM3->CCR1 = 0;
 80013a4:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80013aa:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
		}
		V1_out = map(X_end*10, -100.0, 100.0, 0, 65535);
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	ed9f 2a54 	vldr	s4, [pc, #336]	; 8001510 <HAL_TIM_PeriodElapsedCallback+0x200>
 80013c2:	eddf 1a54 	vldr	s3, [pc, #336]	; 8001514 <HAL_TIM_PeriodElapsedCallback+0x204>
 80013c6:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8001518 <HAL_TIM_PeriodElapsedCallback+0x208>
 80013ca:	eddf 0a54 	vldr	s1, [pc, #336]	; 800151c <HAL_TIM_PeriodElapsedCallback+0x20c>
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	f7ff fe41 	bl	8001058 <map>
 80013d6:	eef0 7a40 	vmov.f32	s15, s0
 80013da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013de:	ee17 3a90 	vmov	r3, s15
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80013e6:	801a      	strh	r2, [r3, #0]
		V2_out = map(SpeedShooter*100, 0.0, 1000.0, 0, 65535);
 80013e8:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8001510 <HAL_TIM_PeriodElapsedCallback+0x200>
 8001400:	eddf 1a44 	vldr	s3, [pc, #272]	; 8001514 <HAL_TIM_PeriodElapsedCallback+0x204>
 8001404:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8001528 <HAL_TIM_PeriodElapsedCallback+0x218>
 8001408:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001514 <HAL_TIM_PeriodElapsedCallback+0x204>
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	f7ff fe22 	bl	8001058 <map>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001424:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((V1_out & 0xFF00) >> 8);
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001432:	701a      	strb	r2, [r3, #0]
		TxData[1] = (V1_out & 0x00FF);
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800143c:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((V2_out & 0xFF00) >> 8);
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800144a:	709a      	strb	r2, [r3, #2]
		TxData[3] = (V2_out & 0x00FF);
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001454:	70da      	strb	r2, [r3, #3]
		TxData[4] = Push;
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800145c:	711a      	strb	r2, [r3, #4]
		TxData[5] = Drop;
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001464:	715a      	strb	r2, [r3, #5]
//		TxData[6] = TakeRice;
//		TxData[7] = push2;
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001468:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800146a:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800146c:	4835      	ldr	r0, [pc, #212]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800146e:	f000 feed 	bl	800224c <HAL_CAN_AddTxMessage>

	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a34      	ldr	r2, [pc, #208]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x170>
    HAL_IncTick();
 800147c:	f000 fca6 	bl	8001dcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {  //stepper1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d12d      	bne.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x1d6>

		if (omega != 0) {
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800148c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	f7ff f902 	bl	80006a0 <__aeabi_dcmpeq>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11c      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x1cc>
			stepDelay = (Alpha * TIM_FREQ) / (omega);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	a111      	add	r1, pc, #68	; (adr r1, 80014f0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80014aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014ae:	f7fe ffb9 	bl	8000424 <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff f923 	bl	8000704 <__aeabi_d2uiz>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014c4:	801a      	strh	r2, [r3, #0]
			TIM2->ARR = stepDelay;
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014c8:	881a      	ldrh	r2, [r3, #0]
 80014ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80014d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d4:	481f      	ldr	r0, [pc, #124]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014d6:	f001 fd92 	bl	8002ffe <HAL_GPIO_TogglePin>
////			X_end = X_goal;
////		}
//		j++;
//  }
  /* USER CODE END Callback 1 */
}
 80014da:	e004      	b.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x1d6>
			TIM2->ARR = 10000;
 80014dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	99999999 	.word	0x99999999
 80014f4:	40beadf9 	.word	0x40beadf9
 80014f8:	40001800 	.word	0x40001800
 80014fc:	2000037e 	.word	0x2000037e
 8001500:	20000374 	.word	0x20000374
 8001504:	442f0000 	.word	0x442f0000
 8001508:	40000400 	.word	0x40000400
 800150c:	2000006c 	.word	0x2000006c
 8001510:	477fff00 	.word	0x477fff00
 8001514:	00000000 	.word	0x00000000
 8001518:	42c80000 	.word	0x42c80000
 800151c:	c2c80000 	.word	0xc2c80000
 8001520:	20000378 	.word	0x20000378
 8001524:	2000037f 	.word	0x2000037f
 8001528:	447a0000 	.word	0x447a0000
 800152c:	2000037a 	.word	0x2000037a
 8001530:	20000360 	.word	0x20000360
 8001534:	20000380 	.word	0x20000380
 8001538:	20000388 	.word	0x20000388
 800153c:	20000368 	.word	0x20000368
 8001540:	2000033c 	.word	0x2000033c
 8001544:	2000002c 	.word	0x2000002c
 8001548:	40001000 	.word	0x40001000
 800154c:	20000060 	.word	0x20000060
 8001550:	20000354 	.word	0x20000354
 8001554:	40020400 	.word	0x40020400

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_SPI1_Init+0x64>)
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <MX_SPI1_Init+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001598:	2220      	movs	r2, #32
 800159a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015b0:	220a      	movs	r2, #10
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015b6:	f002 fb0b 	bl	8003bd0 <HAL_SPI_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015c0:	f7ff ffca 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000038c 	.word	0x2000038c
 80015cc:	40013000 	.word	0x40013000

080015d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_SPI_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_SPI_MspInit+0x88>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_SPI_MspInit+0x88>)
 80015fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23e0      	movs	r3, #224	; 0xe0
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163a:	2305      	movs	r3, #5
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_SPI_MspInit+0x8c>)
 8001646:	f001 fb25 	bl	8002c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40013000 	.word	0x40013000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_MspInit+0x54>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_MspInit+0x54>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_MspInit+0x54>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_MspInit+0x54>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_MspInit+0x54>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_MspInit+0x54>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	210f      	movs	r1, #15
 80016a2:	f06f 0001 	mvn.w	r0, #1
 80016a6:	f001 facb 	bl	8002c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	; 0x38
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_InitTick+0xe4>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a32      	ldr	r2, [pc, #200]	; (800179c <HAL_InitTick+0xe4>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_InitTick+0xe4>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e4:	f107 0210 	add.w	r2, r7, #16
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fa3c 	bl	8003b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fe:	f002 fa0d 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8001702:	6378      	str	r0, [r7, #52]	; 0x34
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001706:	f002 fa09 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <HAL_InitTick+0xe8>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	3b01      	subs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_InitTick+0xec>)
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_InitTick+0xf0>)
 8001722:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_InitTick+0xec>)
 8001726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_InitTick+0xec>)
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_InitTick+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_InitTick+0xec>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_InitTick+0xec>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001744:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_InitTick+0xec>)
 8001746:	f002 facc 	bl	8003ce2 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11b      	bne.n	8001790 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <HAL_InitTick+0xec>)
 800175a:	f002 fb11 	bl	8003d80 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800176c:	2036      	movs	r0, #54	; 0x36
 800176e:	f001 fa83 	bl	8002c78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d808      	bhi.n	800178a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	2036      	movs	r0, #54	; 0x36
 800177e:	f001 fa5f 	bl	8002c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_InitTick+0xf4>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e002      	b.n	8001790 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001794:	4618      	mov	r0, r3
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	200003e4 	.word	0x200003e4
 80017a8:	40001000 	.word	0x40001000
 80017ac:	20000004 	.word	0x20000004

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <CAN1_RX0_IRQHandler+0x10>)
 80017e2:	f000 ff46 	bl	8002672 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000002c 	.word	0x2000002c

080017f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM2_IRQHandler+0x10>)
 80017f6:	f002 fc4b 	bl	8004090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000042c 	.word	0x2000042c

08001804 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800180a:	f002 fc41 	bl	8004090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000504 	.word	0x20000504

08001818 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM5_IRQHandler+0x10>)
 800181e:	f002 fc37 	bl	8004090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200004bc 	.word	0x200004bc

0800182c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM6_DAC_IRQHandler+0x10>)
 8001832:	f002 fc2d 	bl	8004090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003e4 	.word	0x200003e4

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_TIM2_Init+0x94>)
 800188a:	2253      	movs	r2, #83	; 0x53
 800188c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_TIM2_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018aa:	f002 fa1a 	bl	8003ce2 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b4:	f7ff fe50 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018c6:	f002 fdad 	bl	8004424 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018d0:	f7ff fe42 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018e2:	f003 f99f 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f7ff fe34 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000042c 	.word	0x2000042c

080018fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <MX_TIM3_Init+0xc0>)
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <MX_TIM3_Init+0xc4>)
 8001922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_TIM3_Init+0xc0>)
 8001926:	220d      	movs	r2, #13
 8001928:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <MX_TIM3_Init+0xc0>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_TIM3_Init+0xc0>)
 8001932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001936:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_TIM3_Init+0xc0>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_TIM3_Init+0xc0>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <MX_TIM3_Init+0xc0>)
 8001946:	f002 fa8b 	bl	8003e60 <HAL_TIM_PWM_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001950:	f7ff fe02 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	4619      	mov	r1, r3
 8001962:	4816      	ldr	r0, [pc, #88]	; (80019bc <MX_TIM3_Init+0xc0>)
 8001964:	f003 f95e 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800196e:	f7ff fdf3 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2360      	movs	r3, #96	; 0x60
 8001974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_TIM3_Init+0xc0>)
 800198a:	f002 fc89 	bl	80042a0 <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001994:	f7ff fde0 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2204      	movs	r2, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM3_Init+0xc0>)
 80019a0:	f002 fc7e 	bl	80042a0 <HAL_TIM_PWM_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019aa:	f7ff fdd5 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM3_Init+0xc0>)
 80019b0:	f000 f914 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000474 	.word	0x20000474
 80019c0:	40000400 	.word	0x40000400

080019c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	463b      	mov	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_TIM5_Init+0x94>)
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <MX_TIM5_Init+0x98>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_TIM5_Init+0x94>)
 80019e8:	22a7      	movs	r2, #167	; 0xa7
 80019ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_TIM5_Init+0x94>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_TIM5_Init+0x94>)
 80019f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80019f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_TIM5_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_TIM5_Init+0x94>)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <MX_TIM5_Init+0x94>)
 8001a08:	f002 f96b 	bl	8003ce2 <HAL_TIM_Base_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001a12:	f7ff fda1 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM5_Init+0x94>)
 8001a24:	f002 fcfe 	bl	8004424 <HAL_TIM_ConfigClockSource>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001a2e:	f7ff fd93 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM5_Init+0x94>)
 8001a40:	f003 f8f0 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001a4a:	f7ff fd85 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200004bc 	.word	0x200004bc
 8001a5c:	40000c00 	.word	0x40000c00

08001a60 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <MX_TIM12_Init+0x70>)
 8001a76:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a7a:	22a7      	movs	r2, #167	; 0xa7
 8001a7c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001a9a:	f002 f922 	bl	8003ce2 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001aa4:	f7ff fd58 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_TIM12_Init+0x6c>)
 8001ab4:	f002 fcb6 	bl	8004424 <HAL_TIM_ConfigClockSource>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001abe:	f7ff fd4b 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000504 	.word	0x20000504
 8001ad0:	40001800 	.word	0x40001800

08001ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d116      	bne.n	8001b14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2105      	movs	r1, #5
 8001b06:	201c      	movs	r0, #28
 8001b08:	f001 f89a 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b0c:	201c      	movs	r0, #28
 8001b0e:	f001 f8b3 	bl	8002c78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001b12:	e036      	b.n	8001b82 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_TIM_Base_MspInit+0xbc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d116      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	2032      	movs	r0, #50	; 0x32
 8001b40:	f001 f87e 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b44:	2032      	movs	r0, #50	; 0x32
 8001b46:	f001 f897 	bl	8002c78 <HAL_NVIC_EnableIRQ>
}
 8001b4a:	e01a      	b.n	8001b82 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM12)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_TIM_Base_MspInit+0xc0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_TIM_Base_MspInit+0xb8>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	202b      	movs	r0, #43	; 0x2b
 8001b78:	f001 f862 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b7c:	202b      	movs	r0, #43	; 0x2b
 8001b7e:	f001 f87b 	bl	8002c78 <HAL_NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40001800 	.word	0x40001800

08001b98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <HAL_TIM_MspPostInit+0x68>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d11d      	bne.n	8001c3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_TIM_MspPostInit+0x6c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_TIM_MspPostInit+0x6c>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_TIM_MspPostInit+0x6c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c1a:	2330      	movs	r3, #48	; 0x30
 8001c1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_TIM_MspPostInit+0x70>)
 8001c36:	f001 f82d 	bl	8002c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020400 	.word	0x40020400

08001c50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART3_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c88:	f003 f85c 	bl	8004d44 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f7ff fc61 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000054c 	.word	0x2000054c
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12c      	bne.n	8001d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d10:	2307      	movs	r3, #7
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x8c>)
 8001d1c:	f000 ffba 	bl	8002c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020800 	.word	0x40020800

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d5e:	f7ff fd6f 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f004 fcfb 	bl	800675c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff fa19 	bl	800119c <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d78:	08006854 	.word	0x08006854
  ldr r2, =_sbss
 8001d7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d80:	200042e8 	.word	0x200042e8

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 ff3a 	bl	8002c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f7ff fc7e 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fc50 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000590 	.word	0x20000590

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000590 	.word	0x20000590

08001e0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0ed      	b.n	8001ffa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fe5e 	bl	8000aec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e40:	f7ff ffd8 	bl	8001df4 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e46:	e012      	b.n	8001e6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e48:	f7ff ffd4 	bl	8001df4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b0a      	cmp	r3, #10
 8001e54:	d90b      	bls.n	8001e6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0c5      	b.n	8001ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0e5      	beq.n	8001e48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0202 	bic.w	r2, r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8c:	f7ff ffb2 	bl	8001df4 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e92:	e012      	b.n	8001eba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e94:	f7ff ffae 	bl	8001df4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d90b      	bls.n	8001eba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e09f      	b.n	8001ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e5      	bne.n	8001e94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7e5b      	ldrb	r3, [r3, #25]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e007      	b.n	8001f1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e9b      	ldrb	r3, [r3, #26]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e007      	b.n	8001f46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0220 	bic.w	r2, r2, #32
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7edb      	ldrb	r3, [r3, #27]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0210 	bic.w	r2, r2, #16
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e007      	b.n	8001f70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0210 	orr.w	r2, r2, #16
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7f1b      	ldrb	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0208 	orr.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0208 	bic.w	r2, r2, #8
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7f5b      	ldrb	r3, [r3, #29]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d108      	bne.n	8001fb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0204 	orr.w	r2, r2, #4
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e007      	b.n	8001fc4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0204 	bic.w	r2, r2, #4
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	ea42 0103 	orr.w	r1, r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d003      	beq.n	800202a <HAL_CAN_ConfigFilter+0x26>
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b02      	cmp	r3, #2
 8002026:	f040 80be 	bne.w	80021a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800202c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002044:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2201      	movs	r2, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	401a      	ands	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d123      	bne.n	80020d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3248      	adds	r2, #72	; 0x48
 80020b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ca:	6979      	ldr	r1, [r7, #20]
 80020cc:	3348      	adds	r3, #72	; 0x48
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d122      	bne.n	8002122 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3248      	adds	r2, #72	; 0x48
 8002102:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002116:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	3348      	adds	r3, #72	; 0x48
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800213c:	e007      	b.n	800214e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	431a      	orrs	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002168:	e007      	b.n	800217a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	431a      	orrs	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	431a      	orrs	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002198:	f023 0201 	bic.w	r2, r3, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e006      	b.n	80021b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40006400 	.word	0x40006400

080021c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d12e      	bne.n	8002236 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021f0:	f7ff fe00 	bl	8001df4 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021f6:	e012      	b.n	800221e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f8:	f7ff fdfc 	bl	8001df4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b0a      	cmp	r3, #10
 8002204:	d90b      	bls.n	800221e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e012      	b.n	8002244 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e5      	bne.n	80021f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e006      	b.n	8002244 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002260:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d003      	beq.n	8002278 <HAL_CAN_AddTxMessage+0x2c>
 8002270:	7ffb      	ldrb	r3, [r7, #31]
 8002272:	2b02      	cmp	r3, #2
 8002274:	f040 80b8 	bne.w	80023e8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a0 	beq.w	80023d8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	0e1b      	lsrs	r3, r3, #24
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d907      	bls.n	80022b8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e09e      	b.n	80023f6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022b8:	2201      	movs	r2, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	409a      	lsls	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	6809      	ldr	r1, [r1, #0]
 80022d8:	431a      	orrs	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3318      	adds	r3, #24
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	440b      	add	r3, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e00f      	b.n	8002306 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022f0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022fa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3318      	adds	r3, #24
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	440b      	add	r3, r1
 8002304:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3318      	adds	r3, #24
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	440b      	add	r3, r1
 8002316:	3304      	adds	r3, #4
 8002318:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	7d1b      	ldrb	r3, [r3, #20]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d111      	bne.n	8002346 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3318      	adds	r3, #24
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	3304      	adds	r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6811      	ldr	r1, [r2, #0]
 8002336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3318      	adds	r3, #24
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	440b      	add	r3, r1
 8002342:	3304      	adds	r3, #4
 8002344:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3307      	adds	r3, #7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	061a      	lsls	r2, r3, #24
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3306      	adds	r3, #6
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3305      	adds	r3, #5
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	4313      	orrs	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	3204      	adds	r2, #4
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	4610      	mov	r0, r2
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	ea43 0200 	orr.w	r2, r3, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800237c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3303      	adds	r3, #3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	061a      	lsls	r2, r3, #24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3302      	adds	r3, #2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3301      	adds	r3, #1
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4313      	orrs	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	4610      	mov	r0, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6811      	ldr	r1, [r2, #0]
 80023a4:	ea43 0200 	orr.w	r2, r3, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3318      	adds	r3, #24
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6811      	ldr	r1, [r2, #0]
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3318      	adds	r3, #24
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	440b      	add	r3, r1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e00e      	b.n	80023f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e006      	b.n	80023f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d003      	beq.n	8002426 <HAL_CAN_GetRxMessage+0x24>
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b02      	cmp	r3, #2
 8002422:	f040 80f3 	bne.w	800260c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10e      	bne.n	800244a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e7      	b.n	800261a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d8      	b.n	800261a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	331b      	adds	r3, #27
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0204 	and.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	331b      	adds	r3, #27
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0d5b      	lsrs	r3, r3, #21
 8002496:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	331b      	adds	r3, #27
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4413      	add	r3, r2
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	331b      	adds	r3, #27
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0202 	and.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	331b      	adds	r3, #27
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	331b      	adds	r3, #27
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	331b      	adds	r3, #27
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	4413      	add	r3, r2
 8002520:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0a1a      	lsrs	r2, r3, #8
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	4413      	add	r3, r2
 8002550:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0c1a      	lsrs	r2, r3, #16
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3302      	adds	r3, #2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e1a      	lsrs	r2, r3, #24
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3303      	adds	r3, #3
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	3304      	adds	r3, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0a1a      	lsrs	r2, r3, #8
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	3305      	adds	r3, #5
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0c1a      	lsrs	r2, r3, #16
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3306      	adds	r3, #6
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0e1a      	lsrs	r2, r3, #24
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	3307      	adds	r3, #7
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	e007      	b.n	8002608 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e006      	b.n	800261a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <HAL_CAN_ActivateNotification+0x1e>
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d109      	bne.n	8002658 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6959      	ldr	r1, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e006      	b.n	8002666 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d07c      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d023      	beq.n	800270a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f983 	bl	80029e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80026da:	e016      	b.n	800270a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e00c      	b.n	800270a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e002      	b.n	800270a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f989 	bl	8002a1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d024      	beq.n	800275e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f963 	bl	80029f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800272e:	e016      	b.n	800275e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	e00c      	b.n	800275e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e002      	b.n	800275e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f969 	bl	8002a30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d024      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002770:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f943 	bl	8002a08 <HAL_CAN_TxMailbox2CompleteCallback>
 8002782:	e016      	b.n	80027b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	e00c      	b.n	80027b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e002      	b.n	80027b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f949 	bl	8002a44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2210      	movs	r2, #16
 80027d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2208      	movs	r2, #8
 80027f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f930 	bl	8002a58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7fe fc4f 	bl	80010b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002830:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2210      	movs	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2208      	movs	r2, #8
 8002854:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f912 	bl	8002a80 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8f9 	bl	8002a6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2210      	movs	r2, #16
 8002894:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8fc 	bl	8002a94 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8f5 	bl	8002aa8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d07b      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d072      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292c:	2b00      	cmp	r3, #0
 800292e:	d043      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03e      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002940:	2b60      	cmp	r3, #96	; 0x60
 8002942:	d02b      	beq.n	800299c <HAL_CAN_IRQHandler+0x32a>
 8002944:	2b60      	cmp	r3, #96	; 0x60
 8002946:	d82e      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002948:	2b50      	cmp	r3, #80	; 0x50
 800294a:	d022      	beq.n	8002992 <HAL_CAN_IRQHandler+0x320>
 800294c:	2b50      	cmp	r3, #80	; 0x50
 800294e:	d82a      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d019      	beq.n	8002988 <HAL_CAN_IRQHandler+0x316>
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d826      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002958:	2b30      	cmp	r3, #48	; 0x30
 800295a:	d010      	beq.n	800297e <HAL_CAN_IRQHandler+0x30c>
 800295c:	2b30      	cmp	r3, #48	; 0x30
 800295e:	d822      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002960:	2b10      	cmp	r3, #16
 8002962:	d002      	beq.n	800296a <HAL_CAN_IRQHandler+0x2f8>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d005      	beq.n	8002974 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002968:	e01d      	b.n	80029a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002972:	e019      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297c:	e014      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002986:	e00f      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002990:	e00a      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800299a:	e005      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a4:	e000      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80029a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2204      	movs	r2, #4
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f872 	bl	8002abc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <__NVIC_EnableIRQ+0x38>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	db0a      	blt.n	8002b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	490c      	ldr	r1, [pc, #48]	; (8002bbc <__NVIC_SetPriority+0x4c>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b98:	e00a      	b.n	8002bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <__NVIC_SetPriority+0x50>)
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	761a      	strb	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf28      	it	cs
 8002be2:	2304      	movcs	r3, #4
 8002be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d902      	bls.n	8002bf4 <NVIC_EncodePriority+0x30>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b03      	subs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <NVIC_EncodePriority+0x32>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	4313      	orrs	r3, r2
         );
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff4c 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c52:	f7ff ff61 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	6978      	ldr	r0, [r7, #20]
 8002c5e:	f7ff ffb1 	bl	8002bc4 <NVIC_EncodePriority>
 8002c62:	4602      	mov	r2, r0
 8002c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff80 	bl	8002b70 <__NVIC_SetPriority>
}
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff54 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e16b      	b.n	8002f88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f040 815a 	bne.w	8002f82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d005      	beq.n	8002ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d130      	bne.n	8002d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d017      	beq.n	8002d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d123      	bne.n	8002dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80b4 	beq.w	8002f82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <HAL_GPIO_Init+0x30c>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a5f      	ldr	r2, [pc, #380]	; (8002fa0 <HAL_GPIO_Init+0x30c>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <HAL_GPIO_Init+0x30c>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_GPIO_Init+0x310>)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a52      	ldr	r2, [pc, #328]	; (8002fa8 <HAL_GPIO_Init+0x314>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02b      	beq.n	8002eba <HAL_GPIO_Init+0x226>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a51      	ldr	r2, [pc, #324]	; (8002fac <HAL_GPIO_Init+0x318>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d025      	beq.n	8002eb6 <HAL_GPIO_Init+0x222>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a50      	ldr	r2, [pc, #320]	; (8002fb0 <HAL_GPIO_Init+0x31c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01f      	beq.n	8002eb2 <HAL_GPIO_Init+0x21e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4f      	ldr	r2, [pc, #316]	; (8002fb4 <HAL_GPIO_Init+0x320>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_GPIO_Init+0x21a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0x216>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4d      	ldr	r2, [pc, #308]	; (8002fbc <HAL_GPIO_Init+0x328>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00d      	beq.n	8002ea6 <HAL_GPIO_Init+0x212>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4c      	ldr	r2, [pc, #304]	; (8002fc0 <HAL_GPIO_Init+0x32c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x20e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_GPIO_Init+0x330>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_GPIO_Init+0x20a>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e00e      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	e00c      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	e00a      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002eaa:	2304      	movs	r3, #4
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x228>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	; (8002fa4 <HAL_GPIO_Init+0x310>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f ae90 	bls.w	8002cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40021400 	.word	0x40021400
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	40021c00 	.word	0x40021c00
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003010:	887a      	ldrh	r2, [r7, #2]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	041a      	lsls	r2, r3, #16
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43d9      	mvns	r1, r3
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e12b      	b.n	800329e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd ffb4 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003098:	f000 fd40 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 800309c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a81      	ldr	r2, [pc, #516]	; (80032a8 <HAL_I2C_Init+0x274>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d807      	bhi.n	80030b8 <HAL_I2C_Init+0x84>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a80      	ldr	r2, [pc, #512]	; (80032ac <HAL_I2C_Init+0x278>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bf94      	ite	ls
 80030b0:	2301      	movls	r3, #1
 80030b2:	2300      	movhi	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e006      	b.n	80030c6 <HAL_I2C_Init+0x92>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a7d      	ldr	r2, [pc, #500]	; (80032b0 <HAL_I2C_Init+0x27c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0e7      	b.n	800329e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a78      	ldr	r2, [pc, #480]	; (80032b4 <HAL_I2C_Init+0x280>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0c9b      	lsrs	r3, r3, #18
 80030d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a6a      	ldr	r2, [pc, #424]	; (80032a8 <HAL_I2C_Init+0x274>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d802      	bhi.n	8003108 <HAL_I2C_Init+0xd4>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3301      	adds	r3, #1
 8003106:	e009      	b.n	800311c <HAL_I2C_Init+0xe8>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	4a69      	ldr	r2, [pc, #420]	; (80032b8 <HAL_I2C_Init+0x284>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	3301      	adds	r3, #1
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800312e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	495c      	ldr	r1, [pc, #368]	; (80032a8 <HAL_I2C_Init+0x274>)
 8003138:	428b      	cmp	r3, r1
 800313a:	d819      	bhi.n	8003170 <HAL_I2C_Init+0x13c>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e59      	subs	r1, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fbb1 f3f3 	udiv	r3, r1, r3
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003150:	400b      	ands	r3, r1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_I2C_Init+0x138>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1e59      	subs	r1, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fbb1 f3f3 	udiv	r3, r1, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316a:	e051      	b.n	8003210 <HAL_I2C_Init+0x1dc>
 800316c:	2304      	movs	r3, #4
 800316e:	e04f      	b.n	8003210 <HAL_I2C_Init+0x1dc>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d111      	bne.n	800319c <HAL_I2C_Init+0x168>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1e58      	subs	r0, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e012      	b.n	80031c2 <HAL_I2C_Init+0x18e>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e58      	subs	r0, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	0099      	lsls	r1, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Init+0x196>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e022      	b.n	8003210 <HAL_I2C_Init+0x1dc>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10e      	bne.n	80031f0 <HAL_I2C_Init+0x1bc>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1e58      	subs	r0, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	440b      	add	r3, r1
 80031e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_Init+0x1dc>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e58      	subs	r0, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	0099      	lsls	r1, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	fbb0 f3f3 	udiv	r3, r0, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	6809      	ldr	r1, [r1, #0]
 8003214:	4313      	orrs	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800323e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6911      	ldr	r1, [r2, #16]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68d2      	ldr	r2, [r2, #12]
 800324a:	4311      	orrs	r1, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	430b      	orrs	r3, r1
 8003252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	000186a0 	.word	0x000186a0
 80032ac:	001e847f 	.word	0x001e847f
 80032b0:	003d08ff 	.word	0x003d08ff
 80032b4:	431bde83 	.word	0x431bde83
 80032b8:	10624dd3 	.word	0x10624dd3

080032bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e267      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b82      	ldr	r3, [pc, #520]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e242      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6c      	ldr	r2, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b69      	ldr	r3, [pc, #420]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fd3e 	bl	8001df4 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fd3a 	bl	8001df4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e207      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fd2a 	bl	8001df4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fd26 	bl	8001df4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1f3      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1c7      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4937      	ldr	r1, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	e03a      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fcdf 	bl	8001df4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe fcdb 	bl	8001df4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1a8      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4925      	ldr	r1, [pc, #148]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe fcbe 	bl	8001df4 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347c:	f7fe fcba 	bl	8001df4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e187      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d036      	beq.n	8003514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fc9e 	bl	8001df4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fc9a 	bl	8001df4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e167      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
 80034da:	e01b      	b.n	8003514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fe fc87 	bl	8001df4 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e00e      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fe fc83 	bl	8001df4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e150      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 80034fc:	40023800 	.word	0x40023800
 8003500:	42470000 	.word	0x42470000
 8003504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ea      	bne.n	80034ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8097 	beq.w	8003650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b7d      	ldr	r3, [pc, #500]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a7c      	ldr	r2, [pc, #496]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b7a      	ldr	r3, [pc, #488]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b77      	ldr	r3, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe fc43 	bl	8001df4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7fe fc3f 	bl	8001df4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e10c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2ea>
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a63      	ldr	r2, [pc, #396]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x30c>
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035c8:	4b58      	ldr	r3, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe fc04 	bl	8001df4 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe fc00 	bl	8001df4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0cb      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ee      	beq.n	80035f0 <HAL_RCC_OscConfig+0x334>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fe fbee 	bl	8001df4 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe fbea 	bl	8001df4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0b5      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a1 	beq.w	800379c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365a:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d05c      	beq.n	8003720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d141      	bne.n	80036f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe fbbe 	bl	8001df4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe fbba 	bl	8001df4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e087      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe fb93 	bl	8001df4 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe fb8f 	bl	8001df4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e05c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x416>
 80036f0:	e054      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe fb7c 	bl	8001df4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fb78 	bl	8001df4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e045      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x444>
 800371e:	e03d      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e038      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4ec>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d028      	beq.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d121      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d11a      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fe faaa 	bl	8001df4 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fe faa6 	bl	8001df4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003932:	f000 f821 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd feb0 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	0800682c 	.word	0x0800682c
 8003970:	20000000 	.word	0x20000000
 8003974:	20000004 	.word	0x20000004

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b090      	sub	sp, #64	; 0x40
 800397e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
 8003984:	2300      	movs	r3, #0
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003988:	2300      	movs	r3, #0
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d00d      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x40>
 800399c:	2b08      	cmp	r3, #8
 800399e:	f200 80a1 	bhi.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x34>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039aa:	e09b      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_GetSysClockFreq+0x184>)
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039b0:	e09b      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b2:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b6:	e098      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b8:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d028      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	2200      	movs	r2, #0
 80039d6:	623b      	str	r3, [r7, #32]
 80039d8:	627a      	str	r2, [r7, #36]	; 0x24
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039e0:	2100      	movs	r1, #0
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e4:	fb03 f201 	mul.w	r2, r3, r1
 80039e8:	2300      	movs	r3, #0
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80039f2:	fba0 1202 	umull	r1, r2, r0, r2
 80039f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f8:	460a      	mov	r2, r1
 80039fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80039fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fe:	4413      	add	r3, r2
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	2200      	movs	r2, #0
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	61fa      	str	r2, [r7, #28]
 8003a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a12:	f7fc fe97 	bl	8000744 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1e:	e053      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	2200      	movs	r2, #0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	617a      	str	r2, [r7, #20]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	4652      	mov	r2, sl
 8003a38:	465b      	mov	r3, fp
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a48:	0150      	lsls	r0, r2, #5
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a52:	eb63 090b 	sbc.w	r9, r3, fp
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	00eb      	lsls	r3, r5, #3
 8003a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a80:	00e2      	lsls	r2, r4, #3
 8003a82:	4614      	mov	r4, r2
 8003a84:	461d      	mov	r5, r3
 8003a86:	eb14 030a 	adds.w	r3, r4, sl
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	eb45 030b 	adc.w	r3, r5, fp
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	028b      	lsls	r3, r1, #10
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	028a      	lsls	r2, r1, #10
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	60fa      	str	r2, [r7, #12]
 8003ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003abc:	f7fc fe42 	bl	8000744 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3740      	adds	r7, #64	; 0x40
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	017d7840 	.word	0x017d7840

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000000 	.word	0x20000000

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	0800683c 	.word	0x0800683c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffdc 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0b5b      	lsrs	r3, r3, #13
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	0800683c 	.word	0x0800683c

08003b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	220f      	movs	r2, #15
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCC_GetClockConfig+0x60>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0207 	and.w	r2, r3, #7
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40023c00 	.word	0x40023c00

08003bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07b      	b.n	8003cda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf2:	d009      	beq.n	8003c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	e005      	b.n	8003c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fcd4 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	ea42 0103 	orr.w	r1, r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	f003 0104 	and.w	r1, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0210 	and.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e041      	b.n	8003d78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fd fee3 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f000 fc6f 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d001      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e04e      	b.n	8003e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc2:	d01d      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d111      	bne.n	8003e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d010      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	e007      	b.n	8003e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40010400 	.word	0x40010400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40001800 	.word	0x40001800

08003e60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e041      	b.n	8003ef6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fe86 	bl	8001b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f000 fbb0 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_PWM_Start+0x24>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e022      	b.n	8003f6a <HAL_TIM_PWM_Start+0x6a>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d109      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x3e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e015      	b.n	8003f6a <HAL_TIM_PWM_Start+0x6a>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d109      	bne.n	8003f58 <HAL_TIM_PWM_Start+0x58>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e008      	b.n	8003f6a <HAL_TIM_PWM_Start+0x6a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07c      	b.n	800406c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x82>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f80:	e013      	b.n	8003faa <HAL_TIM_PWM_Start+0xaa>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_PWM_Start+0x92>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	e00b      	b.n	8003faa <HAL_TIM_PWM_Start+0xaa>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa0:	e003      	b.n	8003faa <HAL_TIM_PWM_Start+0xaa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe10 	bl	8004bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_TIM_PWM_Start+0x174>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_TIM_PWM_Start+0xcc>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <HAL_TIM_PWM_Start+0x178>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIM_PWM_Start+0xd0>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xd2>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a22      	ldr	r2, [pc, #136]	; (8004074 <HAL_TIM_PWM_Start+0x174>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d022      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d01d      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_TIM_PWM_Start+0x17c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_TIM_PWM_Start+0x180>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_TIM_PWM_Start+0x184>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <HAL_TIM_PWM_Start+0x178>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_TIM_PWM_Start+0x188>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIM_PWM_Start+0x136>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <HAL_TIM_PWM_Start+0x18c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d111      	bne.n	800405a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b06      	cmp	r3, #6
 8004046:	d010      	beq.n	800406a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	e007      	b.n	800406a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40010000 	.word	0x40010000
 8004078:	40010400 	.word	0x40010400
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40014000 	.word	0x40014000
 800408c:	40001800 	.word	0x40001800

08004090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0202 	mvn.w	r2, #2
 80040bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa77 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa69 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fa7a 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0204 	mvn.w	r2, #4
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa4d 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fa3f 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fa50 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b08      	cmp	r3, #8
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0208 	mvn.w	r2, #8
 8004164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2204      	movs	r2, #4
 800416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa23 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa15 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fa26 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0210 	mvn.w	r2, #16
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2208      	movs	r2, #8
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9f9 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f9eb 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f9fc 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0201 	mvn.w	r2, #1
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd f87e 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b80      	cmp	r3, #128	; 0x80
 8004220:	d10e      	bne.n	8004240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b80      	cmp	r3, #128	; 0x80
 800422e:	d107      	bne.n	8004240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fd78 	bl	8004d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d10e      	bne.n	800426c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d107      	bne.n	800426c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f9c1 	bl	80045ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b20      	cmp	r3, #32
 8004278:	d10e      	bne.n	8004298 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b20      	cmp	r3, #32
 8004286:	d107      	bne.n	8004298 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0220 	mvn.w	r2, #32
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fd42 	bl	8004d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0ae      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	f200 809f 	bhi.w	800440c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	08004309 	.word	0x08004309
 80042d8:	0800440d 	.word	0x0800440d
 80042dc:	0800440d 	.word	0x0800440d
 80042e0:	0800440d 	.word	0x0800440d
 80042e4:	08004349 	.word	0x08004349
 80042e8:	0800440d 	.word	0x0800440d
 80042ec:	0800440d 	.word	0x0800440d
 80042f0:	0800440d 	.word	0x0800440d
 80042f4:	0800438b 	.word	0x0800438b
 80042f8:	0800440d 	.word	0x0800440d
 80042fc:	0800440d 	.word	0x0800440d
 8004300:	0800440d 	.word	0x0800440d
 8004304:	080043cb 	.word	0x080043cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fa18 	bl	8004744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0204 	bic.w	r2, r2, #4
 8004332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6999      	ldr	r1, [r3, #24]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	619a      	str	r2, [r3, #24]
      break;
 8004346:	e064      	b.n	8004412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fa68 	bl	8004824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6999      	ldr	r1, [r3, #24]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	021a      	lsls	r2, r3, #8
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	619a      	str	r2, [r3, #24]
      break;
 8004388:	e043      	b.n	8004412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fabd 	bl	8004910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0208 	orr.w	r2, r2, #8
 80043a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0204 	bic.w	r2, r2, #4
 80043b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69d9      	ldr	r1, [r3, #28]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	61da      	str	r2, [r3, #28]
      break;
 80043c8:	e023      	b.n	8004412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fb11 	bl	80049f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69d9      	ldr	r1, [r3, #28]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	021a      	lsls	r2, r3, #8
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	61da      	str	r2, [r3, #28]
      break;
 800440a:	e002      	b.n	8004412 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
      break;
 8004410:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441a:	7dfb      	ldrb	r3, [r7, #23]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIM_ConfigClockSource+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e0b4      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x186>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d03e      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0xd4>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	f200 8087 	bhi.w	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	f000 8086 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x172>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d87f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d01a      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0xa6>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d87b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b60      	cmp	r3, #96	; 0x60
 800449a:	d050      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x11a>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d877      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b50      	cmp	r3, #80	; 0x50
 80044a2:	d03c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xfa>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d873      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d058      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x13a>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d86f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d064      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d86b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d060      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d867      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05c      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d05a      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	e062      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f000 fb5d 	bl	8004b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
      break;
 80044f6:	e04f      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f000 fb46 	bl	8004b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e03c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	461a      	mov	r2, r3
 800452c:	f000 faba 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2150      	movs	r1, #80	; 0x50
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fb13 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 800453c:	e02c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	461a      	mov	r2, r3
 800454c:	f000 fad9 	bl	8004b02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2160      	movs	r1, #96	; 0x60
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fb03 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 800455c:	e01c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	461a      	mov	r2, r3
 800456c:	f000 fa9a 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2140      	movs	r1, #64	; 0x40
 8004576:	4618      	mov	r0, r3
 8004578:	f000 faf3 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 800457c:	e00c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f000 faea 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 800458e:	e003      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e000      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a40      	ldr	r2, [pc, #256]	; (8004718 <TIM_Base_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d00f      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3d      	ldr	r2, [pc, #244]	; (800471c <TIM_Base_SetConfig+0x118>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3c      	ldr	r2, [pc, #240]	; (8004720 <TIM_Base_SetConfig+0x11c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <TIM_Base_SetConfig+0x120>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <TIM_Base_SetConfig+0x124>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <TIM_Base_SetConfig+0x114>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d027      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <TIM_Base_SetConfig+0x118>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d023      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2b      	ldr	r2, [pc, #172]	; (8004720 <TIM_Base_SetConfig+0x11c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <TIM_Base_SetConfig+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a29      	ldr	r2, [pc, #164]	; (8004728 <TIM_Base_SetConfig+0x124>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a28      	ldr	r2, [pc, #160]	; (800472c <TIM_Base_SetConfig+0x128>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <TIM_Base_SetConfig+0x12c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <TIM_Base_SetConfig+0x130>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a25      	ldr	r2, [pc, #148]	; (8004738 <TIM_Base_SetConfig+0x134>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a24      	ldr	r2, [pc, #144]	; (800473c <TIM_Base_SetConfig+0x138>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <TIM_Base_SetConfig+0x13c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <TIM_Base_SetConfig+0x114>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <TIM_Base_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40010400 	.word	0x40010400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	40001800 	.word	0x40001800
 800473c:	40001c00 	.word	0x40001c00
 8004740:	40002000 	.word	0x40002000

08004744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 0302 	bic.w	r3, r3, #2
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a20      	ldr	r2, [pc, #128]	; (800481c <TIM_OC1_SetConfig+0xd8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC1_SetConfig+0x64>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <TIM_OC1_SetConfig+0xdc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10c      	bne.n	80047c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0308 	bic.w	r3, r3, #8
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <TIM_OC1_SetConfig+0xd8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d003      	beq.n	80047d2 <TIM_OC1_SetConfig+0x8e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a14      	ldr	r2, [pc, #80]	; (8004820 <TIM_OC1_SetConfig+0xdc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d111      	bne.n	80047f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40010000 	.word	0x40010000
 8004820:	40010400 	.word	0x40010400

08004824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0210 	bic.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0320 	bic.w	r3, r3, #32
 800486e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a22      	ldr	r2, [pc, #136]	; (8004908 <TIM_OC2_SetConfig+0xe4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC2_SetConfig+0x68>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a21      	ldr	r2, [pc, #132]	; (800490c <TIM_OC2_SetConfig+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d10d      	bne.n	80048a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a17      	ldr	r2, [pc, #92]	; (8004908 <TIM_OC2_SetConfig+0xe4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC2_SetConfig+0x94>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a16      	ldr	r2, [pc, #88]	; (800490c <TIM_OC2_SetConfig+0xe8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d113      	bne.n	80048e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400

08004910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <TIM_OC3_SetConfig+0xe0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC3_SetConfig+0x66>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <TIM_OC3_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10d      	bne.n	8004992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800497c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <TIM_OC3_SetConfig+0xe0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC3_SetConfig+0x92>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a15      	ldr	r2, [pc, #84]	; (80049f4 <TIM_OC3_SetConfig+0xe4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d113      	bne.n	80049ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40010400 	.word	0x40010400

080049f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <TIM_OC4_SetConfig+0xa4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC4_SetConfig+0x68>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <TIM_OC4_SetConfig+0xa8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0201 	bic.w	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 030a 	bic.w	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b087      	sub	sp, #28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	031b      	lsls	r3, r3, #12
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f043 0307 	orr.w	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2201      	movs	r2, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e05a      	b.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d01d      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40001800 	.word	0x40001800

08004d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e03f      	b.n	8004dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc ff9a 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f829 	bl	8004de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b0c0      	sub	sp, #256	; 0x100
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	68d9      	ldr	r1, [r3, #12]
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	ea40 0301 	orr.w	r3, r0, r1
 8004e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e38:	f021 010c 	bic.w	r1, r1, #12
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e46:	430b      	orrs	r3, r1
 8004e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	6999      	ldr	r1, [r3, #24]
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	ea40 0301 	orr.w	r3, r0, r1
 8004e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b8f      	ldr	r3, [pc, #572]	; (80050ac <UART_SetConfig+0x2cc>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d005      	beq.n	8004e80 <UART_SetConfig+0xa0>
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	; (80050b0 <UART_SetConfig+0x2d0>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d104      	bne.n	8004e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fe fe60 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8004e84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e88:	e003      	b.n	8004e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8a:	f7fe fe47 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8004e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9c:	f040 810c 	bne.w	80050b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	1891      	adds	r1, r2, r2
 8004eb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eba:	415b      	adcs	r3, r3
 8004ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	eb12 0801 	adds.w	r8, r2, r1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	eb43 0901 	adc.w	r9, r3, r1
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee2:	4690      	mov	r8, r2
 8004ee4:	4699      	mov	r9, r3
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	eb18 0303 	adds.w	r3, r8, r3
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	eb49 0303 	adc.w	r3, r9, r3
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f0e:	460b      	mov	r3, r1
 8004f10:	18db      	adds	r3, r3, r3
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
 8004f14:	4613      	mov	r3, r2
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f24:	f7fb fc0e 	bl	8000744 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <UART_SetConfig+0x2d4>)
 8004f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	011c      	lsls	r4, r3, #4
 8004f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	1891      	adds	r1, r2, r2
 8004f4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f50:	415b      	adcs	r3, r3
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f58:	4641      	mov	r1, r8
 8004f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f5e:	4649      	mov	r1, r9
 8004f60:	eb43 0b01 	adc.w	fp, r3, r1
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f78:	4692      	mov	sl, r2
 8004f7a:	469b      	mov	fp, r3
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f86:	464b      	mov	r3, r9
 8004f88:	eb4b 0303 	adc.w	r3, fp, r3
 8004f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fba:	f7fb fbc3 	bl	8000744 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <UART_SetConfig+0x2d4>)
 8004fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2264      	movs	r2, #100	; 0x64
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	1acb      	subs	r3, r1, r3
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <UART_SetConfig+0x2d4>)
 8004fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fe8:	441c      	add	r4, r3
 8004fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	1891      	adds	r1, r2, r2
 8005002:	63b9      	str	r1, [r7, #56]	; 0x38
 8005004:	415b      	adcs	r3, r3
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800500c:	4641      	mov	r1, r8
 800500e:	1851      	adds	r1, r2, r1
 8005010:	6339      	str	r1, [r7, #48]	; 0x30
 8005012:	4649      	mov	r1, r9
 8005014:	414b      	adcs	r3, r1
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005024:	4659      	mov	r1, fp
 8005026:	00cb      	lsls	r3, r1, #3
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502e:	4651      	mov	r1, sl
 8005030:	00ca      	lsls	r2, r1, #3
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	4603      	mov	r3, r0
 8005038:	4642      	mov	r2, r8
 800503a:	189b      	adds	r3, r3, r2
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005040:	464b      	mov	r3, r9
 8005042:	460a      	mov	r2, r1
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005058:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800505c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005060:	460b      	mov	r3, r1
 8005062:	18db      	adds	r3, r3, r3
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
 8005066:	4613      	mov	r3, r2
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005076:	f7fb fb65 	bl	8000744 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <UART_SetConfig+0x2d4>)
 8005080:	fba3 1302 	umull	r1, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2164      	movs	r1, #100	; 0x64
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	3332      	adds	r3, #50	; 0x32
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <UART_SetConfig+0x2d4>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 0207 	and.w	r2, r3, #7
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4422      	add	r2, r4
 80050a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050a8:	e105      	b.n	80052b6 <UART_SetConfig+0x4d6>
 80050aa:	bf00      	nop
 80050ac:	40011000 	.word	0x40011000
 80050b0:	40011400 	.word	0x40011400
 80050b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	6239      	str	r1, [r7, #32]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
 80050d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050da:	4641      	mov	r1, r8
 80050dc:	1854      	adds	r4, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb43 0501 	adc.w	r5, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	00eb      	lsls	r3, r5, #3
 80050ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	4614      	mov	r4, r2
 80050f6:	461d      	mov	r5, r3
 80050f8:	4643      	mov	r3, r8
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005100:	464b      	mov	r3, r9
 8005102:	eb45 0303 	adc.w	r3, r5, r3
 8005106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005116:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005126:	4629      	mov	r1, r5
 8005128:	008b      	lsls	r3, r1, #2
 800512a:	4621      	mov	r1, r4
 800512c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005130:	4621      	mov	r1, r4
 8005132:	008a      	lsls	r2, r1, #2
 8005134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005138:	f7fb fb04 	bl	8000744 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b60      	ldr	r3, [pc, #384]	; (80052c4 <UART_SetConfig+0x4e4>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005154:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	61b9      	str	r1, [r7, #24]
 8005164:	415b      	adcs	r3, r3
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800516c:	4641      	mov	r1, r8
 800516e:	1851      	adds	r1, r2, r1
 8005170:	6139      	str	r1, [r7, #16]
 8005172:	4649      	mov	r1, r9
 8005174:	414b      	adcs	r3, r1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005184:	4659      	mov	r1, fp
 8005186:	00cb      	lsls	r3, r1, #3
 8005188:	4651      	mov	r1, sl
 800518a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518e:	4651      	mov	r1, sl
 8005190:	00ca      	lsls	r2, r1, #3
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	4603      	mov	r3, r0
 8005198:	4642      	mov	r2, r8
 800519a:	189b      	adds	r3, r3, r2
 800519c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051a0:	464b      	mov	r3, r9
 80051a2:	460a      	mov	r2, r1
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051c4:	4649      	mov	r1, r9
 80051c6:	008b      	lsls	r3, r1, #2
 80051c8:	4641      	mov	r1, r8
 80051ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ce:	4641      	mov	r1, r8
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051d6:	f7fb fab5 	bl	8000744 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4b39      	ldr	r3, [pc, #228]	; (80052c4 <UART_SetConfig+0x4e4>)
 80051e0:	fba3 1302 	umull	r1, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	2164      	movs	r1, #100	; 0x64
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	3332      	adds	r3, #50	; 0x32
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <UART_SetConfig+0x4e4>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051fe:	441c      	add	r4, r3
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005204:	2200      	movs	r2, #0
 8005206:	673b      	str	r3, [r7, #112]	; 0x70
 8005208:	677a      	str	r2, [r7, #116]	; 0x74
 800520a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	1891      	adds	r1, r2, r2
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	415b      	adcs	r3, r3
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800521e:	4641      	mov	r1, r8
 8005220:	1851      	adds	r1, r2, r1
 8005222:	6039      	str	r1, [r7, #0]
 8005224:	4649      	mov	r1, r9
 8005226:	414b      	adcs	r3, r1
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005236:	4659      	mov	r1, fp
 8005238:	00cb      	lsls	r3, r1, #3
 800523a:	4651      	mov	r1, sl
 800523c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005240:	4651      	mov	r1, sl
 8005242:	00ca      	lsls	r2, r1, #3
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	4603      	mov	r3, r0
 800524a:	4642      	mov	r2, r8
 800524c:	189b      	adds	r3, r3, r2
 800524e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	663b      	str	r3, [r7, #96]	; 0x60
 8005264:	667a      	str	r2, [r7, #100]	; 0x64
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005272:	4649      	mov	r1, r9
 8005274:	008b      	lsls	r3, r1, #2
 8005276:	4641      	mov	r1, r8
 8005278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527c:	4641      	mov	r1, r8
 800527e:	008a      	lsls	r2, r1, #2
 8005280:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005284:	f7fb fa5e 	bl	8000744 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <UART_SetConfig+0x4e4>)
 800528e:	fba3 1302 	umull	r1, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2164      	movs	r1, #100	; 0x64
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	3332      	adds	r3, #50	; 0x32
 80052a0:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <UART_SetConfig+0x4e4>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4422      	add	r2, r4
 80052b4:	609a      	str	r2, [r3, #8]
}
 80052b6:	bf00      	nop
 80052b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052bc:	46bd      	mov	sp, r7
 80052be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c2:	bf00      	nop
 80052c4:	51eb851f 	.word	0x51eb851f

080052c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052da:	2b84      	cmp	r3, #132	; 0x84
 80052dc:	d005      	beq.n	80052ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	3303      	adds	r3, #3
 80052e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052fc:	f000 fade 	bl	80058bc <vTaskStartScheduler>
  
  return osOK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	bd80      	pop	{r7, pc}

08005306 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005308:	b089      	sub	sp, #36	; 0x24
 800530a:	af04      	add	r7, sp, #16
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <osThreadCreate+0x54>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01c      	beq.n	800535a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685c      	ldr	r4, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681d      	ldr	r5, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691e      	ldr	r6, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff ffc8 	bl	80052c8 <makeFreeRtosPriority>
 8005338:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005342:	9202      	str	r2, [sp, #8]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	9100      	str	r1, [sp, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	4632      	mov	r2, r6
 800534c:	4629      	mov	r1, r5
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f8ed 	bl	800552e <xTaskCreateStatic>
 8005354:	4603      	mov	r3, r0
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e01c      	b.n	8005394 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685c      	ldr	r4, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005366:	b29e      	uxth	r6, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff ffaa 	bl	80052c8 <makeFreeRtosPriority>
 8005374:	4602      	mov	r2, r0
 8005376:	f107 030c 	add.w	r3, r7, #12
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	9200      	str	r2, [sp, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	4632      	mov	r2, r6
 8005382:	4629      	mov	r1, r5
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f92f 	bl	80055e8 <xTaskCreate>
 800538a:	4603      	mov	r3, r0
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005394:	68fb      	ldr	r3, [r7, #12]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800539e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <osDelay+0x16>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	e000      	b.n	80053b6 <osDelay+0x18>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa4c 	bl	8005854 <vTaskDelay>
  
  return osOK;
 80053bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f103 0208 	add.w	r2, r3, #8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f103 0208 	add.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f103 0208 	add.w	r2, r3, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800547e:	d103      	bne.n	8005488 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e00c      	b.n	80054a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3308      	adds	r3, #8
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e002      	b.n	8005496 <vListInsert+0x2e>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d2f6      	bcs.n	8005490 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6852      	ldr	r2, [r2, #4]
 80054fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d103      	bne.n	800550e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08e      	sub	sp, #56	; 0x38
 8005532:	af04      	add	r7, sp, #16
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <xTaskCreateStatic+0x46>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61fb      	str	r3, [r7, #28]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005574:	2354      	movs	r3, #84	; 0x54
 8005576:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b54      	cmp	r3, #84	; 0x54
 800557c:	d00a      	beq.n	8005594 <xTaskCreateStatic+0x66>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	61bb      	str	r3, [r7, #24]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01e      	beq.n	80055da <xTaskCreateStatic+0xac>
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01b      	beq.n	80055da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055b4:	2300      	movs	r3, #0
 80055b6:	9303      	str	r3, [sp, #12]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	9302      	str	r3, [sp, #8]
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f850 	bl	8005672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055d4:	f000 f8d4 	bl	8005780 <prvAddNewTaskToReadyList>
 80055d8:	e001      	b.n	80055de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055de:	697b      	ldr	r3, [r7, #20]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	; 0x30
 80055ec:	af04      	add	r7, sp, #16
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fec3 	bl	8006388 <pvPortMalloc>
 8005602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800560a:	2054      	movs	r0, #84	; 0x54
 800560c:	f000 febc 	bl	8006388 <pvPortMalloc>
 8005610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
 800561e:	e005      	b.n	800562c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f000 ff7d 	bl	8006520 <vPortFree>
 8005626:	e001      	b.n	800562c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d017      	beq.n	8005662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	2300      	movs	r3, #0
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f80e 	bl	8005672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005656:	69f8      	ldr	r0, [r7, #28]
 8005658:	f000 f892 	bl	8005780 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800565c:	2301      	movs	r3, #1
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e002      	b.n	8005668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005668:	69bb      	ldr	r3, [r7, #24]
	}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800568a:	3b01      	subs	r3, #1
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	f023 0307 	bic.w	r3, r3, #7
 8005698:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <prvInitialiseNewTask+0x48>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	617b      	str	r3, [r7, #20]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01f      	beq.n	8005700 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e012      	b.n	80056ec <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	7819      	ldrb	r1, [r3, #0]
 80056ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	3334      	adds	r3, #52	; 0x34
 80056d6:	460a      	mov	r2, r1
 80056d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d9e9      	bls.n	80056c6 <prvInitialiseNewTask+0x54>
 80056f2:	e000      	b.n	80056f6 <prvInitialiseNewTask+0x84>
			{
				break;
 80056f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056fe:	e003      	b.n	8005708 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2b06      	cmp	r3, #6
 800570c:	d901      	bls.n	8005712 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800570e:	2306      	movs	r3, #6
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800571c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	2200      	movs	r2, #0
 8005722:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	3304      	adds	r3, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fe6c 	bl	8005406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	3318      	adds	r3, #24
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fe67 	bl	8005406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	f1c3 0207 	rsb	r2, r3, #7
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	69b8      	ldr	r0, [r7, #24]
 8005762:	f000 fc05 	bl	8005f70 <pxPortInitialiseStack>
 8005766:	4602      	mov	r2, r0
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005778:	bf00      	nop
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005788:	f000 fd1c 	bl	80061c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800578c:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <prvAddNewTaskToReadyList+0xb8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	4a29      	ldr	r2, [pc, #164]	; (8005838 <prvAddNewTaskToReadyList+0xb8>)
 8005794:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005796:	4b29      	ldr	r3, [pc, #164]	; (800583c <prvAddNewTaskToReadyList+0xbc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800579e:	4a27      	ldr	r2, [pc, #156]	; (800583c <prvAddNewTaskToReadyList+0xbc>)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <prvAddNewTaskToReadyList+0xb8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d110      	bne.n	80057ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057ac:	f000 fabc 	bl	8005d28 <prvInitialiseTaskLists>
 80057b0:	e00d      	b.n	80057ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <prvAddNewTaskToReadyList+0xc0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <prvAddNewTaskToReadyList+0xbc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d802      	bhi.n	80057ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057c8:	4a1c      	ldr	r2, [pc, #112]	; (800583c <prvAddNewTaskToReadyList+0xbc>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057ce:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <prvAddNewTaskToReadyList+0xc4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <prvAddNewTaskToReadyList+0xc4>)
 80057d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	2201      	movs	r2, #1
 80057de:	409a      	lsls	r2, r3
 80057e0:	4b19      	ldr	r3, [pc, #100]	; (8005848 <prvAddNewTaskToReadyList+0xc8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	4a18      	ldr	r2, [pc, #96]	; (8005848 <prvAddNewTaskToReadyList+0xc8>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <prvAddNewTaskToReadyList+0xcc>)
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f7ff fe0d 	bl	8005420 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005806:	f000 fd0d 	bl	8006224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800580a:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <prvAddNewTaskToReadyList+0xc0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00e      	beq.n	8005830 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <prvAddNewTaskToReadyList+0xbc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	429a      	cmp	r2, r3
 800581e:	d207      	bcs.n	8005830 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <prvAddNewTaskToReadyList+0xd0>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000694 	.word	0x20000694
 800583c:	20000594 	.word	0x20000594
 8005840:	200006a0 	.word	0x200006a0
 8005844:	200006b0 	.word	0x200006b0
 8005848:	2000069c 	.word	0x2000069c
 800584c:	20000598 	.word	0x20000598
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d017      	beq.n	8005896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <vTaskDelay+0x60>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <vTaskDelay+0x30>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	60bb      	str	r3, [r7, #8]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005884:	f000 f87a 	bl	800597c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005888:	2100      	movs	r1, #0
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fb0a 	bl	8005ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005890:	f000 f882 	bl	8005998 <xTaskResumeAll>
 8005894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d107      	bne.n	80058ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <vTaskDelay+0x64>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200006bc 	.word	0x200006bc
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ca:	463a      	mov	r2, r7
 80058cc:	1d39      	adds	r1, r7, #4
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fb f95a 	bl	8000b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	9202      	str	r2, [sp, #8]
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	460a      	mov	r2, r1
 80058ea:	491e      	ldr	r1, [pc, #120]	; (8005964 <vTaskStartScheduler+0xa8>)
 80058ec:	481e      	ldr	r0, [pc, #120]	; (8005968 <vTaskStartScheduler+0xac>)
 80058ee:	f7ff fe1e 	bl	800552e <xTaskCreateStatic>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4a1d      	ldr	r2, [pc, #116]	; (800596c <vTaskStartScheduler+0xb0>)
 80058f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058f8:	4b1c      	ldr	r3, [pc, #112]	; (800596c <vTaskStartScheduler+0xb0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e001      	b.n	800590a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d116      	bne.n	800593e <vTaskStartScheduler+0x82>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005924:	4b12      	ldr	r3, [pc, #72]	; (8005970 <vTaskStartScheduler+0xb4>)
 8005926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800592a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <vTaskStartScheduler+0xb8>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <vTaskStartScheduler+0xbc>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005938:	f000 fba2 	bl	8006080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800593c:	e00e      	b.n	800595c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005944:	d10a      	bne.n	800595c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	60fb      	str	r3, [r7, #12]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskStartScheduler+0x9e>
}
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	08006824 	.word	0x08006824
 8005968:	08005cf9 	.word	0x08005cf9
 800596c:	200006b8 	.word	0x200006b8
 8005970:	200006b4 	.word	0x200006b4
 8005974:	200006a0 	.word	0x200006a0
 8005978:	20000698 	.word	0x20000698

0800597c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <vTaskSuspendAll+0x18>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a03      	ldr	r2, [pc, #12]	; (8005994 <vTaskSuspendAll+0x18>)
 8005988:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	200006bc 	.word	0x200006bc

08005998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059a6:	4b41      	ldr	r3, [pc, #260]	; (8005aac <xTaskResumeAll+0x114>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	603b      	str	r3, [r7, #0]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059c4:	f000 fbfe 	bl	80061c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059c8:	4b38      	ldr	r3, [pc, #224]	; (8005aac <xTaskResumeAll+0x114>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4a37      	ldr	r2, [pc, #220]	; (8005aac <xTaskResumeAll+0x114>)
 80059d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d2:	4b36      	ldr	r3, [pc, #216]	; (8005aac <xTaskResumeAll+0x114>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d161      	bne.n	8005a9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059da:	4b35      	ldr	r3, [pc, #212]	; (8005ab0 <xTaskResumeAll+0x118>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d05d      	beq.n	8005a9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059e2:	e02e      	b.n	8005a42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e4:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <xTaskResumeAll+0x11c>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3318      	adds	r3, #24
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fd72 	bl	80054da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fd6d 	bl	80054da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	2201      	movs	r2, #1
 8005a06:	409a      	lsls	r2, r3
 8005a08:	4b2b      	ldr	r3, [pc, #172]	; (8005ab8 <xTaskResumeAll+0x120>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	; (8005ab8 <xTaskResumeAll+0x120>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a27      	ldr	r2, [pc, #156]	; (8005abc <xTaskResumeAll+0x124>)
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7ff fcf9 	bl	8005420 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <xTaskResumeAll+0x128>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a3c:	4b21      	ldr	r3, [pc, #132]	; (8005ac4 <xTaskResumeAll+0x12c>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <xTaskResumeAll+0x11c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1cc      	bne.n	80059e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a50:	f000 fa08 	bl	8005e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a54:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <xTaskResumeAll+0x130>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d010      	beq.n	8005a82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a60:	f000 f836 	bl	8005ad0 <xTaskIncrementTick>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <xTaskResumeAll+0x12c>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f1      	bne.n	8005a60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a7c:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <xTaskResumeAll+0x130>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <xTaskResumeAll+0x12c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <xTaskResumeAll+0x134>)
 8005a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a9e:	f000 fbc1 	bl	8006224 <vPortExitCritical>

	return xAlreadyYielded;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	200006bc 	.word	0x200006bc
 8005ab0:	20000694 	.word	0x20000694
 8005ab4:	20000654 	.word	0x20000654
 8005ab8:	2000069c 	.word	0x2000069c
 8005abc:	20000598 	.word	0x20000598
 8005ac0:	20000594 	.word	0x20000594
 8005ac4:	200006a8 	.word	0x200006a8
 8005ac8:	200006a4 	.word	0x200006a4
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <xTaskIncrementTick+0x144>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 808e 	bne.w	8005c00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae4:	4b4c      	ldr	r3, [pc, #304]	; (8005c18 <xTaskIncrementTick+0x148>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aec:	4a4a      	ldr	r2, [pc, #296]	; (8005c18 <xTaskIncrementTick+0x148>)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d120      	bne.n	8005b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	603b      	str	r3, [r7, #0]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xTaskIncrementTick+0x46>
 8005b18:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	4b40      	ldr	r3, [pc, #256]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3e      	ldr	r2, [pc, #248]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4a3e      	ldr	r2, [pc, #248]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3301      	adds	r3, #1
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	f000 f995 	bl	8005e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d348      	bcc.n	8005bd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b44:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4e:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b54:	601a      	str	r2, [r3, #0]
					break;
 8005b56:	e03e      	b.n	8005bd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d203      	bcs.n	8005b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b70:	4a2d      	ldr	r2, [pc, #180]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b76:	e02e      	b.n	8005bd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fcac 	bl	80054da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fca3 	bl	80054da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	4a22      	ldr	r2, [pc, #136]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7ff fc2f 	bl	8005420 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3b9      	bcc.n	8005b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd4:	e7b6      	b.n	8005b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bd6:	4b17      	ldr	r3, [pc, #92]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bdc:	4914      	ldr	r1, [pc, #80]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d901      	bls.n	8005bf2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e004      	b.n	8005c0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <xTaskIncrementTick+0x16c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <xTaskIncrementTick+0x16c>)
 8005c08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c0a:	697b      	ldr	r3, [r7, #20]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200006bc 	.word	0x200006bc
 8005c18:	20000698 	.word	0x20000698
 8005c1c:	2000064c 	.word	0x2000064c
 8005c20:	20000650 	.word	0x20000650
 8005c24:	200006ac 	.word	0x200006ac
 8005c28:	200006b4 	.word	0x200006b4
 8005c2c:	2000069c 	.word	0x2000069c
 8005c30:	20000598 	.word	0x20000598
 8005c34:	20000594 	.word	0x20000594
 8005c38:	200006a8 	.word	0x200006a8
 8005c3c:	200006a4 	.word	0x200006a4

08005c40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <vTaskSwitchContext+0xa4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c4e:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <vTaskSwitchContext+0xa8>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c54:	e03f      	b.n	8005cd6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <vTaskSwitchContext+0xa8>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5c:	4b23      	ldr	r3, [pc, #140]	; (8005cec <vTaskSwitchContext+0xac>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	f1c3 031f 	rsb	r3, r3, #31
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	491f      	ldr	r1, [pc, #124]	; (8005cf0 <vTaskSwitchContext+0xb0>)
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	607b      	str	r3, [r7, #4]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <vTaskSwitchContext+0x5a>
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <vTaskSwitchContext+0xb0>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d104      	bne.n	8005ccc <vTaskSwitchContext+0x8c>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <vTaskSwitchContext+0xb4>)
 8005cd4:	6013      	str	r3, [r2, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	200006bc 	.word	0x200006bc
 8005ce8:	200006a8 	.word	0x200006a8
 8005cec:	2000069c 	.word	0x2000069c
 8005cf0:	20000598 	.word	0x20000598
 8005cf4:	20000594 	.word	0x20000594

08005cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d00:	f000 f852 	bl	8005da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d04:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <prvIdleTask+0x28>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d9f9      	bls.n	8005d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <prvIdleTask+0x2c>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d1c:	e7f0      	b.n	8005d00 <prvIdleTask+0x8>
 8005d1e:	bf00      	nop
 8005d20:	20000598 	.word	0x20000598
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	e00c      	b.n	8005d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <prvInitialiseTaskLists+0x60>)
 8005d40:	4413      	add	r3, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fb3f 	bl	80053c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	607b      	str	r3, [r7, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d9ef      	bls.n	8005d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d54:	480d      	ldr	r0, [pc, #52]	; (8005d8c <prvInitialiseTaskLists+0x64>)
 8005d56:	f7ff fb36 	bl	80053c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d5a:	480d      	ldr	r0, [pc, #52]	; (8005d90 <prvInitialiseTaskLists+0x68>)
 8005d5c:	f7ff fb33 	bl	80053c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d60:	480c      	ldr	r0, [pc, #48]	; (8005d94 <prvInitialiseTaskLists+0x6c>)
 8005d62:	f7ff fb30 	bl	80053c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d66:	480c      	ldr	r0, [pc, #48]	; (8005d98 <prvInitialiseTaskLists+0x70>)
 8005d68:	f7ff fb2d 	bl	80053c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d6c:	480b      	ldr	r0, [pc, #44]	; (8005d9c <prvInitialiseTaskLists+0x74>)
 8005d6e:	f7ff fb2a 	bl	80053c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <prvInitialiseTaskLists+0x78>)
 8005d74:	4a05      	ldr	r2, [pc, #20]	; (8005d8c <prvInitialiseTaskLists+0x64>)
 8005d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvInitialiseTaskLists+0x7c>)
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <prvInitialiseTaskLists+0x68>)
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000598 	.word	0x20000598
 8005d8c:	20000624 	.word	0x20000624
 8005d90:	20000638 	.word	0x20000638
 8005d94:	20000654 	.word	0x20000654
 8005d98:	20000668 	.word	0x20000668
 8005d9c:	20000680 	.word	0x20000680
 8005da0:	2000064c 	.word	0x2000064c
 8005da4:	20000650 	.word	0x20000650

08005da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dae:	e019      	b.n	8005de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005db0:	f000 fa08 	bl	80061c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <prvCheckTasksWaitingTermination+0x50>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fb8a 	bl	80054da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <prvCheckTasksWaitingTermination+0x54>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4a0b      	ldr	r2, [pc, #44]	; (8005dfc <prvCheckTasksWaitingTermination+0x54>)
 8005dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <prvCheckTasksWaitingTermination+0x58>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <prvCheckTasksWaitingTermination+0x58>)
 8005dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dda:	f000 fa23 	bl	8006224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f810 	bl	8005e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <prvCheckTasksWaitingTermination+0x58>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e1      	bne.n	8005db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000668 	.word	0x20000668
 8005dfc:	20000694 	.word	0x20000694
 8005e00:	2000067c 	.word	0x2000067c

08005e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fb80 	bl	8006520 <vPortFree>
				vPortFree( pxTCB );
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb7d 	bl	8006520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e26:	e018      	b.n	8005e5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d103      	bne.n	8005e3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb74 	bl	8006520 <vPortFree>
	}
 8005e38:	e00f      	b.n	8005e5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d00a      	beq.n	8005e5a <prvDeleteTCB+0x56>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60fb      	str	r3, [r7, #12]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <prvDeleteTCB+0x54>
	}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <prvResetNextTaskUnblockTime+0x38>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e74:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e7c:	e008      	b.n	8005e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <prvResetNextTaskUnblockTime+0x38>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8005e8e:	6013      	str	r3, [r2, #0]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	2000064c 	.word	0x2000064c
 8005ea0:	200006b4 	.word	0x200006b4

08005ea4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eae:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb4:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fb0d 	bl	80054da <uxListRemove>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ec6:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	2201      	movs	r2, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43da      	mvns	r2, r3
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005edc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee4:	d10a      	bne.n	8005efc <prvAddCurrentTaskToDelayedList+0x58>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	481a      	ldr	r0, [pc, #104]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ef6:	f7ff fa93 	bl	8005420 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005efa:	e026      	b.n	8005f4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f04:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d209      	bcs.n	8005f28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f7ff faa1 	bl	8005468 <vListInsert>
}
 8005f26:	e010      	b.n	8005f4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7ff fa97 	bl	8005468 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d202      	bcs.n	8005f4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f44:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6013      	str	r3, [r2, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000698 	.word	0x20000698
 8005f58:	20000594 	.word	0x20000594
 8005f5c:	2000069c 	.word	0x2000069c
 8005f60:	20000680 	.word	0x20000680
 8005f64:	20000650 	.word	0x20000650
 8005f68:	2000064c 	.word	0x2000064c
 8005f6c:	200006b4 	.word	0x200006b4

08005f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b04      	subs	r3, #4
 8005f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fa0:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <pxPortInitialiseStack+0x64>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b14      	subs	r3, #20
 8005faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f06f 0202 	mvn.w	r2, #2
 8005fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3b20      	subs	r3, #32
 8005fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	08005fd9 	.word	0x08005fd9

08005fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <prvTaskExitError+0x54>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fea:	d00a      	beq.n	8006002 <prvTaskExitError+0x2a>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	60fb      	str	r3, [r7, #12]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <prvTaskExitError+0x28>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
}
 8006014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006016:	bf00      	nop
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0fc      	beq.n	8006018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	2000000c 	.word	0x2000000c

08006030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006058:	4808      	ldr	r0, [pc, #32]	; (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006086:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a46      	ldr	r2, [pc, #280]	; (80061a4 <xPortStartScheduler+0x124>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a6:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <xPortStartScheduler+0x128>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x46>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <xPortStartScheduler+0x12c>)
 80060c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <xPortStartScheduler+0x130>)
 80060ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f4:	e009      	b.n	800610a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <xPortStartScheduler+0x134>)
 80060fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d0ef      	beq.n	80060f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1c3 0307 	rsb	r3, r3, #7
 800611e:	2b04      	cmp	r3, #4
 8006120:	d00a      	beq.n	8006138 <xPortStartScheduler+0xb8>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <xPortStartScheduler+0x134>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <xPortStartScheduler+0x134>)
 8006140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xPortStartScheduler+0x134>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <xPortStartScheduler+0x134>)
 800614c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <xPortStartScheduler+0x138>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <xPortStartScheduler+0x138>)
 800615c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <xPortStartScheduler+0x138>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <xPortStartScheduler+0x138>)
 8006168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800616c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800616e:	f000 f8dd 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <xPortStartScheduler+0x13c>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006178:	f000 f8fc 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <xPortStartScheduler+0x140>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <xPortStartScheduler+0x140>)
 8006182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006188:	f7ff ff66 	bl	8006058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800618c:	f7ff fd58 	bl	8005c40 <vTaskSwitchContext>
	prvTaskExitError();
 8006190:	f7ff ff22 	bl	8005fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000ed00 	.word	0xe000ed00
 80061a4:	410fc271 	.word	0x410fc271
 80061a8:	410fc270 	.word	0x410fc270
 80061ac:	e000e400 	.word	0xe000e400
 80061b0:	200006c0 	.word	0x200006c0
 80061b4:	200006c4 	.word	0x200006c4
 80061b8:	e000ed20 	.word	0xe000ed20
 80061bc:	2000000c 	.word	0x2000000c
 80061c0:	e000ef34 	.word	0xe000ef34

080061c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	607b      	str	r3, [r7, #4]
}
 80061dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <vPortEnterCritical+0x58>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <vPortEnterCritical+0x58>)
 80061e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <vPortEnterCritical+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortEnterCritical+0x5c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <vPortEnterCritical+0x4c>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vPortEnterCritical+0x4a>
	}
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	2000000c 	.word	0x2000000c
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <vPortExitCritical+0x50>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <vPortExitCritical+0x24>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <vPortExitCritical+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <vPortExitCritical+0x50>)
 8006250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <vPortExitCritical+0x42>
 800625a:	2300      	movs	r3, #0
 800625c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c
	...

08006280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f7ff fcc6 	bl	8005c40 <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006302:	f7ff fbe5 	bl	8005ad0 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <SysTick_Handler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	20000000 	.word	0x20000000
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	; 0x28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006394:	f7ff faf2 	bl	800597c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006398:	4b5b      	ldr	r3, [pc, #364]	; (8006508 <pvPortMalloc+0x180>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063a0:	f000 f920 	bl	80065e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063a4:	4b59      	ldr	r3, [pc, #356]	; (800650c <pvPortMalloc+0x184>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 8093 	bne.w	80064d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01d      	beq.n	80063f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063b8:	2208      	movs	r2, #8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d014      	beq.n	80063f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f023 0307 	bic.w	r3, r3, #7
 80063d0:	3308      	adds	r3, #8
 80063d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <pvPortMalloc+0x6c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	617b      	str	r3, [r7, #20]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d06e      	beq.n	80064d8 <pvPortMalloc+0x150>
 80063fa:	4b45      	ldr	r3, [pc, #276]	; (8006510 <pvPortMalloc+0x188>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d869      	bhi.n	80064d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006404:	4b43      	ldr	r3, [pc, #268]	; (8006514 <pvPortMalloc+0x18c>)
 8006406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006408:	4b42      	ldr	r3, [pc, #264]	; (8006514 <pvPortMalloc+0x18c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800640e:	e004      	b.n	800641a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <pvPortMalloc+0xa4>
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f1      	bne.n	8006410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800642c:	4b36      	ldr	r3, [pc, #216]	; (8006508 <pvPortMalloc+0x180>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	429a      	cmp	r2, r3
 8006434:	d050      	beq.n	80064d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2208      	movs	r2, #8
 800643c:	4413      	add	r3, r2
 800643e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	2308      	movs	r3, #8
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	429a      	cmp	r2, r3
 8006456:	d91f      	bls.n	8006498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <pvPortMalloc+0xf8>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	613b      	str	r3, [r7, #16]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006492:	69b8      	ldr	r0, [r7, #24]
 8006494:	f000 f908 	bl	80066a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <pvPortMalloc+0x188>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <pvPortMalloc+0x188>)
 80064a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <pvPortMalloc+0x188>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <pvPortMalloc+0x190>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d203      	bcs.n	80064ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064b2:	4b17      	ldr	r3, [pc, #92]	; (8006510 <pvPortMalloc+0x188>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a18      	ldr	r2, [pc, #96]	; (8006518 <pvPortMalloc+0x190>)
 80064b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <pvPortMalloc+0x184>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <pvPortMalloc+0x194>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a11      	ldr	r2, [pc, #68]	; (800651c <pvPortMalloc+0x194>)
 80064d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064d8:	f7ff fa5e 	bl	8005998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <pvPortMalloc+0x174>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	60fb      	str	r3, [r7, #12]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <pvPortMalloc+0x172>
	return pvReturn;
 80064fc:	69fb      	ldr	r3, [r7, #28]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3728      	adds	r7, #40	; 0x28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200042d0 	.word	0x200042d0
 800650c:	200042e4 	.word	0x200042e4
 8006510:	200042d4 	.word	0x200042d4
 8006514:	200042c8 	.word	0x200042c8
 8006518:	200042d8 	.word	0x200042d8
 800651c:	200042dc 	.word	0x200042dc

08006520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d04d      	beq.n	80065ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006532:	2308      	movs	r3, #8
 8006534:	425b      	negs	r3, r3
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4413      	add	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <vPortFree+0xb8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <vPortFree+0x44>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60fb      	str	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <vPortFree+0x62>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	60bb      	str	r3, [r7, #8]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <vPortFree+0xb8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4013      	ands	r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01e      	beq.n	80065ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d11a      	bne.n	80065ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <vPortFree+0xb8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	401a      	ands	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065a8:	f7ff f9e8 	bl	800597c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <vPortFree+0xbc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4413      	add	r3, r2
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <vPortFree+0xbc>)
 80065b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ba:	6938      	ldr	r0, [r7, #16]
 80065bc:	f000 f874 	bl	80066a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <vPortFree+0xc0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	4a06      	ldr	r2, [pc, #24]	; (80065e0 <vPortFree+0xc0>)
 80065c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065ca:	f7ff f9e5 	bl	8005998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200042e4 	.word	0x200042e4
 80065dc:	200042d4 	.word	0x200042d4
 80065e0:	200042e0 	.word	0x200042e0

080065e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065f0:	4b27      	ldr	r3, [pc, #156]	; (8006690 <prvHeapInit+0xac>)
 80065f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3307      	adds	r3, #7
 8006602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0307 	bic.w	r3, r3, #7
 800660a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <prvHeapInit+0xac>)
 8006614:	4413      	add	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800661c:	4a1d      	ldr	r2, [pc, #116]	; (8006694 <prvHeapInit+0xb0>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006622:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <prvHeapInit+0xb0>)
 8006624:	2200      	movs	r2, #0
 8006626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006630:	2208      	movs	r2, #8
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <prvHeapInit+0xb4>)
 8006644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <prvHeapInit+0xb4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <prvHeapInit+0xb4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <prvHeapInit+0xb4>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4a0a      	ldr	r2, [pc, #40]	; (800669c <prvHeapInit+0xb8>)
 8006672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <prvHeapInit+0xbc>)
 800667a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <prvHeapInit+0xc0>)
 800667e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	200006c8 	.word	0x200006c8
 8006694:	200042c8 	.word	0x200042c8
 8006698:	200042d0 	.word	0x200042d0
 800669c:	200042d8 	.word	0x200042d8
 80066a0:	200042d4 	.word	0x200042d4
 80066a4:	200042e4 	.word	0x200042e4

080066a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066b0:	4b28      	ldr	r3, [pc, #160]	; (8006754 <prvInsertBlockIntoFreeList+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e002      	b.n	80066bc <prvInsertBlockIntoFreeList+0x14>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d8f7      	bhi.n	80066b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4413      	add	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d108      	bne.n	80066ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	441a      	add	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d118      	bne.n	8006730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <prvInsertBlockIntoFreeList+0xb0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d00d      	beq.n	8006726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e008      	b.n	8006738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvInsertBlockIntoFreeList+0xb0>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e003      	b.n	8006738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d002      	beq.n	8006746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	200042c8 	.word	0x200042c8
 8006758:	200042d0 	.word	0x200042d0

0800675c <__libc_init_array>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	4d0d      	ldr	r5, [pc, #52]	; (8006794 <__libc_init_array+0x38>)
 8006760:	4c0d      	ldr	r4, [pc, #52]	; (8006798 <__libc_init_array+0x3c>)
 8006762:	1b64      	subs	r4, r4, r5
 8006764:	10a4      	asrs	r4, r4, #2
 8006766:	2600      	movs	r6, #0
 8006768:	42a6      	cmp	r6, r4
 800676a:	d109      	bne.n	8006780 <__libc_init_array+0x24>
 800676c:	4d0b      	ldr	r5, [pc, #44]	; (800679c <__libc_init_array+0x40>)
 800676e:	4c0c      	ldr	r4, [pc, #48]	; (80067a0 <__libc_init_array+0x44>)
 8006770:	f000 f820 	bl	80067b4 <_init>
 8006774:	1b64      	subs	r4, r4, r5
 8006776:	10a4      	asrs	r4, r4, #2
 8006778:	2600      	movs	r6, #0
 800677a:	42a6      	cmp	r6, r4
 800677c:	d105      	bne.n	800678a <__libc_init_array+0x2e>
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	f855 3b04 	ldr.w	r3, [r5], #4
 8006784:	4798      	blx	r3
 8006786:	3601      	adds	r6, #1
 8006788:	e7ee      	b.n	8006768 <__libc_init_array+0xc>
 800678a:	f855 3b04 	ldr.w	r3, [r5], #4
 800678e:	4798      	blx	r3
 8006790:	3601      	adds	r6, #1
 8006792:	e7f2      	b.n	800677a <__libc_init_array+0x1e>
 8006794:	0800684c 	.word	0x0800684c
 8006798:	0800684c 	.word	0x0800684c
 800679c:	0800684c 	.word	0x0800684c
 80067a0:	08006850 	.word	0x08006850

080067a4 <memset>:
 80067a4:	4402      	add	r2, r0
 80067a6:	4603      	mov	r3, r0
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d100      	bne.n	80067ae <memset+0xa>
 80067ac:	4770      	bx	lr
 80067ae:	f803 1b01 	strb.w	r1, [r3], #1
 80067b2:	e7f9      	b.n	80067a8 <memset+0x4>

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
