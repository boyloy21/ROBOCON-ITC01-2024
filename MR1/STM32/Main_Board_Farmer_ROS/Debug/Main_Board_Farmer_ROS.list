
Main_Board_Farmer_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e08  08008e08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e10  08008e10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e10  08008e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004cd4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ce4  20004ce4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d6ba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004203  00000000  00000000  0003d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00041900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016b8  00000000  00000000  00043178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255dd  00000000  00000000  00044830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d075  00000000  00000000  00069e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6460  00000000  00000000  00086e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d2e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000679c  00000000  00000000  0016d334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d20 	.word	0x08008d20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008d20 	.word	0x08008d20

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <MX_ADC1_Init+0xb8>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <MX_ADC1_Init+0xbc>)
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d72:	f001 fb4f 	bl	8002414 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 fe68 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d80:	230a      	movs	r3, #10
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000d92:	f001 fcb1 	bl	80026f8 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f000 fe58 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000da0:	230b      	movs	r3, #11
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_ADC1_Init+0xb4>)
 8000dae:	f001 fca3 	bl	80026f8 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000db8:	f000 fe4a 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000002c 	.word	0x2000002c
 8000dc8:	40012000 	.word	0x40012000
 8000dcc:	0f000001 	.word	0x0f000001

08000dd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <HAL_ADC_MspInit+0xd8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d156      	bne.n	8000ea0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a25      	ldr	r2, [pc, #148]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_ADC_MspInit+0xdc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <HAL_ADC_MspInit+0xe0>)
 8000e3e:	f003 f9af 	bl	80041a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <HAL_ADC_MspInit+0xe8>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e86:	f002 fe1b 	bl	8003ac0 <HAL_DMA_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e90:	f000 fdde 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e98:	639a      	str	r2, [r3, #56]	; 0x38
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_ADC_MspInit+0xe4>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	20000074 	.word	0x20000074
 8000eb8:	40026410 	.word	0x40026410

08000ebc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000ec4:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <MX_CAN1_Init+0xa4>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000eca:	2206      	movs	r2, #6
 8000ecc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000edc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ee0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ee8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f0e:	4813      	ldr	r0, [pc, #76]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000f10:	f001 fe92 	bl	8002c38 <HAL_CAN_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f1a:	f000 fd99 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x444<<5;
 8000f2a:	f648 0380 	movw	r3, #34944	; 0x8880
 8000f2e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x444<<5;
 8000f30:	f648 0380 	movw	r3, #34944	; 0x8880
 8000f34:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 8000f46:	230e      	movs	r3, #14
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_CAN1_Init+0xa0>)
 8000f50:	f001 ff6e 	bl	8002e30 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200000d4 	.word	0x200000d4
 8000f60:	40006400 	.word	0x40006400

08000f64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_CAN_MspInit+0x94>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d134      	bne.n	8000ff0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_CAN_MspInit+0x98>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <HAL_CAN_MspInit+0x98>)
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_CAN_MspInit+0x98>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_CAN_MspInit+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_CAN_MspInit+0x98>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_CAN_MspInit+0x98>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <HAL_CAN_MspInit+0x9c>)
 8000fdc:	f003 f8e0 	bl	80041a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	2014      	movs	r0, #20
 8000fe6:	f002 fd41 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fea:	2014      	movs	r0, #20
 8000fec:	f002 fd5a 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40006400 	.word	0x40006400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020400 	.word	0x40020400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_DMA_Init+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <MX_DMA_Init+0x3c>)
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_DMA_Init+0x3c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	2038      	movs	r0, #56	; 0x38
 800102c:	f002 fd1e 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001030:	2038      	movs	r0, #56	; 0x38
 8001032:	f002 fd37 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Concept_Task */
  Concept_TaskHandle = osThreadNew(Concept_Init, NULL, &Concept_Task_attributes);
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MX_FREERTOS_Init+0x38>)
 800104a:	2100      	movs	r1, #0
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_FREERTOS_Init+0x3c>)
 800104e:	f005 f929 	bl	80062a4 <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_FREERTOS_Init+0x40>)
 8001056:	6013      	str	r3, [r2, #0]

  /* creation of Store_Task */
  Store_TaskHandle = osThreadNew(Store_Init, NULL, &Store_Task_attributes);
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_FREERTOS_Init+0x44>)
 800105a:	2100      	movs	r1, #0
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <MX_FREERTOS_Init+0x48>)
 800105e:	f005 f921 	bl	80062a4 <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <MX_FREERTOS_Init+0x4c>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of Prepare_Task */
  Prepare_TaskHandle = osThreadNew(Prepare_Init, NULL, &Prepare_Task_attributes);
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <MX_FREERTOS_Init+0x50>)
 800106a:	2100      	movs	r1, #0
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <MX_FREERTOS_Init+0x54>)
 800106e:	f005 f919 	bl	80062a4 <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a09      	ldr	r2, [pc, #36]	; (800109c <MX_FREERTOS_Init+0x58>)
 8001076:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08008d7c 	.word	0x08008d7c
 8001080:	080010a1 	.word	0x080010a1
 8001084:	20000108 	.word	0x20000108
 8001088:	08008da0 	.word	0x08008da0
 800108c:	080011e1 	.word	0x080011e1
 8001090:	2000010c 	.word	0x2000010c
 8001094:	08008dc4 	.word	0x08008dc4
 8001098:	08001225 	.word	0x08001225
 800109c:	20000110 	.word	0x20000110

080010a0 <Concept_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Concept_Init */
void Concept_Init(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Concept_Init */
  /* Infinite loop */
  for(;;)
  {
	  	if (Pick ==1 )
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <Concept_Init+0x120>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d122      	bne.n	80010f6 <Concept_Init+0x56>
	  		  {
	  		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0); //grip
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	4843      	ldr	r0, [pc, #268]	; (80011c4 <Concept_Init+0x124>)
 80010b8:	f003 fa0e 	bl	80044d8 <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c2:	4840      	ldr	r0, [pc, #256]	; (80011c4 <Concept_Init+0x124>)
 80010c4:	f003 fa08 	bl	80044d8 <HAL_GPIO_WritePin>

			 // Slide
			motor_air = -500;
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <Concept_Init+0x128>)
 80010ca:	4a40      	ldr	r2, [pc, #256]	; (80011cc <Concept_Init+0x12c>)
 80010cc:	601a      	str	r2, [r3, #0]
			osDelay(1200);
 80010ce:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80010d2:	f005 f979 	bl	80063c8 <osDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	483c      	ldr	r0, [pc, #240]	; (80011d0 <Concept_Init+0x130>)
 80010de:	f003 f9fb 	bl	80044d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //Push
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	4839      	ldr	r0, [pc, #228]	; (80011d0 <Concept_Init+0x130>)
 80010ea:	f003 f9f5 	bl	80044d8 <HAL_GPIO_WritePin>
			state = 0;
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <Concept_Init+0x134>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e7d8      	b.n	80010a8 <Concept_Init+0x8>
	  		  }
	  		  else if (Pick == 2 && state == 0)
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <Concept_Init+0x120>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d129      	bne.n	8001152 <Concept_Init+0xb2>
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <Concept_Init+0x134>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d125      	bne.n	8001152 <Concept_Init+0xb2>
	  		  {
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1); //grip
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110c:	482d      	ldr	r0, [pc, #180]	; (80011c4 <Concept_Init+0x124>)
 800110e:	f003 f9e3 	bl	80044d8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	482a      	ldr	r0, [pc, #168]	; (80011c4 <Concept_Init+0x124>)
 800111a:	f003 f9dd 	bl	80044d8 <HAL_GPIO_WritePin>
	  			  osDelay(500);
 800111e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001122:	f005 f951 	bl	80063c8 <osDelay>
	  			motor_air = 800;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <Concept_Init+0x128>)
 8001128:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <Concept_Init+0x138>)
 800112a:	601a      	str	r2, [r3, #0]
	  			osDelay(2000);
 800112c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001130:	f005 f94a 	bl	80063c8 <osDelay>
	  			motor_air = -800;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <Concept_Init+0x128>)
 8001136:	4a29      	ldr	r2, [pc, #164]	; (80011dc <Concept_Init+0x13c>)
 8001138:	601a      	str	r2, [r3, #0]
	  			osDelay(650);
 800113a:	f240 208a 	movw	r0, #650	; 0x28a
 800113e:	f005 f943 	bl	80063c8 <osDelay>
	  		    motor_air = 0;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <Concept_Init+0x128>)
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
	  			state =1;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <Concept_Init+0x134>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e035      	b.n	80011be <Concept_Init+0x11e>
	  		  }

	  		  else if (Pick == 3 && state == 1)
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <Concept_Init+0x120>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d10d      	bne.n	8001176 <Concept_Init+0xd6>
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <Concept_Init+0x134>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d109      	bne.n	8001176 <Concept_Init+0xd6>
	  		  {

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0); // releas
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <Concept_Init+0x124>)
 800116a:	f003 f9b5 	bl	80044d8 <HAL_GPIO_WritePin>
	  				state = 2;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <Concept_Init+0x134>)
 8001170:	2202      	movs	r2, #2
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e023      	b.n	80011be <Concept_Init+0x11e>
	  		  }
	  		  else if (Pick == 4 && state == 2)
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <Concept_Init+0x120>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d10d      	bne.n	800119a <Concept_Init+0xfa>
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <Concept_Init+0x134>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d109      	bne.n	800119a <Concept_Init+0xfa>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <Concept_Init+0x130>)
 800118e:	f003 f9a3 	bl	80044d8 <HAL_GPIO_WritePin>
	  			state = 3;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <Concept_Init+0x134>)
 8001194:	2203      	movs	r2, #3
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e011      	b.n	80011be <Concept_Init+0x11e>
	  		  }
	  		  else if (Pick == 5 && state == 3)
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <Concept_Init+0x120>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d182      	bne.n	80010a8 <Concept_Init+0x8>
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <Concept_Init+0x134>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	f47f af7e 	bne.w	80010a8 <Concept_Init+0x8>
	  		  {

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <Concept_Init+0x124>)
 80011b4:	f003 f990 	bl	80044d8 <HAL_GPIO_WritePin>
	  			state = 0;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Concept_Init+0x134>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	  	if (Pick ==1 )
 80011be:	e773      	b.n	80010a8 <Concept_Init+0x8>
 80011c0:	200001d0 	.word	0x200001d0
 80011c4:	40021000 	.word	0x40021000
 80011c8:	20000104 	.word	0x20000104
 80011cc:	c3fa0000 	.word	0xc3fa0000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	200000fc 	.word	0x200000fc
 80011d8:	44480000 	.word	0x44480000
 80011dc:	c4480000 	.word	0xc4480000

080011e0 <Store_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Store_Init */
void Store_Init(void *argument)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Store_Init */
  /* Infinite loop */
  for(;;)
  {
	  if (Store == 1)
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <Store_Init+0x38>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <Store_Init+0x1e>
	  {
//		  osDelay(2000);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <Store_Init+0x3c>)
 80011f8:	f003 f96e 	bl	80044d8 <HAL_GPIO_WritePin>
 80011fc:	e005      	b.n	800120a <Store_Init+0x2a>
//		  osDelay(1000);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <Store_Init+0x3c>)
 8001206:	f003 f967 	bl	80044d8 <HAL_GPIO_WritePin>
//	  else if (Store == 0)
//		{
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
//		  osDelay(500);
//		}
	  k++;
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <Store_Init+0x40>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <Store_Init+0x40>)
 8001212:	6013      	str	r3, [r2, #0]
	  if (Store == 1)
 8001214:	e7e8      	b.n	80011e8 <Store_Init+0x8>
 8001216:	bf00      	nop
 8001218:	200001d4 	.word	0x200001d4
 800121c:	40020400 	.word	0x40020400
 8001220:	20000100 	.word	0x20000100

08001224 <Prepare_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Prepare_Init */
void Prepare_Init(void *argument)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Prepare_Init */
  /* Infinite loop */
  for(;;)
  {
	  if (Prepare == 1)  // Prepare rice
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <Prepare_Init+0x5c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d1fb      	bne.n	800122c <Prepare_Init+0x8>
	  	  		  {
	  	  			motor_air = -500;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <Prepare_Init+0x60>)
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <Prepare_Init+0x64>)
 8001238:	601a      	str	r2, [r3, #0]
	  	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0); //grip
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <Prepare_Init+0x68>)
 8001242:	f003 f949 	bl	80044d8 <HAL_GPIO_WritePin>
	  	  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124c:	480f      	ldr	r0, [pc, #60]	; (800128c <Prepare_Init+0x68>)
 800124e:	f003 f943 	bl	80044d8 <HAL_GPIO_WritePin>
	  	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <Prepare_Init+0x6c>)
 800125a:	f003 f93d 	bl	80044d8 <HAL_GPIO_WritePin>
	  	  			osDelay(1500);
 800125e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001262:	f005 f8b1 	bl	80063c8 <osDelay>
	  	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1); //grip
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <Prepare_Init+0x68>)
 800126e:	f003 f933 	bl	80044d8 <HAL_GPIO_WritePin>
	  	  		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <Prepare_Init+0x68>)
 800127a:	f003 f92d 	bl	80044d8 <HAL_GPIO_WritePin>
	  if (Prepare == 1)  // Prepare rice
 800127e:	e7d5      	b.n	800122c <Prepare_Init+0x8>
 8001280:	200001d5 	.word	0x200001d5
 8001284:	20000104 	.word	0x20000104
 8001288:	c3fa0000 	.word	0xc3fa0000
 800128c:	40021000 	.word	0x40021000
 8001290:	40020400 	.word	0x40020400

08001294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a42      	ldr	r2, [pc, #264]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <MX_GPIO_Init+0x160>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <MX_GPIO_Init+0x160>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_GPIO_Init+0x160>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_GPIO_Init+0x160>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001358:	4827      	ldr	r0, [pc, #156]	; (80013f8 <MX_GPIO_Init+0x164>)
 800135a:	f003 f8bd 	bl	80044d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|Store_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 8001364:	4825      	ldr	r0, [pc, #148]	; (80013fc <MX_GPIO_Init+0x168>)
 8001366:	f003 f8b7 	bl	80044d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Slide_GPIO_Port, Slide_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	4823      	ldr	r0, [pc, #140]	; (8001400 <MX_GPIO_Init+0x16c>)
 8001372:	f003 f8b1 	bl	80044d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001376:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	481a      	ldr	r0, [pc, #104]	; (80013f8 <MX_GPIO_Init+0x164>)
 8001390:	f002 ff06 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|Store_Pin;
 8001394:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <MX_GPIO_Init+0x168>)
 80013ae:	f002 fef7 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Slide_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Slide_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_GPIO_Init+0x16c>)
 80013cc:	f002 fee8 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Push_Pin;
 80013d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Push_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_GPIO_Init+0x16c>)
 80013e6:	f002 fedb 	bl	80041a0 <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3730      	adds	r7, #48	; 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020000 	.word	0x40020000

08001404 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_I2C1_Init+0x50>)
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <MX_I2C1_Init+0x54>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_I2C1_Init+0x50>)
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_I2C1_Init+0x58>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_I2C1_Init+0x50>)
 8001422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_I2C1_Init+0x50>)
 8001442:	f003 f863 	bl	800450c <HAL_I2C_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800144c:	f000 fb00 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000114 	.word	0x20000114
 8001458:	40005400 	.word	0x40005400
 800145c:	00061a80 	.word	0x00061a80

08001460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149e:	23c0      	movs	r3, #192	; 0xc0
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ae:	2304      	movs	r3, #4
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_I2C_MspInit+0x8c>)
 80014ba:	f002 fe71 	bl	80041a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <map>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80014fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80014fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8001502:	edc7 1a02 	vstr	s3, [r7, #8]
 8001506:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 800150a:	ed97 7a05 	vldr	s14, [r7, #20]
 800150e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001516:	edd7 6a01 	vldr	s13, [r7, #4]
 800151a:	edd7 7a02 	vldr	s15, [r7, #8]
 800151e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001522:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001526:	ed97 7a03 	vldr	s14, [r7, #12]
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001536:	edd7 7a02 	vldr	s15, [r7, #8]
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_CAN_RxFifo0MsgPendingCallback>:
	enc->counter = enc->new_counter;
	enc->counter_status = (count_change >=0);
	enc->speed = (float)count_change*1000.0f/(CPR_X * sampling_time);
	enc->rdps = (float)count_change*2*PI*1000.0f/(CPR_X * sampling_time);
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001558:	2100      	movs	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f001 fe67 	bl	800322e <HAL_CAN_GetRxMessage>
	cntt++;
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800156a:	701a      	strb	r2, [r3, #0]


		if (RxHeader.StdId == 0x444)
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f240 4244 	movw	r2, #1092	; 0x444
 8001574:	4293      	cmp	r3, r2
 8001576:	d131      	bne.n	80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			{

				Pick= RxData[0];
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800157e:	701a      	strb	r2, [r3, #0]
				Store = RxData[1]; // count 0 to 1 (0 open and 1 close)
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001582:	785a      	ldrb	r2, [r3, #1]
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001586:	701a      	strb	r2, [r3, #0]
				RxData1 = (RxData[2] << 8) | RxData[3];
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001590:	78d2      	ldrb	r2, [r2, #3]
 8001592:	4313      	orrs	r3, r2
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
				Shooter_Speed = map(RxData1, 0, 65535, 0, 1000); // count (0 to 3)
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8001610 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>
 80015ac:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 80015b0:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001618 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
 80015b4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f7ff ff98 	bl	80014f0 <map>
 80015c0:	eef0 7a40 	vmov.f32	s15, s0
 80015c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c8:	ee17 3a90 	vmov	r3, s15
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80015d0:	801a      	strh	r2, [r3, #0]
				Prepare = RxData[4];
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80015d4:	791a      	ldrb	r2, [r3, #4]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80015d8:	701a      	strb	r2, [r3, #0]
		{
			flag =1;
		}


}
 80015da:	e008      	b.n	80015ee <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		else if (RxHeader.StdId == 0x111)
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f240 1211 	movw	r2, #273	; 0x111
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			flag =1;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000019c 	.word	0x2000019c
 80015fc:	20000168 	.word	0x20000168
 8001600:	200001b8 	.word	0x200001b8
 8001604:	200001d0 	.word	0x200001d0
 8001608:	200001d4 	.word	0x200001d4
 800160c:	200001b4 	.word	0x200001b4
 8001610:	447a0000 	.word	0x447a0000
 8001614:	00000000 	.word	0x00000000
 8001618:	477fff00 	.word	0x477fff00
 800161c:	200001d2 	.word	0x200001d2
 8001620:	200001d5 	.word	0x200001d5
 8001624:	200001b0 	.word	0x200001b0

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f000 feb0 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f85a 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f7ff fe2e 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 8001638:	f7ff fce4 	bl	8001004 <MX_DMA_Init>
  MX_ADC1_Init();
 800163c:	f7ff fb68 	bl	8000d10 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001640:	f7ff fc3c 	bl	8000ebc <MX_CAN1_Init>
  MX_I2C1_Init();
 8001644:	f7ff fede 	bl	8001404 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001648:	f000 fbe6 	bl	8001e18 <MX_TIM3_Init>
  MX_TIM5_Init();
 800164c:	f000 fcc2 	bl	8001fd4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001650:	f000 fb06 	bl	8001c60 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001654:	f000 fc5a 	bl	8001f0c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001658:	f000 fb92 	bl	8001d80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //*** CAN CONFIGURE ***//
	HAL_CAN_Start(&hcan1);
 800165c:	481c      	ldr	r0, [pc, #112]	; (80016d0 <main+0xa8>)
 800165e:	f001 fcc7 	bl	8002ff0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001662:	2102      	movs	r1, #2
 8001664:	481a      	ldr	r0, [pc, #104]	; (80016d0 <main+0xa8>)
 8001666:	f001 fef4 	bl	8003452 <HAL_CAN_ActivateNotification>
	TxHeader.DLC = 8; // data length
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <main+0xac>)
 800166c:	2208      	movs	r2, #8
 800166e:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <main+0xac>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <main+0xac>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x333; //Id 0x7FF
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <main+0xac>)
 800167e:	f240 3233 	movw	r2, #819	; 0x333
 8001682:	601a      	str	r2, [r3, #0]

	// TIMER Internal clock
	HAL_TIM_Base_Start_IT(&htim2);
 8001684:	4814      	ldr	r0, [pc, #80]	; (80016d8 <main+0xb0>)
 8001686:	f003 fd4b 	bl	8005120 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800168a:	4814      	ldr	r0, [pc, #80]	; (80016dc <main+0xb4>)
 800168c:	f003 fd48 	bl	8005120 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001690:	2100      	movs	r1, #0
 8001692:	4813      	ldr	r0, [pc, #76]	; (80016e0 <main+0xb8>)
 8001694:	f003 fe04 	bl	80052a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001698:	2104      	movs	r1, #4
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <main+0xb8>)
 800169c:	f003 fe00 	bl	80052a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Motor shooter
 80016a0:	2100      	movs	r1, #0
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <main+0xbc>)
 80016a4:	f003 fdfc 	bl	80052a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016a8:	2104      	movs	r1, #4
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <main+0xbc>)
 80016ac:	f003 fdf8 	bl	80052a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor shooter
 80016b0:	2108      	movs	r1, #8
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <main+0xbc>)
 80016b4:	f003 fdf4 	bl	80052a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor Store
 80016b8:	210c      	movs	r1, #12
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <main+0xbc>)
 80016bc:	f003 fdf0 	bl	80052a0 <HAL_TIM_PWM_Start>
//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016c0:	f004 fda6 	bl	8006210 <osKernelInitialize>
  MX_FREERTOS_Init();
 80016c4:	f7ff fcbe 	bl	8001044 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016c8:	f004 fdc6 	bl	8006258 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <main+0xa4>
 80016ce:	bf00      	nop
 80016d0:	200000d4 	.word	0x200000d4
 80016d4:	20000184 	.word	0x20000184
 80016d8:	20000270 	.word	0x20000270
 80016dc:	20000348 	.word	0x20000348
 80016e0:	20000228 	.word	0x20000228
 80016e4:	200002b8 	.word	0x200002b8

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	; 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2230      	movs	r2, #48	; 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fb0a 	bl	8008d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <SystemClock_Config+0xcc>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <SystemClock_Config+0xcc>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <SystemClock_Config+0xcc>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <SystemClock_Config+0xd0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <SystemClock_Config+0xd0>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <SystemClock_Config+0xd0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001744:	2302      	movs	r3, #2
 8001746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001748:	2301      	movs	r3, #1
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800174c:	2310      	movs	r3, #16
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001750:	2302      	movs	r3, #2
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001754:	2300      	movs	r3, #0
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001758:	2308      	movs	r3, #8
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800175c:	23a8      	movs	r3, #168	; 0xa8
 800175e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001760:	2302      	movs	r3, #2
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001764:	2304      	movs	r3, #4
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f811 	bl	8004794 <HAL_RCC_OscConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001778:	f000 f96a 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177c:	230f      	movs	r3, #15
 800177e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001780:	2302      	movs	r3, #2
 8001782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2105      	movs	r1, #5
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fa72 	bl	8004c84 <HAL_RCC_ClockConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017a6:	f000 f953 	bl	8001a50 <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	; 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000
 80017bc:	00000000 	.word	0x00000000

080017c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a88      	ldr	r2, [pc, #544]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	f040 80a9 	bne.w	8001926 <HAL_TIM_PeriodElapsedCallback+0x166>

		if (motor_air > 10) {
 80017d4:	4b87      	ldr	r3, [pc, #540]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	dd0c      	ble.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x42>
			TIM1->CCR1 = motor_air;
 80017e8:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f4:	ee17 2a90 	vmov	r2, s15
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80017fa:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001800:	e01e      	b.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x80>
		} else if (motor_air < -10) {
 8001802:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d50e      	bpl.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x74>
			TIM1->CCR1 = 0;
 8001816:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001818:	2200      	movs	r2, #0
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = -1 * motor_air;
 800181c:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eef1 7a67 	vneg.f32	s15, s15
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182c:	ee17 2a90 	vmov	r2, s15
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
 8001832:	e005      	b.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x80>
		} else {
			TIM1->CCR1 = 0;
 8001834:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 800183a:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800183c:	2200      	movs	r2, #0
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if (Shooter_Speed>100)
 8001840:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d90e      	bls.n	8001866 <HAL_TIM_PeriodElapsedCallback+0xa6>
		{
			TIM3->CCR3 = Shooter_Speed;
 8001848:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800184a:	881a      	ldrh	r2, [r3, #0]
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = 0;
 8001850:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001852:	2200      	movs	r2, #0
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
			TIM3->CCR1 = 0;
 8001856:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 600;
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800185e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001862:	639a      	str	r2, [r3, #56]	; 0x38
 8001864:	e00b      	b.n	800187e <HAL_TIM_PeriodElapsedCallback+0xbe>
		}
		else
		{
			TIM3->CCR1 = 0;
 8001866:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
		    TIM3->CCR2 = 0;
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = 0;
 8001878:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
//		// yaw (z-axis rotation)
//		siny_cosp = 2 * (Q.w * Q.z + Q.x * Q.y);
//		cosy_cosp = 1 - 2 * (Q.y * Q.y + Q.z * Q.z);
//		Angle.Yaw = atan2(siny_cosp, cosy_cosp);
//		theta = Angle.Yaw;
		HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 800187e:	2202      	movs	r2, #2
 8001880:	4960      	ldr	r1, [pc, #384]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001882:	4861      	ldr	r0, [pc, #388]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001884:	f000 fe0a 	bl	800249c <HAL_ADC_Start_DMA>
		LaserX = ((AD_RES[0] *0.01416) + 0.1963)/10; //aready
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdf1 	bl	8000474 <__aeabi_i2d>
 8001892:	a34f      	add	r3, pc, #316	; (adr r3, 80019d0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	a34c      	add	r3, pc, #304	; (adr r3, 80019d8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fc97 	bl	80001dc <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018bc:	f7fe ff6e 	bl	800079c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f850 	bl	800096c <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a50      	ldr	r2, [pc, #320]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80018d0:	6013      	str	r3, [r2, #0]
		LaserY = ((AD_RES[1] *0.01289) + 0.3364)/10;
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018d4:	885b      	ldrh	r3, [r3, #2]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fdcc 	bl	8000474 <__aeabi_i2d>
 80018dc:	a340      	add	r3, pc, #256	; (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	a33e      	add	r3, pc, #248	; (adr r3, 80019e8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fc72 	bl	80001dc <__adddf3>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001906:	f7fe ff49 	bl	800079c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f82b 	bl	800096c <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a3e      	ldr	r2, [pc, #248]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800191a:	6013      	str	r3, [r2, #0]
		j++;
 800191c:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a3d      	ldr	r2, [pc, #244]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001924:	6013      	str	r3, [r2, #0]
	}
	if (htim->Instance == TIM2) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192e:	d141      	bne.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
		imu = map(theta, -3.14159, 3.14159, 0, 65535);
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ed9f 2a3a 	vldr	s4, [pc, #232]	; 8001a20 <HAL_TIM_PeriodElapsedCallback+0x260>
 800193a:	eddf 1a3a 	vldr	s3, [pc, #232]	; 8001a24 <HAL_TIM_PeriodElapsedCallback+0x264>
 800193e:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x268>
 8001942:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8001a2c <HAL_TIM_PeriodElapsedCallback+0x26c>
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	f7ff fdd1 	bl	80014f0 <map>
 800194e:	eef0 7a40 	vmov.f32	s15, s0
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 3a90 	vmov	r3, s15
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800195e:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((AD_RES[0] & 0xFF00) >> 8);
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29b      	uxth	r3, r3
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800196c:	701a      	strb	r2, [r3, #0]
		TxData[1] = (AD_RES[0] & 0x00FF);
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001976:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((AD_RES[1] & 0xFF00) >> 8);
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800197a:	885b      	ldrh	r3, [r3, #2]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	b29b      	uxth	r3, r3
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001984:	709a      	strb	r2, [r3, #2]
		TxData[3] = (AD_RES[1] & 0x00FF);
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001988:	885b      	ldrh	r3, [r3, #2]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800198e:	70da      	strb	r2, [r3, #3]
//		TxData[4] = ((imu & 0xFF00) >> 8);
//		TxData[5] = (imu & 0x00FF);
		if (flag==1)
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x1ea>
		{
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800199c:	4928      	ldr	r1, [pc, #160]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800199e:	4829      	ldr	r0, [pc, #164]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019a0:	f001 fb6a 	bl	8003078 <HAL_CAN_AddTxMessage>
		flag = 0;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
		}
		c++;
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019b2:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x202>
    HAL_IncTick();
 80019be:	f000 fd09 	bl	80023d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	074a771d 	.word	0x074a771d
 80019d4:	3f8cffeb 	.word	0x3f8cffeb
 80019d8:	c01a36e3 	.word	0xc01a36e3
 80019dc:	3fc9205b 	.word	0x3fc9205b
 80019e0:	839042d9 	.word	0x839042d9
 80019e4:	3f8a6612 	.word	0x3f8a6612
 80019e8:	dd97f62b 	.word	0xdd97f62b
 80019ec:	3fd58793 	.word	0x3fd58793
 80019f0:	40000c00 	.word	0x40000c00
 80019f4:	20000104 	.word	0x20000104
 80019f8:	40010000 	.word	0x40010000
 80019fc:	200001d2 	.word	0x200001d2
 8001a00:	40000400 	.word	0x40000400
 8001a04:	200001bc 	.word	0x200001bc
 8001a08:	2000002c 	.word	0x2000002c
 8001a0c:	40240000 	.word	0x40240000
 8001a10:	200001c8 	.word	0x200001c8
 8001a14:	200001cc 	.word	0x200001cc
 8001a18:	200001dc 	.word	0x200001dc
 8001a1c:	200001c4 	.word	0x200001c4
 8001a20:	477fff00 	.word	0x477fff00
 8001a24:	00000000 	.word	0x00000000
 8001a28:	40490fd0 	.word	0x40490fd0
 8001a2c:	c0490fd0 	.word	0xc0490fd0
 8001a30:	200001c0 	.word	0x200001c0
 8001a34:	200001a4 	.word	0x200001a4
 8001a38:	200001b0 	.word	0x200001b0
 8001a3c:	200001ac 	.word	0x200001ac
 8001a40:	20000184 	.word	0x20000184
 8001a44:	200000d4 	.word	0x200000d4
 8001a48:	200001d8 	.word	0x200001d8
 8001a4c:	40001000 	.word	0x40001000

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_MspInit+0x54>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_MspInit+0x54>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x54>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_MspInit+0x54>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_MspInit+0x54>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_MspInit+0x54>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	f06f 0001 	mvn.w	r0, #1
 8001aa2:	f001 ffe3 	bl	8003a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <HAL_InitTick+0xe4>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_InitTick+0xe4>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_InitTick+0xe4>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae0:	f107 0210 	add.w	r2, r7, #16
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fa96 	bl	800501c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001afa:	f003 fa7b 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8001afe:	6378      	str	r0, [r7, #52]	; 0x34
 8001b00:	e004      	b.n	8001b0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b02:	f003 fa77 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8001b06:	4603      	mov	r3, r0
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <HAL_InitTick+0xe8>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	3b01      	subs	r3, #1
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_InitTick+0xf0>)
 8001b1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b42:	f003 fa9d 	bl	8005080 <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11b      	bne.n	8001b8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b54:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <HAL_InitTick+0xec>)
 8001b56:	f003 fae3 	bl	8005120 <HAL_TIM_Base_Start_IT>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d111      	bne.n	8001b8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b68:	2036      	movs	r0, #54	; 0x36
 8001b6a:	f001 ff9b 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d808      	bhi.n	8001b86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	2036      	movs	r0, #54	; 0x36
 8001b7a:	f001 ff77 	bl	8003a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_InitTick+0xf4>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e002      	b.n	8001b8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3738      	adds	r7, #56	; 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	200001e0 	.word	0x200001e0
 8001ba4:	40001000 	.word	0x40001000
 8001ba8:	20000004 	.word	0x20000004

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <CAN1_RX0_IRQHandler+0x10>)
 8001bde:	f001 fc5e 	bl	800349e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200000d4 	.word	0x200000d4

08001bec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM2_IRQHandler+0x10>)
 8001bf2:	f003 fc1d 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000270 	.word	0x20000270

08001c00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM5_IRQHandler+0x10>)
 8001c06:	f003 fc13 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000348 	.word	0x20000348

08001c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM6_DAC_IRQHandler+0x10>)
 8001c1a:	f003 fc09 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200001e0 	.word	0x200001e0

08001c28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA2_Stream0_IRQHandler+0x10>)
 8001c2e:	f002 f84d 	bl	8003ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000074 	.word	0x20000074

08001c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <SystemInit+0x20>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <SystemInit+0x20>)
 8001c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b092      	sub	sp, #72	; 0x48
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
 8001c82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2220      	movs	r2, #32
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f007 f840 	bl	8008d10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001c92:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <MX_TIM1_Init+0x11c>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001c98:	2205      	movs	r2, #5
 8001c9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cbc:	482e      	ldr	r0, [pc, #184]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001cbe:	f003 fa9f 	bl	8005200 <HAL_TIM_PWM_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001cc8:	f7ff fec2 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4827      	ldr	r0, [pc, #156]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001cdc:	f004 f972 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ce6:	f7ff feb3 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	2360      	movs	r3, #96	; 0x60
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481a      	ldr	r0, [pc, #104]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001d10:	f003 fc96 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001d1a:	f7ff fe99 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	2204      	movs	r2, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4814      	ldr	r0, [pc, #80]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001d28:	f003 fc8a 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d32:	f7ff fe8d 	bl	8001a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001d5a:	f004 f9af 	bl	80060bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001d64:	f7ff fe74 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <MX_TIM1_Init+0x118>)
 8001d6a:	f000 fa5b 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001d6e:	bf00      	nop
 8001d70:	3748      	adds	r7, #72	; 0x48
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000228 	.word	0x20000228
 8001d7c:	40010000 	.word	0x40010000

08001d80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001da6:	2253      	movs	r2, #83	; 0x53
 8001da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001db2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001dc6:	f003 f95b 	bl	8005080 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dd0:	f7ff fe3e 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001de2:	f003 fcef 	bl	80057c4 <HAL_TIM_ConfigClockSource>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001dec:	f7ff fe30 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_TIM2_Init+0x94>)
 8001dfe:	f004 f8e1 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e08:	f7ff fe22 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000270 	.word	0x20000270

08001e18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e3c:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <MX_TIM3_Init+0xf0>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e42:	2207      	movs	r2, #7
 8001e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e60:	4828      	ldr	r0, [pc, #160]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e62:	f003 f9cd 	bl	8005200 <HAL_TIM_PWM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001e6c:	f7ff fdf0 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e78:	f107 0320 	add.w	r3, r7, #32
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4821      	ldr	r0, [pc, #132]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001e80:	f004 f8a0 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e8a:	f7ff fde1 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8e:	2360      	movs	r3, #96	; 0x60
 8001e90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4817      	ldr	r0, [pc, #92]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001ea6:	f003 fbcb 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001eb0:	f7ff fdce 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4812      	ldr	r0, [pc, #72]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001ebc:	f003 fbc0 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ec6:	f7ff fdc3 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001ed2:	f003 fbb5 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001edc:	f7ff fdb8 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4807      	ldr	r0, [pc, #28]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001ee8:	f003 fbaa 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001ef2:	f7ff fdad 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ef6:	4803      	ldr	r0, [pc, #12]	; (8001f04 <MX_TIM3_Init+0xec>)
 8001ef8:	f000 f994 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200002b8 	.word	0x200002b8
 8001f08:	40000400 	.word	0x40000400

08001f0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	615a      	str	r2, [r3, #20]
 8001f2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <MX_TIM4_Init+0xc4>)
 8001f32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f36:	2208      	movs	r2, #8
 8001f38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f54:	481d      	ldr	r0, [pc, #116]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f56:	f003 f953 	bl	8005200 <HAL_TIM_PWM_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001f60:	f7ff fd76 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	4619      	mov	r1, r3
 8001f72:	4816      	ldr	r0, [pc, #88]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f74:	f004 f826 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f7e:	f7ff fd67 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f82:	2360      	movs	r3, #96	; 0x60
 8001f84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001f9a:	f003 fb51 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001fa4:	f7ff fd54 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2204      	movs	r2, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001fb0:	f003 fb46 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001fba:	f7ff fd49 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM4_Init+0xc0>)
 8001fc0:	f000 f930 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000300 	.word	0x20000300
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM5_Init+0x94>)
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <MX_TIM5_Init+0x98>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_TIM5_Init+0x94>)
 8001ff8:	2253      	movs	r2, #83	; 0x53
 8001ffa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM5_Init+0x94>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM5_Init+0x94>)
 8002004:	f242 720f 	movw	r2, #9999	; 0x270f
 8002008:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_TIM5_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_TIM5_Init+0x94>)
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <MX_TIM5_Init+0x94>)
 8002018:	f003 f832 	bl	8005080 <HAL_TIM_Base_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002022:	f7ff fd15 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_TIM5_Init+0x94>)
 8002034:	f003 fbc6 	bl	80057c4 <HAL_TIM_ConfigClockSource>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800203e:	f7ff fd07 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800204a:	463b      	mov	r3, r7
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <MX_TIM5_Init+0x94>)
 8002050:	f003 ffb8 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800205a:	f7ff fcf9 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000348 	.word	0x20000348
 800206c:	40000c00 	.word	0x40000c00

08002070 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800209e:	e026      	b.n	80020ee <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_TIM_PWM_MspInit+0x94>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
}
 80020c6:	e012      	b.n	80020ee <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_TIM_PWM_MspInit+0x98>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10d      	bne.n	80020ee <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40023800 	.word	0x40023800
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800

0800210c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212c:	d153      	bne.n	80021d6 <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a37      	ldr	r2, [pc, #220]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a30      	ldr	r2, [pc, #192]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a29      	ldr	r2, [pc, #164]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	481e      	ldr	r0, [pc, #120]	; (8002218 <HAL_TIM_Base_MspInit+0x10c>)
 80021a0:	f001 fffe 	bl	80041a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021a4:	2308      	movs	r3, #8
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4817      	ldr	r0, [pc, #92]	; (800221c <HAL_TIM_Base_MspInit+0x110>)
 80021c0:	f001 ffee 	bl	80041a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2105      	movs	r1, #5
 80021c8:	201c      	movs	r0, #28
 80021ca:	f001 fc4f 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ce:	201c      	movs	r0, #28
 80021d0:	f001 fc68 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021d4:	e01a      	b.n	800220c <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM5)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a11      	ldr	r2, [pc, #68]	; (8002220 <HAL_TIM_Base_MspInit+0x114>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d115      	bne.n	800220c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_TIM_Base_MspInit+0x108>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2032      	movs	r0, #50	; 0x32
 8002202:	f001 fc33 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002206:	2032      	movs	r0, #50	; 0x32
 8002208:	f001 fc4c 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 800220c:	bf00      	nop
 800220e:	3730      	adds	r7, #48	; 0x30
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40000c00 	.word	0x40000c00

08002224 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_TIM_MspPostInit+0xfc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d11f      	bne.n	8002286 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a35      	ldr	r2, [pc, #212]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002262:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	482a      	ldr	r0, [pc, #168]	; (8002328 <HAL_TIM_MspPostInit+0x104>)
 8002280:	f001 ff8e 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002284:	e047      	b.n	8002316 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a28      	ldr	r2, [pc, #160]	; (800232c <HAL_TIM_MspPostInit+0x108>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11e      	bne.n	80022ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80022ac:	2333      	movs	r3, #51	; 0x33
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022bc:	2302      	movs	r3, #2
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	481a      	ldr	r0, [pc, #104]	; (8002330 <HAL_TIM_MspPostInit+0x10c>)
 80022c8:	f001 ff6a 	bl	80041a0 <HAL_GPIO_Init>
}
 80022cc:	e023      	b.n	8002316 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIM_MspPostInit+0x110>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d11e      	bne.n	8002316 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a10      	ldr	r2, [pc, #64]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 80022e2:	f043 0308 	orr.w	r3, r3, #8
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_TIM_MspPostInit+0x100>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002306:	2302      	movs	r3, #2
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <HAL_TIM_MspPostInit+0x114>)
 8002312:	f001 ff45 	bl	80041a0 <HAL_GPIO_Init>
}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	; 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000
 800232c:	40000400 	.word	0x40000400
 8002330:	40020400 	.word	0x40020400
 8002334:	40000800 	.word	0x40000800
 8002338:	40020c00 	.word	0x40020c00

0800233c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800233c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002342:	490e      	ldr	r1, [pc, #56]	; (800237c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002358:	4c0b      	ldr	r4, [pc, #44]	; (8002388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002366:	f7ff fc69 	bl	8001c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800236a:	f006 fc9f 	bl	8008cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236e:	f7ff f95b 	bl	8001628 <main>
  bx  lr    
 8002372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002380:	08008e18 	.word	0x08008e18
  ldr r2, =_sbss
 8002384:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002388:	20004ce4 	.word	0x20004ce4

0800238c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <HAL_Init+0x40>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_Init+0x40>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <HAL_Init+0x40>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f001 fb4c 	bl	8003a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023be:	200f      	movs	r0, #15
 80023c0:	f7ff fb78 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff fb4a 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x20>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x24>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_IncTick+0x24>)
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000390 	.word	0x20000390

080023fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_GetTick+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000390 	.word	0x20000390

08002414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e033      	b.n	8002492 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe fccc 	bl	8000dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d118      	bne.n	8002484 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800245a:	f023 0302 	bic.w	r3, r3, #2
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa68 	bl	800293c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
 8002482:	e001      	b.n	8002488 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Start_DMA+0x1e>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e0e9      	b.n	800268e <HAL_ADC_Start_DMA+0x1f2>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d018      	beq.n	8002502 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e0:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_ADC_Start_DMA+0x1fc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6d      	ldr	r2, [pc, #436]	; (800269c <HAL_ADC_Start_DMA+0x200>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9a      	lsrs	r2, r3, #18
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002510:	d107      	bne.n	8002522 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002520:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 80a1 	bne.w	8002674 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800255c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002570:	d106      	bne.n	8002580 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f023 0206 	bic.w	r2, r3, #6
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
 800257e:	e002      	b.n	8002586 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_ADC_Start_DMA+0x204>)
 8002590:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <HAL_ADC_Start_DMA+0x208>)
 8002598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_ADC_Start_DMA+0x20c>)
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4a41      	ldr	r2, [pc, #260]	; (80026ac <HAL_ADC_Start_DMA+0x210>)
 80025a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	334c      	adds	r3, #76	; 0x4c
 80025de:	4619      	mov	r1, r3
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f001 fb1a 	bl	8003c1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d12a      	bne.n	800264a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <HAL_ADC_Start_DMA+0x214>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d015      	beq.n	800262a <HAL_ADC_Start_DMA+0x18e>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <HAL_ADC_Start_DMA+0x218>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d105      	bne.n	8002614 <HAL_ADC_Start_DMA+0x178>
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <HAL_ADC_Start_DMA+0x204>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_ADC_Start_DMA+0x21c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d136      	bne.n	800268c <HAL_ADC_Start_DMA+0x1f0>
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_ADC_Start_DMA+0x204>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d130      	bne.n	800268c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d129      	bne.n	800268c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	e020      	b.n	800268c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_ADC_Start_DMA+0x214>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d11b      	bne.n	800268c <HAL_ADC_Start_DMA+0x1f0>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d114      	bne.n	800268c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e00b      	b.n	800268c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f043 0210 	orr.w	r2, r3, #16
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000000 	.word	0x20000000
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	40012300 	.word	0x40012300
 80026a4:	08002b35 	.word	0x08002b35
 80026a8:	08002bef 	.word	0x08002bef
 80026ac:	08002c0b 	.word	0x08002c0b
 80026b0:	40012000 	.word	0x40012000
 80026b4:	40012100 	.word	0x40012100
 80026b8:	40012200 	.word	0x40012200

080026bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1c>
 8002710:	2302      	movs	r3, #2
 8002712:	e105      	b.n	8002920 <HAL_ADC_ConfigChannel+0x228>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b09      	cmp	r3, #9
 8002722:	d925      	bls.n	8002770 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68d9      	ldr	r1, [r3, #12]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	3b1e      	subs	r3, #30
 800273a:	2207      	movs	r2, #7
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43da      	mvns	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	400a      	ands	r2, r1
 8002748:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68d9      	ldr	r1, [r3, #12]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	4603      	mov	r3, r0
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4403      	add	r3, r0
 8002762:	3b1e      	subs	r3, #30
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	e022      	b.n	80027b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	2207      	movs	r2, #7
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4403      	add	r3, r0
 80027ac:	409a      	lsls	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d824      	bhi.n	8002808 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b05      	subs	r3, #5
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b05      	subs	r3, #5
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
 8002806:	e04c      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d824      	bhi.n	800285a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	3b23      	subs	r3, #35	; 0x23
 8002822:	221f      	movs	r2, #31
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43da      	mvns	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	400a      	ands	r2, r1
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4618      	mov	r0, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b23      	subs	r3, #35	; 0x23
 800284c:	fa00 f203 	lsl.w	r2, r0, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
 8002858:	e023      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	3b41      	subs	r3, #65	; 0x41
 800286c:	221f      	movs	r2, #31
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	400a      	ands	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4618      	mov	r0, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3b41      	subs	r3, #65	; 0x41
 8002896:	fa00 f203 	lsl.w	r2, r0, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_ADC_ConfigChannel+0x234>)
 80028a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_ADC_ConfigChannel+0x238>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d109      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1cc>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_ADC_ConfigChannel+0x238>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d123      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x21e>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d003      	beq.n	80028de <HAL_ADC_ConfigChannel+0x1e6>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b11      	cmp	r3, #17
 80028dc:	d11b      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d111      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_ADC_ConfigChannel+0x23c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_ADC_ConfigChannel+0x240>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	0c9a      	lsrs	r2, r3, #18
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002908:	e002      	b.n	8002910 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3b01      	subs	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f9      	bne.n	800290a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40012300 	.word	0x40012300
 8002930:	40012000 	.word	0x40012000
 8002934:	20000000 	.word	0x20000000
 8002938:	431bde83 	.word	0x431bde83

0800293c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002944:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <ADC_Init+0x1f0>)
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	021a      	lsls	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <ADC_Init+0x1f4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e00f      	b.n	8002a3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0202 	bic.w	r2, r2, #2
 8002a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e1b      	ldrb	r3, [r3, #24]
 8002a54:	005a      	lsls	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	3b01      	subs	r3, #1
 8002a94:	035a      	lsls	r2, r3, #13
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e007      	b.n	8002ab0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	051a      	lsls	r2, r3, #20
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002af2:	025a      	lsls	r2, r3, #9
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	029a      	lsls	r2, r3, #10
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40012300 	.word	0x40012300
 8002b30:	0f000001 	.word	0x0f000001

08002b34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d13c      	bne.n	8002bc8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d12b      	bne.n	8002bc0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d127      	bne.n	8002bc0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d119      	bne.n	8002bc0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0220 	bic.w	r2, r2, #32
 8002b9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fd7b 	bl	80026bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bc6:	e00e      	b.n	8002be6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff fd85 	bl	80026e4 <HAL_ADC_ErrorCallback>
}
 8002bda:	e004      	b.n	8002be6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff fd67 	bl	80026d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fd5a 	bl	80026e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0ed      	b.n	8002e26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe f984 	bl	8000f64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c6c:	f7ff fbc6 	bl	80023fc <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c72:	e012      	b.n	8002c9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c74:	f7ff fbc2 	bl	80023fc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d90b      	bls.n	8002c9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0c5      	b.n	8002e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0e5      	beq.n	8002c74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0202 	bic.w	r2, r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb8:	f7ff fba0 	bl	80023fc <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cbe:	e012      	b.n	8002ce6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cc0:	f7ff fb9c 	bl	80023fc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b0a      	cmp	r3, #10
 8002ccc:	d90b      	bls.n	8002ce6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2205      	movs	r2, #5
 8002cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e09f      	b.n	8002e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7e1b      	ldrb	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7e5b      	ldrb	r3, [r3, #25]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d108      	bne.n	8002d38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7e9b      	ldrb	r3, [r3, #26]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e007      	b.n	8002d72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0220 	bic.w	r2, r2, #32
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7edb      	ldrb	r3, [r3, #27]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d108      	bne.n	8002d8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0210 	bic.w	r2, r2, #16
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0210 	orr.w	r2, r2, #16
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7f1b      	ldrb	r3, [r3, #28]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d108      	bne.n	8002db6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0208 	orr.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e007      	b.n	8002dc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0208 	bic.w	r2, r2, #8
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7f5b      	ldrb	r3, [r3, #29]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d108      	bne.n	8002de0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e007      	b.n	8002df0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	ea42 0103 	orr.w	r1, r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e46:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d003      	beq.n	8002e56 <HAL_CAN_ConfigFilter+0x26>
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	f040 80be 	bne.w	8002fd2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_CAN_ConfigFilter+0x1bc>)
 8002e58:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	431a      	orrs	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2201      	movs	r2, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d123      	bne.n	8002f00 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002eda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3248      	adds	r2, #72	; 0x48
 8002ee0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef6:	6979      	ldr	r1, [r7, #20]
 8002ef8:	3348      	adds	r3, #72	; 0x48
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d122      	bne.n	8002f4e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3248      	adds	r2, #72	; 0x48
 8002f2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	3348      	adds	r3, #72	; 0x48
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	401a      	ands	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f68:	e007      	b.n	8002f7a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f94:	e007      	b.n	8002fa6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fc4:	f023 0201 	bic.w	r2, r3, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e006      	b.n	8002fe0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40006400 	.word	0x40006400

08002ff0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d12e      	bne.n	8003062 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800301c:	f7ff f9ee 	bl	80023fc <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003022:	e012      	b.n	800304a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003024:	f7ff f9ea 	bl	80023fc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b0a      	cmp	r3, #10
 8003030:	d90b      	bls.n	800304a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2205      	movs	r2, #5
 8003042:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e012      	b.n	8003070 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e006      	b.n	8003070 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d003      	beq.n	80030a4 <HAL_CAN_AddTxMessage+0x2c>
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	f040 80b8 	bne.w	8003214 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80a0 	beq.w	8003204 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	0e1b      	lsrs	r3, r3, #24
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d907      	bls.n	80030e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e09e      	b.n	8003222 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030e4:	2201      	movs	r2, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	409a      	lsls	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	6809      	ldr	r1, [r1, #0]
 8003104:	431a      	orrs	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3318      	adds	r3, #24
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	440b      	add	r3, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e00f      	b.n	8003132 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800311c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003126:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3318      	adds	r3, #24
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	440b      	add	r3, r1
 8003130:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3318      	adds	r3, #24
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	440b      	add	r3, r1
 8003142:	3304      	adds	r3, #4
 8003144:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	7d1b      	ldrb	r3, [r3, #20]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d111      	bne.n	8003172 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3318      	adds	r3, #24
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	3304      	adds	r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	6811      	ldr	r1, [r2, #0]
 8003162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3318      	adds	r3, #24
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	440b      	add	r3, r1
 800316e:	3304      	adds	r3, #4
 8003170:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3307      	adds	r3, #7
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	061a      	lsls	r2, r3, #24
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3306      	adds	r3, #6
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3305      	adds	r3, #5
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	4313      	orrs	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	3204      	adds	r2, #4
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	4610      	mov	r0, r2
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	6811      	ldr	r1, [r2, #0]
 800319a:	ea43 0200 	orr.w	r2, r3, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3303      	adds	r3, #3
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	061a      	lsls	r2, r3, #24
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3302      	adds	r3, #2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	4313      	orrs	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	4610      	mov	r0, r2
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	6811      	ldr	r1, [r2, #0]
 80031d0:	ea43 0200 	orr.w	r2, r3, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	440b      	add	r3, r1
 80031da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80031de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3318      	adds	r3, #24
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6811      	ldr	r1, [r2, #0]
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3318      	adds	r3, #24
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	440b      	add	r3, r1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e00e      	b.n	8003222 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e006      	b.n	8003222 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800322e:	b480      	push	{r7}
 8003230:	b087      	sub	sp, #28
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003242:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d003      	beq.n	8003252 <HAL_CAN_GetRxMessage+0x24>
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b02      	cmp	r3, #2
 800324e:	f040 80f3 	bne.w	8003438 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10e      	bne.n	8003276 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0e7      	b.n	8003446 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0d8      	b.n	8003446 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	331b      	adds	r3, #27
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4413      	add	r3, r2
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0204 	and.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	331b      	adds	r3, #27
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	4413      	add	r3, r2
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0d5b      	lsrs	r3, r3, #21
 80032c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	331b      	adds	r3, #27
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	4413      	add	r3, r2
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	08db      	lsrs	r3, r3, #3
 80032dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	331b      	adds	r3, #27
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4413      	add	r3, r2
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0202 	and.w	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	331b      	adds	r3, #27
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	4413      	add	r3, r2
 8003306:	3304      	adds	r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	331b      	adds	r3, #27
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	4413      	add	r3, r2
 800331e:	3304      	adds	r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	b2da      	uxtb	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	331b      	adds	r3, #27
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4413      	add	r3, r2
 800334c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	4413      	add	r3, r2
 8003362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0a1a      	lsrs	r2, r3, #8
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4413      	add	r3, r2
 800337c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0c1a      	lsrs	r2, r3, #16
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	3302      	adds	r3, #2
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4413      	add	r3, r2
 8003396:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e1a      	lsrs	r2, r3, #24
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	3303      	adds	r3, #3
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	3304      	adds	r3, #4
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0a1a      	lsrs	r2, r3, #8
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	3305      	adds	r3, #5
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0c1a      	lsrs	r2, r3, #16
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3306      	adds	r3, #6
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e1a      	lsrs	r2, r3, #24
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	3307      	adds	r3, #7
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0220 	orr.w	r2, r2, #32
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	e007      	b.n	8003434 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e006      	b.n	8003446 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003462:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d002      	beq.n	8003470 <HAL_CAN_ActivateNotification+0x1e>
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d109      	bne.n	8003484 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6959      	ldr	r1, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e006      	b.n	8003492 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	; 0x28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d07c      	beq.n	80035de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d023      	beq.n	8003536 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f983 	bl	800380c <HAL_CAN_TxMailbox0CompleteCallback>
 8003506:	e016      	b.n	8003536 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
 800351a:	e00c      	b.n	8003536 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	e002      	b.n	8003536 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f989 	bl	8003848 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d024      	beq.n	800358a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f963 	bl	8003820 <HAL_CAN_TxMailbox1CompleteCallback>
 800355a:	e016      	b.n	800358a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	e00c      	b.n	800358a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	e002      	b.n	800358a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f969 	bl	800385c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d024      	beq.n	80035de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800359c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f943 	bl	8003834 <HAL_CAN_TxMailbox2CompleteCallback>
 80035ae:	e016      	b.n	80035de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e00c      	b.n	80035de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e002      	b.n	80035de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f949 	bl	8003870 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00c      	beq.n	8003602 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2208      	movs	r2, #8
 800361c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f930 	bl	8003884 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd ff85 	bl	800154c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800365c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2210      	movs	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2208      	movs	r2, #8
 8003680:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f912 	bl	80038ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f8f9 	bl	8003898 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2210      	movs	r2, #16
 80036c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8fc 	bl	80038c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d006      	beq.n	80036ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8f5 	bl	80038d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d07b      	beq.n	80037ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d072      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003758:	2b00      	cmp	r3, #0
 800375a:	d043      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03e      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800376c:	2b60      	cmp	r3, #96	; 0x60
 800376e:	d02b      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x32a>
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d82e      	bhi.n	80037d2 <HAL_CAN_IRQHandler+0x334>
 8003774:	2b50      	cmp	r3, #80	; 0x50
 8003776:	d022      	beq.n	80037be <HAL_CAN_IRQHandler+0x320>
 8003778:	2b50      	cmp	r3, #80	; 0x50
 800377a:	d82a      	bhi.n	80037d2 <HAL_CAN_IRQHandler+0x334>
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d019      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x316>
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d826      	bhi.n	80037d2 <HAL_CAN_IRQHandler+0x334>
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d010      	beq.n	80037aa <HAL_CAN_IRQHandler+0x30c>
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d822      	bhi.n	80037d2 <HAL_CAN_IRQHandler+0x334>
 800378c:	2b10      	cmp	r3, #16
 800378e:	d002      	beq.n	8003796 <HAL_CAN_IRQHandler+0x2f8>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d005      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003794:	e01d      	b.n	80037d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f043 0308 	orr.w	r3, r3, #8
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800379e:	e019      	b.n	80037d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f043 0310 	orr.w	r3, r3, #16
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037a8:	e014      	b.n	80037d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b2:	e00f      	b.n	80037d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037bc:	e00a      	b.n	80037d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037c6:	e005      	b.n	80037d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d0:	e000      	b.n	80037d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80037d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2204      	movs	r2, #4
 80037ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f872 	bl	80038e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003804:	bf00      	nop
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	; (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	; (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff4c 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7e:	f7ff ff61 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7ff ffb1 	bl	80039f0 <NVIC_EncodePriority>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff80 	bl	800399c <__NVIC_SetPriority>
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff54 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7fe fc96 	bl	80023fc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e099      	b.n	8003c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afc:	e00f      	b.n	8003b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afe:	f7fe fc7d 	bl	80023fc <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d908      	bls.n	8003b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e078      	b.n	8003c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e8      	bne.n	8003afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <HAL_DMA_Init+0x158>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d107      	bne.n	8003b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	4313      	orrs	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d117      	bne.n	8003be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fa6f 	bl	80040a8 <DMA_CheckFifoParam>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bde:	2301      	movs	r3, #1
 8003be0:	e016      	b.n	8003c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa26 	bl	800403c <DMA_CalcBaseAndBitshift>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	223f      	movs	r2, #63	; 0x3f
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	f010803f 	.word	0xf010803f

08003c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_DMA_Start_IT+0x26>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e040      	b.n	8003cc4 <HAL_DMA_Start_IT+0xa8>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d12f      	bne.n	8003cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f9b8 	bl	8003fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	409a      	lsls	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0216 	orr.w	r2, r2, #22
 8003c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0208 	orr.w	r2, r2, #8
 8003ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e005      	b.n	8003cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cd8:	4b8e      	ldr	r3, [pc, #568]	; (8003f14 <HAL_DMA_IRQHandler+0x248>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a8e      	ldr	r2, [pc, #568]	; (8003f18 <HAL_DMA_IRQHandler+0x24c>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01a      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	2208      	movs	r2, #8
 8003d26:	409a      	lsls	r2, r3
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	2204      	movs	r2, #4
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	2204      	movs	r2, #4
 8003d92:	409a      	lsls	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	2210      	movs	r2, #16
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d043      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d03c      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d024      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
 8003dfa:	e01f      	b.n	8003e3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
 8003e0c:	e016      	b.n	8003e3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0208 	bic.w	r2, r2, #8
 8003e2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	2220      	movs	r2, #32
 8003e42:	409a      	lsls	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 808f 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8087 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	2220      	movs	r2, #32
 8003e64:	409a      	lsls	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d136      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0216 	bic.w	r2, r2, #22
 8003e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x1da>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0208 	bic.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	223f      	movs	r2, #63	; 0x3f
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d07e      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
        }
        return;
 8003ee2:	e079      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10d      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d031      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
 8003f10:	e02c      	b.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
 8003f12:	bf00      	nop
 8003f14:	20000000 	.word	0x20000000
 8003f18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e01e      	b.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d032      	beq.n	8003fda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d022      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2205      	movs	r2, #5
 8003f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d307      	bcc.n	8003fb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f2      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x2cc>
 8003fb2:	e000      	b.n	8003fb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
 8003fd6:	e000      	b.n	8003fda <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fd8:	bf00      	nop
    }
  }
}
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d108      	bne.n	8004020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800401e:	e007      	b.n	8004030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	3b10      	subs	r3, #16
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <DMA_CalcBaseAndBitshift+0x64>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d909      	bls.n	800407e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	659a      	str	r2, [r3, #88]	; 0x58
 800407c:	e007      	b.n	800408e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	aaaaaaab 	.word	0xaaaaaaab
 80040a4:	08008e00 	.word	0x08008e00

080040a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11f      	bne.n	8004102 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d856      	bhi.n	8004176 <DMA_CheckFifoParam+0xce>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <DMA_CheckFifoParam+0x28>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040f3 	.word	0x080040f3
 80040d8:	080040e1 	.word	0x080040e1
 80040dc:	08004177 	.word	0x08004177
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d046      	beq.n	800417a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f0:	e043      	b.n	800417a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fa:	d140      	bne.n	800417e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004100:	e03d      	b.n	800417e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410a:	d121      	bne.n	8004150 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d837      	bhi.n	8004182 <DMA_CheckFifoParam+0xda>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <DMA_CheckFifoParam+0x70>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004129 	.word	0x08004129
 800411c:	0800412f 	.word	0x0800412f
 8004120:	08004129 	.word	0x08004129
 8004124:	08004141 	.word	0x08004141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      break;
 800412c:	e030      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d025      	beq.n	8004186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413e:	e022      	b.n	8004186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004148:	d11f      	bne.n	800418a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800414e:	e01c      	b.n	800418a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d903      	bls.n	800415e <DMA_CheckFifoParam+0xb6>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d003      	beq.n	8004164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800415c:	e018      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      break;
 8004162:	e015      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e00b      	b.n	800418e <DMA_CheckFifoParam+0xe6>
      break;
 8004176:	bf00      	nop
 8004178:	e00a      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e008      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
 8004180:	e006      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
 8004184:	e004      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;   
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 800418e:	bf00      	nop
    }
  } 
  
  return status; 
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop

080041a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e16b      	b.n	8004494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041bc:	2201      	movs	r2, #1
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	f040 815a 	bne.w	800448e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d005      	beq.n	80041f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d130      	bne.n	8004254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004228:	2201      	movs	r2, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 0201 	and.w	r2, r3, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d017      	beq.n	8004290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	2203      	movs	r2, #3
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d123      	bne.n	80042e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	220f      	movs	r2, #15
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	08da      	lsrs	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3208      	adds	r2, #8
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	2203      	movs	r2, #3
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0203 	and.w	r2, r3, #3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80b4 	beq.w	800448e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	4b60      	ldr	r3, [pc, #384]	; (80044ac <HAL_GPIO_Init+0x30c>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	4a5f      	ldr	r2, [pc, #380]	; (80044ac <HAL_GPIO_Init+0x30c>)
 8004330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004334:	6453      	str	r3, [r2, #68]	; 0x44
 8004336:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_GPIO_Init+0x30c>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004342:	4a5b      	ldr	r2, [pc, #364]	; (80044b0 <HAL_GPIO_Init+0x310>)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	3302      	adds	r3, #2
 800434a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	220f      	movs	r2, #15
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a52      	ldr	r2, [pc, #328]	; (80044b4 <HAL_GPIO_Init+0x314>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <HAL_GPIO_Init+0x226>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <HAL_GPIO_Init+0x318>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d025      	beq.n	80043c2 <HAL_GPIO_Init+0x222>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a50      	ldr	r2, [pc, #320]	; (80044bc <HAL_GPIO_Init+0x31c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <HAL_GPIO_Init+0x21e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a4f      	ldr	r2, [pc, #316]	; (80044c0 <HAL_GPIO_Init+0x320>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_GPIO_Init+0x21a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a4e      	ldr	r2, [pc, #312]	; (80044c4 <HAL_GPIO_Init+0x324>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_Init+0x216>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a4d      	ldr	r2, [pc, #308]	; (80044c8 <HAL_GPIO_Init+0x328>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00d      	beq.n	80043b2 <HAL_GPIO_Init+0x212>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a4c      	ldr	r2, [pc, #304]	; (80044cc <HAL_GPIO_Init+0x32c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_GPIO_Init+0x20e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a4b      	ldr	r2, [pc, #300]	; (80044d0 <HAL_GPIO_Init+0x330>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_GPIO_Init+0x20a>
 80043a6:	2307      	movs	r3, #7
 80043a8:	e00e      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043aa:	2308      	movs	r3, #8
 80043ac:	e00c      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043ae:	2306      	movs	r3, #6
 80043b0:	e00a      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043b2:	2305      	movs	r3, #5
 80043b4:	e008      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e006      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043ba:	2303      	movs	r3, #3
 80043bc:	e004      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043be:	2302      	movs	r3, #2
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043c6:	2300      	movs	r3, #0
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	f002 0203 	and.w	r2, r2, #3
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	4093      	lsls	r3, r2
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d8:	4935      	ldr	r1, [pc, #212]	; (80044b0 <HAL_GPIO_Init+0x310>)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_GPIO_Init+0x334>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440a:	4a32      	ldr	r2, [pc, #200]	; (80044d4 <HAL_GPIO_Init+0x334>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_GPIO_Init+0x334>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004488:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_GPIO_Init+0x334>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	f67f ae90 	bls.w	80041bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40020000 	.word	0x40020000
 80044b8:	40020400 	.word	0x40020400
 80044bc:	40020800 	.word	0x40020800
 80044c0:	40020c00 	.word	0x40020c00
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40021400 	.word	0x40021400
 80044cc:	40021800 	.word	0x40021800
 80044d0:	40021c00 	.word	0x40021c00
 80044d4:	40013c00 	.word	0x40013c00

080044d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	807b      	strh	r3, [r7, #2]
 80044e4:	4613      	mov	r3, r2
 80044e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044e8:	787b      	ldrb	r3, [r7, #1]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044f4:	e003      	b.n	80044fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044f6:	887b      	ldrh	r3, [r7, #2]
 80044f8:	041a      	lsls	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	619a      	str	r2, [r3, #24]
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e12b      	b.n	8004776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc ff94 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2224      	movs	r2, #36	; 0x24
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800455e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800456e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004570:	f000 fd40 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8004574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4a81      	ldr	r2, [pc, #516]	; (8004780 <HAL_I2C_Init+0x274>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d807      	bhi.n	8004590 <HAL_I2C_Init+0x84>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a80      	ldr	r2, [pc, #512]	; (8004784 <HAL_I2C_Init+0x278>)
 8004584:	4293      	cmp	r3, r2
 8004586:	bf94      	ite	ls
 8004588:	2301      	movls	r3, #1
 800458a:	2300      	movhi	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e006      	b.n	800459e <HAL_I2C_Init+0x92>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a7d      	ldr	r2, [pc, #500]	; (8004788 <HAL_I2C_Init+0x27c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	bf94      	ite	ls
 8004598:	2301      	movls	r3, #1
 800459a:	2300      	movhi	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0e7      	b.n	8004776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a78      	ldr	r2, [pc, #480]	; (800478c <HAL_I2C_Init+0x280>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	0c9b      	lsrs	r3, r3, #18
 80045b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a6a      	ldr	r2, [pc, #424]	; (8004780 <HAL_I2C_Init+0x274>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d802      	bhi.n	80045e0 <HAL_I2C_Init+0xd4>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3301      	adds	r3, #1
 80045de:	e009      	b.n	80045f4 <HAL_I2C_Init+0xe8>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	4a69      	ldr	r2, [pc, #420]	; (8004790 <HAL_I2C_Init+0x284>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	3301      	adds	r3, #1
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004606:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	495c      	ldr	r1, [pc, #368]	; (8004780 <HAL_I2C_Init+0x274>)
 8004610:	428b      	cmp	r3, r1
 8004612:	d819      	bhi.n	8004648 <HAL_I2C_Init+0x13c>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e59      	subs	r1, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004628:	400b      	ands	r3, r1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_I2C_Init+0x138>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1e59      	subs	r1, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fbb1 f3f3 	udiv	r3, r1, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004642:	e051      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 8004644:	2304      	movs	r3, #4
 8004646:	e04f      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d111      	bne.n	8004674 <HAL_I2C_Init+0x168>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e58      	subs	r0, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	440b      	add	r3, r1
 800465e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004662:	3301      	adds	r3, #1
 8004664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e012      	b.n	800469a <HAL_I2C_Init+0x18e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	0099      	lsls	r1, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Init+0x196>
 800469e:	2301      	movs	r3, #1
 80046a0:	e022      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10e      	bne.n	80046c8 <HAL_I2C_Init+0x1bc>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1e58      	subs	r0, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	440b      	add	r3, r1
 80046b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c6:	e00f      	b.n	80046e8 <HAL_I2C_Init+0x1dc>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1e58      	subs	r0, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	0099      	lsls	r1, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	fbb0 f3f3 	udiv	r3, r0, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	6809      	ldr	r1, [r1, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6911      	ldr	r1, [r2, #16]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	430b      	orrs	r3, r1
 800472a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	000186a0 	.word	0x000186a0
 8004784:	001e847f 	.word	0x001e847f
 8004788:	003d08ff 	.word	0x003d08ff
 800478c:	431bde83 	.word	0x431bde83
 8004790:	10624dd3 	.word	0x10624dd3

08004794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e267      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d075      	beq.n	800489e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d00c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d112      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05b      	beq.n	800489c <HAL_RCC_OscConfig+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d157      	bne.n	800489c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e242      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x74>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e01d      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x98>
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6f      	ldr	r2, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6c      	ldr	r2, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 800482c:	4b69      	ldr	r3, [pc, #420]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a65      	ldr	r2, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fd fdd6 	bl	80023fc <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fd fdd2 	bl	80023fc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e207      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0xc0>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fd fdc2 	bl	80023fc <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487c:	f7fd fdbe 	bl	80023fc <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1f3      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0xe8>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d11c      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d116      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1c7      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	e03a      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fd fd77 	bl	80023fc <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004912:	f7fd fd73 	bl	80023fc <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1a8      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4925      	ldr	r1, [pc, #148]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	e015      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd fd56 	bl	80023fc <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004954:	f7fd fd52 	bl	80023fc <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e187      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d036      	beq.n	80049ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fd fd36 	bl	80023fc <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004994:	f7fd fd32 	bl	80023fc <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e167      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x200>
 80049b2:	e01b      	b.n	80049ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fd fd1f 	bl	80023fc <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00e      	b.n	80049e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fd fd1b 	bl	80023fc <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d907      	bls.n	80049e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e150      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470000 	.word	0x42470000
 80049dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ea      	bne.n	80049c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8097 	beq.w	8004b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b77      	ldr	r3, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7fd fcdb 	bl	80023fc <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7fd fcd7 	bl	80023fc <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e10c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2ea>
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a63      	ldr	r2, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x30c>
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5e      	ldr	r2, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004aa0:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a57      	ldr	r2, [pc, #348]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a54      	ldr	r2, [pc, #336]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fc9c 	bl	80023fc <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fc98 	bl	80023fc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0cb      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x334>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fd fc86 	bl	80023fc <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fd fc82 	bl	80023fc <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0b5      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ee      	bne.n	8004af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a38      	ldr	r2, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a1 	beq.w	8004c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d141      	bne.n	8004bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd fc56 	bl	80023fc <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd fc52 	bl	80023fc <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e087      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	491b      	ldr	r1, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fd fc2b 	bl	80023fc <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fd fc27 	bl	80023fc <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e05c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x416>
 8004bc8:	e054      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fd fc14 	bl	80023fc <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd fc10 	bl	80023fc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e045      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x444>
 8004bf6:	e03d      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e038      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x4ec>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0cc      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90c      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b8      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd8:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	494d      	ldr	r1, [pc, #308]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d044      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e067      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d74:	f7fd fb42 	bl	80023fc <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd fb3e 	bl	80023fc <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20c      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4916      	ldr	r1, [pc, #88]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	490e      	ldr	r1, [pc, #56]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e0a:	f000 f821 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	490a      	ldr	r1, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc fe42 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08008de8 	.word	0x08008de8
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	20000004 	.word	0x20000004

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b090      	sub	sp, #64	; 0x40
 8004e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	2300      	movs	r3, #0
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e68:	4b59      	ldr	r3, [pc, #356]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d00d      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x40>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	f200 80a1 	bhi.w	8004fbc <HAL_RCC_GetSysClockFreq+0x16c>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e82:	e09b      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e88:	e09b      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e8e:	e098      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e90:	4b4f      	ldr	r3, [pc, #316]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d028      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ebc:	fb03 f201 	mul.w	r2, r3, r1
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	4a43      	ldr	r2, [pc, #268]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eca:	fba0 1202 	umull	r1, r2, r0, r2
 8004ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed6:	4413      	add	r3, r2
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	2200      	movs	r2, #0
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eea:	f7fb fd8f 	bl	8000a0c <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef6:	e053      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef8:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	099b      	lsrs	r3, r3, #6
 8004efe:	2200      	movs	r2, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	617a      	str	r2, [r7, #20]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f0a:	f04f 0b00 	mov.w	fp, #0
 8004f0e:	4652      	mov	r2, sl
 8004f10:	465b      	mov	r3, fp
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f04f 0100 	mov.w	r1, #0
 8004f1a:	0159      	lsls	r1, r3, #5
 8004f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f20:	0150      	lsls	r0, r2, #5
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	ebb2 080a 	subs.w	r8, r2, sl
 8004f2a:	eb63 090b 	sbc.w	r9, r3, fp
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f42:	ebb2 0408 	subs.w	r4, r2, r8
 8004f46:	eb63 0509 	sbc.w	r5, r3, r9
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	00eb      	lsls	r3, r5, #3
 8004f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f58:	00e2      	lsls	r2, r4, #3
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	eb14 030a 	adds.w	r3, r4, sl
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	eb45 030b 	adc.w	r3, r5, fp
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	60fa      	str	r2, [r7, #12]
 8004f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f94:	f7fb fd3a 	bl	8000a0c <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3740      	adds	r7, #64	; 0x40
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	017d7840 	.word	0x017d7840

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000000 	.word	0x20000000

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a9b      	lsrs	r3, r3, #10
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4903      	ldr	r1, [pc, #12]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	08008df8 	.word	0x08008df8

0800501c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	220f      	movs	r2, #15
 800502a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0203 	and.w	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	08db      	lsrs	r3, r3, #3
 8005056:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <HAL_RCC_GetClockConfig+0x60>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0207 	and.w	r2, r3, #7
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	601a      	str	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	40023c00 	.word	0x40023c00

08005080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e041      	b.n	8005116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fd f830 	bl	800210c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 fc70 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04e      	b.n	80051d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a23      	ldr	r2, [pc, #140]	; (80051e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005162:	d01d      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a19      	ldr	r2, [pc, #100]	; (80051f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_TIM_Base_Start_IT+0xdc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d111      	bne.n	80051c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d010      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	e007      	b.n	80051d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40010400 	.word	0x40010400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40001800 	.word	0x40001800

08005200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e041      	b.n	8005296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc ff22 	bl	8002070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f000 fbb0 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <HAL_TIM_PWM_Start+0x24>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e022      	b.n	800530a <HAL_TIM_PWM_Start+0x6a>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d109      	bne.n	80052de <HAL_TIM_PWM_Start+0x3e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	bf14      	ite	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	2300      	moveq	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e015      	b.n	800530a <HAL_TIM_PWM_Start+0x6a>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x58>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e008      	b.n	800530a <HAL_TIM_PWM_Start+0x6a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e07c      	b.n	800540c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0x82>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005320:	e013      	b.n	800534a <HAL_TIM_PWM_Start+0xaa>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0x92>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005330:	e00b      	b.n	800534a <HAL_TIM_PWM_Start+0xaa>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xa2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005340:	e003      	b.n	800534a <HAL_TIM_PWM_Start+0xaa>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe10 	bl	8005f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2d      	ldr	r2, [pc, #180]	; (8005414 <HAL_TIM_PWM_Start+0x174>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIM_PWM_Start+0xcc>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <HAL_TIM_PWM_Start+0x178>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_TIM_PWM_Start+0xd0>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_TIM_PWM_Start+0xd2>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_TIM_PWM_Start+0x174>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d01d      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1f      	ldr	r2, [pc, #124]	; (800541c <HAL_TIM_PWM_Start+0x17c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <HAL_TIM_PWM_Start+0x180>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <HAL_TIM_PWM_Start+0x184>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a16      	ldr	r2, [pc, #88]	; (8005418 <HAL_TIM_PWM_Start+0x178>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_TIM_PWM_Start+0x188>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x136>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <HAL_TIM_PWM_Start+0x18c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d010      	beq.n	800540a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	e007      	b.n	800540a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40010000 	.word	0x40010000
 8005418:	40010400 	.word	0x40010400
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa77 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa69 	bl	8005952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa7a 	bl	800597a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0204 	mvn.w	r2, #4
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa4d 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa3f 	bl	8005952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa50 	bl	800597a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0208 	mvn.w	r2, #8
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa23 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa15 	bl	8005952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fa26 	bl	800597a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d122      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	d11b      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9f9 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9eb 	bl	8005952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f9fc 	bl	800597a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0201 	mvn.w	r2, #1
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc f906 	bl	80017c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fdca 	bl	8006174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d10e      	bne.n	800560c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d107      	bne.n	800560c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9c1 	bl	800598e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b20      	cmp	r3, #32
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b20      	cmp	r3, #32
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0220 	mvn.w	r2, #32
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fd94 	bl	8006160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800565a:	2302      	movs	r3, #2
 800565c:	e0ae      	b.n	80057bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b0c      	cmp	r3, #12
 800566a:	f200 809f 	bhi.w	80057ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056a9 	.word	0x080056a9
 8005678:	080057ad 	.word	0x080057ad
 800567c:	080057ad 	.word	0x080057ad
 8005680:	080057ad 	.word	0x080057ad
 8005684:	080056e9 	.word	0x080056e9
 8005688:	080057ad 	.word	0x080057ad
 800568c:	080057ad 	.word	0x080057ad
 8005690:	080057ad 	.word	0x080057ad
 8005694:	0800572b 	.word	0x0800572b
 8005698:	080057ad 	.word	0x080057ad
 800569c:	080057ad 	.word	0x080057ad
 80056a0:	080057ad 	.word	0x080057ad
 80056a4:	0800576b 	.word	0x0800576b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa18 	bl	8005ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0208 	orr.w	r2, r2, #8
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0204 	bic.w	r2, r2, #4
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	619a      	str	r2, [r3, #24]
      break;
 80056e6:	e064      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fa68 	bl	8005bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6999      	ldr	r1, [r3, #24]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	619a      	str	r2, [r3, #24]
      break;
 8005728:	e043      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fabd 	bl	8005cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0208 	orr.w	r2, r2, #8
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0204 	bic.w	r2, r2, #4
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	61da      	str	r2, [r3, #28]
      break;
 8005768:	e023      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fb11 	bl	8005d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69d9      	ldr	r1, [r3, #28]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	021a      	lsls	r2, r3, #8
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	61da      	str	r2, [r3, #28]
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
      break;
 80057b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_TIM_ConfigClockSource+0x1c>
 80057dc:	2302      	movs	r3, #2
 80057de:	e0b4      	b.n	800594a <HAL_TIM_ConfigClockSource+0x186>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005818:	d03e      	beq.n	8005898 <HAL_TIM_ConfigClockSource+0xd4>
 800581a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581e:	f200 8087 	bhi.w	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	f000 8086 	beq.w	8005936 <HAL_TIM_ConfigClockSource+0x172>
 800582a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582e:	d87f      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b70      	cmp	r3, #112	; 0x70
 8005832:	d01a      	beq.n	800586a <HAL_TIM_ConfigClockSource+0xa6>
 8005834:	2b70      	cmp	r3, #112	; 0x70
 8005836:	d87b      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b60      	cmp	r3, #96	; 0x60
 800583a:	d050      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x11a>
 800583c:	2b60      	cmp	r3, #96	; 0x60
 800583e:	d877      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b50      	cmp	r3, #80	; 0x50
 8005842:	d03c      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xfa>
 8005844:	2b50      	cmp	r3, #80	; 0x50
 8005846:	d873      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d058      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x13a>
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d86f      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d064      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15a>
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	d86b      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d060      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d867      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d05c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15a>
 8005864:	2b10      	cmp	r3, #16
 8005866:	d05a      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	e062      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6899      	ldr	r1, [r3, #8]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f000 fb5d 	bl	8005f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800588c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	609a      	str	r2, [r3, #8]
      break;
 8005896:	e04f      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6899      	ldr	r1, [r3, #8]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f000 fb46 	bl	8005f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ba:	609a      	str	r2, [r3, #8]
      break;
 80058bc:	e03c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 faba 	bl	8005e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2150      	movs	r1, #80	; 0x50
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fb13 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 80058dc:	e02c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fad9 	bl	8005ea2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2160      	movs	r1, #96	; 0x60
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb03 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 80058fc:	e01c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	461a      	mov	r2, r3
 800590c:	f000 fa9a 	bl	8005e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2140      	movs	r1, #64	; 0x40
 8005916:	4618      	mov	r0, r3
 8005918:	f000 faf3 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 800591c:	e00c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f000 faea 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 800592e:	e003      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e000      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a40      	ldr	r2, [pc, #256]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3d      	ldr	r2, [pc, #244]	; (8005abc <TIM_Base_SetConfig+0x118>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <TIM_Base_SetConfig+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3b      	ldr	r2, [pc, #236]	; (8005ac4 <TIM_Base_SetConfig+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d02b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d027      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <TIM_Base_SetConfig+0x118>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d023      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2b      	ldr	r2, [pc, #172]	; (8005ac0 <TIM_Base_SetConfig+0x11c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <TIM_Base_SetConfig+0x120>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <TIM_Base_SetConfig+0x128>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <TIM_Base_SetConfig+0x12c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <TIM_Base_SetConfig+0x130>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <TIM_Base_SetConfig+0x134>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a24      	ldr	r2, [pc, #144]	; (8005adc <TIM_Base_SetConfig+0x138>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <TIM_Base_SetConfig+0x13c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0xf8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40001800 	.word	0x40001800
 8005adc:	40001c00 	.word	0x40001c00
 8005ae0:	40002000 	.word	0x40002000

08005ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0302 	bic.w	r3, r3, #2
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a20      	ldr	r2, [pc, #128]	; (8005bbc <TIM_OC1_SetConfig+0xd8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC1_SetConfig+0x64>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10c      	bne.n	8005b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0308 	bic.w	r3, r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <TIM_OC1_SetConfig+0xd8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC1_SetConfig+0x8e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400

08005bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0210 	bic.w	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f023 0320 	bic.w	r3, r3, #32
 8005c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <TIM_OC2_SetConfig+0xe4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC2_SetConfig+0x68>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_OC2_SetConfig+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10d      	bne.n	8005c48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <TIM_OC2_SetConfig+0xe4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC2_SetConfig+0x94>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC2_SetConfig+0xe8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d113      	bne.n	8005c80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40010400 	.word	0x40010400

08005cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a21      	ldr	r2, [pc, #132]	; (8005d90 <TIM_OC3_SetConfig+0xe0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC3_SetConfig+0x66>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a20      	ldr	r2, [pc, #128]	; (8005d94 <TIM_OC3_SetConfig+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10d      	bne.n	8005d32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <TIM_OC3_SetConfig+0xe0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC3_SetConfig+0x92>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <TIM_OC3_SetConfig+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400

08005d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <TIM_OC4_SetConfig+0xa4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_OC4_SetConfig+0x68>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <TIM_OC4_SetConfig+0xa8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d109      	bne.n	8005e14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	019b      	lsls	r3, r3, #6
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 030a 	bic.w	r3, r3, #10
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 0210 	bic.w	r2, r3, #16
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	031b      	lsls	r3, r3, #12
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f043 0307 	orr.w	r3, r3, #7
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	609a      	str	r2, [r3, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1a      	ldr	r2, [r3, #32]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e05a      	b.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006028:	d01d      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a17      	ldr	r2, [pc, #92]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d10c      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4313      	orrs	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40010400 	.word	0x40010400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40001800 	.word	0x40001800

080060bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e03d      	b.n	8006154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <__NVIC_SetPriority>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	6039      	str	r1, [r7, #0]
 8006192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006198:	2b00      	cmp	r3, #0
 800619a:	db0a      	blt.n	80061b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	490c      	ldr	r1, [pc, #48]	; (80061d4 <__NVIC_SetPriority+0x4c>)
 80061a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a6:	0112      	lsls	r2, r2, #4
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	440b      	add	r3, r1
 80061ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061b0:	e00a      	b.n	80061c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4908      	ldr	r1, [pc, #32]	; (80061d8 <__NVIC_SetPriority+0x50>)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	3b04      	subs	r3, #4
 80061c0:	0112      	lsls	r2, r2, #4
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	440b      	add	r3, r1
 80061c6:	761a      	strb	r2, [r3, #24]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000e100 	.word	0xe000e100
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <SysTick_Handler+0x1c>)
 80061e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061e4:	f001 fcfe 	bl	8007be4 <xTaskGetSchedulerState>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d001      	beq.n	80061f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061ee:	f002 fae3 	bl	80087b8 <xPortSysTickHandler>
  }
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	e000e010 	.word	0xe000e010

080061fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006200:	2100      	movs	r1, #0
 8006202:	f06f 0004 	mvn.w	r0, #4
 8006206:	f7ff ffbf 	bl	8006188 <__NVIC_SetPriority>
#endif
}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006216:	f3ef 8305 	mrs	r3, IPSR
 800621a:	603b      	str	r3, [r7, #0]
  return(result);
 800621c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006222:	f06f 0305 	mvn.w	r3, #5
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e00c      	b.n	8006244 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <osKernelInitialize+0x44>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <osKernelInitialize+0x44>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006238:	2300      	movs	r3, #0
 800623a:	607b      	str	r3, [r7, #4]
 800623c:	e002      	b.n	8006244 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006242:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006244:	687b      	ldr	r3, [r7, #4]
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000394 	.word	0x20000394

08006258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800625e:	f3ef 8305 	mrs	r3, IPSR
 8006262:	603b      	str	r3, [r7, #0]
  return(result);
 8006264:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <osKernelStart+0x1a>
    stat = osErrorISR;
 800626a:	f06f 0305 	mvn.w	r3, #5
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e010      	b.n	8006294 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <osKernelStart+0x48>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d109      	bne.n	800628e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800627a:	f7ff ffbf 	bl	80061fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <osKernelStart+0x48>)
 8006280:	2202      	movs	r2, #2
 8006282:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006284:	f001 f866 	bl	8007354 <vTaskStartScheduler>
      stat = osOK;
 8006288:	2300      	movs	r3, #0
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	e002      	b.n	8006294 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006294:	687b      	ldr	r3, [r7, #4]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000394 	.word	0x20000394

080062a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08e      	sub	sp, #56	; 0x38
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b4:	f3ef 8305 	mrs	r3, IPSR
 80062b8:	617b      	str	r3, [r7, #20]
  return(result);
 80062ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d17e      	bne.n	80063be <osThreadNew+0x11a>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d07b      	beq.n	80063be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062ca:	2318      	movs	r3, #24
 80062cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d045      	beq.n	800636a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <osThreadNew+0x48>
        name = attr->name;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <osThreadNew+0x6e>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b38      	cmp	r3, #56	; 0x38
 8006304:	d805      	bhi.n	8006312 <osThreadNew+0x6e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <osThreadNew+0x72>
        return (NULL);
 8006312:	2300      	movs	r3, #0
 8006314:	e054      	b.n	80063c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00e      	beq.n	800634c <osThreadNew+0xa8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b5b      	cmp	r3, #91	; 0x5b
 8006334:	d90a      	bls.n	800634c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <osThreadNew+0xa8>
        mem = 1;
 8006346:	2301      	movs	r3, #1
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e010      	b.n	800636e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10c      	bne.n	800636e <osThreadNew+0xca>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d108      	bne.n	800636e <osThreadNew+0xca>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <osThreadNew+0xca>
          mem = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e001      	b.n	800636e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d110      	bne.n	8006396 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800637c:	9202      	str	r2, [sp, #8]
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fe0c 	bl	8006fa8 <xTaskCreateStatic>
 8006390:	4603      	mov	r3, r0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e013      	b.n	80063be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d110      	bne.n	80063be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f107 0310 	add.w	r3, r7, #16
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fe57 	bl	8007062 <xTaskCreate>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d001      	beq.n	80063be <osThreadNew+0x11a>
            hTask = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063be:	693b      	ldr	r3, [r7, #16]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3728      	adds	r7, #40	; 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d0:	f3ef 8305 	mrs	r3, IPSR
 80063d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <osDelay+0x1c>
    stat = osErrorISR;
 80063dc:	f06f 0305 	mvn.w	r3, #5
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e007      	b.n	80063f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 ff7c 	bl	80072ec <vTaskDelay>
    }
  }

  return (stat);
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a07      	ldr	r2, [pc, #28]	; (800642c <vApplicationGetIdleTaskMemory+0x2c>)
 8006410:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vApplicationGetIdleTaskMemory+0x30>)
 8006416:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2280      	movs	r2, #128	; 0x80
 800641c:	601a      	str	r2, [r3, #0]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000398 	.word	0x20000398
 8006430:	200003f4 	.word	0x200003f4

08006434 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a07      	ldr	r2, [pc, #28]	; (8006460 <vApplicationGetTimerTaskMemory+0x2c>)
 8006444:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4a06      	ldr	r2, [pc, #24]	; (8006464 <vApplicationGetTimerTaskMemory+0x30>)
 800644a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	200005f4 	.word	0x200005f4
 8006464:	20000650 	.word	0x20000650

08006468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f103 0208 	add.w	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f103 0208 	add.w	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f103 0208 	add.w	r2, r3, #8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006520:	d103      	bne.n	800652a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e00c      	b.n	8006544 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3308      	adds	r3, #8
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e002      	b.n	8006538 <vListInsert+0x2e>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	d2f6      	bcs.n	8006532 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	601a      	str	r2, [r3, #0]
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6892      	ldr	r2, [r2, #8]
 8006592:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6852      	ldr	r2, [r2, #4]
 800659c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d103      	bne.n	80065b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	1e5a      	subs	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065fa:	f002 f84b 	bl	8008694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800660a:	fb01 f303 	mul.w	r3, r1, r3
 800660e:	441a      	add	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	3b01      	subs	r3, #1
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	441a      	add	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	22ff      	movs	r2, #255	; 0xff
 8006646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d114      	bne.n	800667a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3310      	adds	r3, #16
 800665c:	4618      	mov	r0, r3
 800665e:	f001 f903 	bl	8007868 <xTaskRemoveFromEventList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <xQueueGenericReset+0xcc>)
 800666a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	e009      	b.n	800668e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3310      	adds	r3, #16
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fef2 	bl	8006468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3324      	adds	r3, #36	; 0x24
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff feed 	bl	8006468 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800668e:	f002 f831 	bl	80086f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006692:	2301      	movs	r3, #1
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08e      	sub	sp, #56	; 0x38
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <xQueueGenericCreateStatic+0x52>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <xQueueGenericCreateStatic+0x56>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericCreateStatic+0x58>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <xQueueGenericCreateStatic+0x7e>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <xQueueGenericCreateStatic+0x82>
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <xQueueGenericCreateStatic+0x84>
 8006722:	2300      	movs	r3, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	61fb      	str	r3, [r7, #28]
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800673e:	2350      	movs	r3, #80	; 0x50
 8006740:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b50      	cmp	r3, #80	; 0x50
 8006746:	d00a      	beq.n	800675e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	61bb      	str	r3, [r7, #24]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800675e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006772:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f805 	bl	8006790 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006788:	4618      	mov	r0, r3
 800678a:	3730      	adds	r7, #48	; 0x30
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067be:	2101      	movs	r1, #1
 80067c0:	69b8      	ldr	r0, [r7, #24]
 80067c2:	f7ff ff05 	bl	80065d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08e      	sub	sp, #56	; 0x38
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067e6:	2300      	movs	r3, #0
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xQueueGenericSend+0x32>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <xQueueGenericSend+0x40>
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <xQueueGenericSend+0x44>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <xQueueGenericSend+0x46>
 800681c:	2300      	movs	r3, #0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xQueueGenericSend+0x60>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d103      	bne.n	8006846 <xQueueGenericSend+0x6e>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <xQueueGenericSend+0x72>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericSend+0x74>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueGenericSend+0x8e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	623b      	str	r3, [r7, #32]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006866:	f001 f9bd 	bl	8007be4 <xTaskGetSchedulerState>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <xQueueGenericSend+0x9e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <xQueueGenericSend+0xa2>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueGenericSend+0xa4>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueGenericSend+0xbe>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61fb      	str	r3, [r7, #28]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006896:	f001 fefd 	bl	8008694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <xQueueGenericSend+0xd4>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d129      	bne.n	8006900 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b2:	f000 fa0b 	bl	8006ccc <prvCopyDataToQueue>
 80068b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	3324      	adds	r3, #36	; 0x24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 ffcf 	bl	8007868 <xTaskRemoveFromEventList>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068d0:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <xQueueGenericSend+0x1f8>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	e00a      	b.n	80068f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068e8:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <xQueueGenericSend+0x1f8>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068f8:	f001 fefc 	bl	80086f4 <vPortExitCritical>
				return pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e063      	b.n	80069c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006906:	f001 fef5 	bl	80086f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800690a:	2300      	movs	r3, #0
 800690c:	e05c      	b.n	80069c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f809 	bl	8007930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006922:	f001 fee7 	bl	80086f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006926:	f000 fd7b 	bl	8007420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800692a:	f001 feb3 	bl	8008694 <vPortEnterCritical>
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006934:	b25b      	sxtb	r3, r3
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800693a:	d103      	bne.n	8006944 <xQueueGenericSend+0x16c>
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694a:	b25b      	sxtb	r3, r3
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006950:	d103      	bne.n	800695a <xQueueGenericSend+0x182>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800695a:	f001 fecb 	bl	80086f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800695e:	1d3a      	adds	r2, r7, #4
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fff8 	bl	800795c <xTaskCheckForTimeOut>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d124      	bne.n	80069bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006974:	f000 faa2 	bl	8006ebc <prvIsQueueFull>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d018      	beq.n	80069b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	3310      	adds	r3, #16
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 ff1e 	bl	80077c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800698c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698e:	f000 fa2d 	bl	8006dec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006992:	f000 fd53 	bl	800743c <xTaskResumeAll>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	f47f af7c 	bne.w	8006896 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <xQueueGenericSend+0x1f8>)
 80069a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	e772      	b.n	8006896 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b2:	f000 fa1b 	bl	8006dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069b6:	f000 fd41 	bl	800743c <xTaskResumeAll>
 80069ba:	e76c      	b.n	8006896 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fa15 	bl	8006dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069c2:	f000 fd3b 	bl	800743c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3738      	adds	r7, #56	; 0x38
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b090      	sub	sp, #64	; 0x40
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <xQueueGenericSendFromISR+0x3c>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <xQueueGenericSendFromISR+0x40>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <xQueueGenericSendFromISR+0x42>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d103      	bne.n	8006a3e <xQueueGenericSendFromISR+0x6a>
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <xQueueGenericSendFromISR+0x6e>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <xQueueGenericSendFromISR+0x70>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	623b      	str	r3, [r7, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a5e:	f001 fefb 	bl	8008858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a62:	f3ef 8211 	mrs	r2, BASEPRI
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	61fa      	str	r2, [r7, #28]
 8006a78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <xQueueGenericSendFromISR+0xbc>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d12f      	bne.n	8006af0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006aa6:	f000 f911 	bl	8006ccc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ab2:	d112      	bne.n	8006ada <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d016      	beq.n	8006aea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fed1 	bl	8007868 <xTaskRemoveFromEventList>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00e      	beq.n	8006aea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e007      	b.n	8006aea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ade:	3301      	adds	r3, #1
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	b25a      	sxtb	r2, r3
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006aea:	2301      	movs	r3, #1
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006aee:	e001      	b.n	8006af4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006afe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3740      	adds	r7, #64	; 0x40
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <xQueueReceive+0x30>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	623b      	str	r3, [r7, #32]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <xQueueReceive+0x3e>
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <xQueueReceive+0x42>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <xQueueReceive+0x44>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueReceive+0x5e>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	61fb      	str	r3, [r7, #28]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6a:	f001 f83b 	bl	8007be4 <xTaskGetSchedulerState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d102      	bne.n	8006b7a <xQueueReceive+0x6e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <xQueueReceive+0x72>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <xQueueReceive+0x74>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xQueueReceive+0x8e>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	61bb      	str	r3, [r7, #24]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9a:	f001 fd7b 	bl	8008694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01f      	beq.n	8006bea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bae:	f000 f8f7 	bl	8006da0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00f      	beq.n	8006be2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fe4e 	bl	8007868 <xTaskRemoveFromEventList>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b3d      	ldr	r3, [pc, #244]	; (8006cc8 <xQueueReceive+0x1bc>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006be2:	f001 fd87 	bl	80086f4 <vPortExitCritical>
				return pdPASS;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e069      	b.n	8006cbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d103      	bne.n	8006bf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bf0:	f001 fd80 	bl	80086f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e062      	b.n	8006cbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bfe:	f107 0310 	add.w	r3, r7, #16
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fe94 	bl	8007930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c0c:	f001 fd72 	bl	80086f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c10:	f000 fc06 	bl	8007420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c14:	f001 fd3e 	bl	8008694 <vPortEnterCritical>
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c24:	d103      	bne.n	8006c2e <xQueueReceive+0x122>
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c34:	b25b      	sxtb	r3, r3
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3a:	d103      	bne.n	8006c44 <xQueueReceive+0x138>
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c44:	f001 fd56 	bl	80086f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c48:	1d3a      	adds	r2, r7, #4
 8006c4a:	f107 0310 	add.w	r3, r7, #16
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fe83 	bl	800795c <xTaskCheckForTimeOut>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d123      	bne.n	8006ca4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c5e:	f000 f917 	bl	8006e90 <prvIsQueueEmpty>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d017      	beq.n	8006c98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fda9 	bl	80077c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c78:	f000 f8b8 	bl	8006dec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c7c:	f000 fbde 	bl	800743c <xTaskResumeAll>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d189      	bne.n	8006b9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c86:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <xQueueReceive+0x1bc>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	e780      	b.n	8006b9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9a:	f000 f8a7 	bl	8006dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c9e:	f000 fbcd 	bl	800743c <xTaskResumeAll>
 8006ca2:	e77a      	b.n	8006b9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca6:	f000 f8a1 	bl	8006dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006caa:	f000 fbc7 	bl	800743c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb0:	f000 f8ee 	bl	8006e90 <prvIsQueueEmpty>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f43f af6f 	beq.w	8006b9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3730      	adds	r7, #48	; 0x30
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d14d      	bne.n	8006d8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ff92 	bl	8007c20 <xTaskPriorityDisinherit>
 8006cfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	609a      	str	r2, [r3, #8]
 8006d04:	e043      	b.n	8006d8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d119      	bne.n	8006d40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6858      	ldr	r0, [r3, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	461a      	mov	r2, r3
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	f001 ffec 	bl	8008cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d32b      	bcc.n	8006d8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	e026      	b.n	8006d8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68d8      	ldr	r0, [r3, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	f001 ffd2 	bl	8008cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	425b      	negs	r3, r3
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d207      	bcs.n	8006d7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	425b      	negs	r3, r3
 8006d76:	441a      	add	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d105      	bne.n	8006d8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d96:	697b      	ldr	r3, [r7, #20]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d018      	beq.n	8006de4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	441a      	add	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d303      	bcc.n	8006dd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68d9      	ldr	r1, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6838      	ldr	r0, [r7, #0]
 8006de0:	f001 ff88 	bl	8008cf4 <memcpy>
	}
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006df4:	f001 fc4e 	bl	8008694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e00:	e011      	b.n	8006e26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d012      	beq.n	8006e30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3324      	adds	r3, #36	; 0x24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fd2a 	bl	8007868 <xTaskRemoveFromEventList>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e1a:	f000 fe01 	bl	8007a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dce9      	bgt.n	8006e02 <prvUnlockQueue+0x16>
 8006e2e:	e000      	b.n	8006e32 <prvUnlockQueue+0x46>
					break;
 8006e30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	22ff      	movs	r2, #255	; 0xff
 8006e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e3a:	f001 fc5b 	bl	80086f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e3e:	f001 fc29 	bl	8008694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e4a:	e011      	b.n	8006e70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d012      	beq.n	8006e7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3310      	adds	r3, #16
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fd05 	bl	8007868 <xTaskRemoveFromEventList>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e64:	f000 fddc 	bl	8007a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dce9      	bgt.n	8006e4c <prvUnlockQueue+0x60>
 8006e78:	e000      	b.n	8006e7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	22ff      	movs	r2, #255	; 0xff
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e84:	f001 fc36 	bl	80086f4 <vPortExitCritical>
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e98:	f001 fbfc 	bl	8008694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	e001      	b.n	8006eae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eae:	f001 fc21 	bl	80086f4 <vPortExitCritical>

	return xReturn;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec4:	f001 fbe6 	bl	8008694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d102      	bne.n	8006eda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e001      	b.n	8006ede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ede:	f001 fc09 	bl	80086f4 <vPortExitCritical>

	return xReturn;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e014      	b.n	8006f26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006efc:	4a0f      	ldr	r2, [pc, #60]	; (8006f3c <vQueueAddToRegistry+0x50>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f08:	490c      	ldr	r1, [pc, #48]	; (8006f3c <vQueueAddToRegistry+0x50>)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f12:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <vQueueAddToRegistry+0x50>)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4413      	add	r3, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f1e:	e006      	b.n	8006f2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	d9e7      	bls.n	8006efc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20000a50 	.word	0x20000a50

08006f40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f50:	f001 fba0 	bl	8008694 <vPortEnterCritical>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f5a:	b25b      	sxtb	r3, r3
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f60:	d103      	bne.n	8006f6a <vQueueWaitForMessageRestricted+0x2a>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f76:	d103      	bne.n	8006f80 <vQueueWaitForMessageRestricted+0x40>
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f80:	f001 fbb8 	bl	80086f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fc3b 	bl	8007810 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f9a:	6978      	ldr	r0, [r7, #20]
 8006f9c:	f7ff ff26 	bl	8006dec <prvUnlockQueue>
	}
 8006fa0:	bf00      	nop
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08e      	sub	sp, #56	; 0x38
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	623b      	str	r3, [r7, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <xTaskCreateStatic+0x46>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fee:	235c      	movs	r3, #92	; 0x5c
 8006ff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ff6:	d00a      	beq.n	800700e <xTaskCreateStatic+0x66>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800700e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01e      	beq.n	8007054 <xTaskCreateStatic+0xac>
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01b      	beq.n	8007054 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007024:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800702e:	2300      	movs	r3, #0
 8007030:	9303      	str	r3, [sp, #12]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f850 	bl	80070ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800704c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800704e:	f000 f8dd 	bl	800720c <prvAddNewTaskToReadyList>
 8007052:	e001      	b.n	8007058 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007058:	697b      	ldr	r3, [r7, #20]
	}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	; 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08c      	sub	sp, #48	; 0x30
 8007066:	af04      	add	r7, sp, #16
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fc2e 	bl	80088d8 <pvPortMalloc>
 800707c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00e      	beq.n	80070a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007084:	205c      	movs	r0, #92	; 0x5c
 8007086:	f001 fc27 	bl	80088d8 <pvPortMalloc>
 800708a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
 8007098:	e005      	b.n	80070a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f001 fce8 	bl	8008a70 <vPortFree>
 80070a0:	e001      	b.n	80070a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	2300      	movs	r3, #0
 80070b8:	9303      	str	r3, [sp, #12]
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	9302      	str	r3, [sp, #8]
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f80e 	bl	80070ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070d0:	69f8      	ldr	r0, [r7, #28]
 80070d2:	f000 f89b 	bl	800720c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070d6:	2301      	movs	r3, #1
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e002      	b.n	80070e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070e2:	69bb      	ldr	r3, [r7, #24]
	}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	461a      	mov	r2, r3
 8007104:	21a5      	movs	r1, #165	; 0xa5
 8007106:	f001 fe03 	bl	8008d10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007114:	3b01      	subs	r3, #1
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f023 0307 	bic.w	r3, r3, #7
 8007122:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <prvInitialiseNewTask+0x58>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	617b      	str	r3, [r7, #20]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01f      	beq.n	800718a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	e012      	b.n	8007176 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	7819      	ldrb	r1, [r3, #0]
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	3334      	adds	r3, #52	; 0x34
 8007160:	460a      	mov	r2, r1
 8007162:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d006      	beq.n	800717e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	3301      	adds	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b0f      	cmp	r3, #15
 800717a:	d9e9      	bls.n	8007150 <prvInitialiseNewTask+0x64>
 800717c:	e000      	b.n	8007180 <prvInitialiseNewTask+0x94>
			{
				break;
 800717e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007188:	e003      	b.n	8007192 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	2b37      	cmp	r3, #55	; 0x37
 8007196:	d901      	bls.n	800719c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007198:	2337      	movs	r3, #55	; 0x37
 800719a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2200      	movs	r2, #0
 80071ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	3304      	adds	r3, #4
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff f978 	bl	80064a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	3318      	adds	r3, #24
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff f973 	bl	80064a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	2200      	movs	r2, #0
 80071dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	68f9      	ldr	r1, [r7, #12]
 80071ea:	69b8      	ldr	r0, [r7, #24]
 80071ec:	f001 f928 	bl	8008440 <pxPortInitialiseStack>
 80071f0:	4602      	mov	r2, r0
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007202:	bf00      	nop
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007214:	f001 fa3e 	bl	8008694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007218:	4b2d      	ldr	r3, [pc, #180]	; (80072d0 <prvAddNewTaskToReadyList+0xc4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	4a2c      	ldr	r2, [pc, #176]	; (80072d0 <prvAddNewTaskToReadyList+0xc4>)
 8007220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007222:	4b2c      	ldr	r3, [pc, #176]	; (80072d4 <prvAddNewTaskToReadyList+0xc8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800722a:	4a2a      	ldr	r2, [pc, #168]	; (80072d4 <prvAddNewTaskToReadyList+0xc8>)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <prvAddNewTaskToReadyList+0xc4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d110      	bne.n	800725a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007238:	f000 fc16 	bl	8007a68 <prvInitialiseTaskLists>
 800723c:	e00d      	b.n	800725a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800723e:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <prvAddNewTaskToReadyList+0xcc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007246:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <prvAddNewTaskToReadyList+0xc8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	429a      	cmp	r2, r3
 8007252:	d802      	bhi.n	800725a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007254:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <prvAddNewTaskToReadyList+0xc8>)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800725a:	4b20      	ldr	r3, [pc, #128]	; (80072dc <prvAddNewTaskToReadyList+0xd0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <prvAddNewTaskToReadyList+0xd0>)
 8007262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007264:	4b1d      	ldr	r3, [pc, #116]	; (80072dc <prvAddNewTaskToReadyList+0xd0>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <prvAddNewTaskToReadyList+0xd4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d903      	bls.n	8007280 <prvAddNewTaskToReadyList+0x74>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	4a18      	ldr	r2, [pc, #96]	; (80072e0 <prvAddNewTaskToReadyList+0xd4>)
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <prvAddNewTaskToReadyList+0xd8>)
 800728e:	441a      	add	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3304      	adds	r3, #4
 8007294:	4619      	mov	r1, r3
 8007296:	4610      	mov	r0, r2
 8007298:	f7ff f913 	bl	80064c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800729c:	f001 fa2a 	bl	80086f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <prvAddNewTaskToReadyList+0xcc>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <prvAddNewTaskToReadyList+0xc8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d207      	bcs.n	80072c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <prvAddNewTaskToReadyList+0xdc>)
 80072b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000f64 	.word	0x20000f64
 80072d4:	20000a90 	.word	0x20000a90
 80072d8:	20000f70 	.word	0x20000f70
 80072dc:	20000f80 	.word	0x20000f80
 80072e0:	20000f6c 	.word	0x20000f6c
 80072e4:	20000a94 	.word	0x20000a94
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d017      	beq.n	800732e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <vTaskDelay+0x60>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <vTaskDelay+0x30>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800731c:	f000 f880 	bl	8007420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fcea 	bl	8007cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007328:	f000 f888 	bl	800743c <xTaskResumeAll>
 800732c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d107      	bne.n	8007344 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <vTaskDelay+0x64>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000f8c 	.word	0x20000f8c
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007362:	463a      	mov	r2, r7
 8007364:	1d39      	adds	r1, r7, #4
 8007366:	f107 0308 	add.w	r3, r7, #8
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff f848 	bl	8006400 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	9202      	str	r2, [sp, #8]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	2300      	movs	r3, #0
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	2300      	movs	r3, #0
 8007380:	460a      	mov	r2, r1
 8007382:	4921      	ldr	r1, [pc, #132]	; (8007408 <vTaskStartScheduler+0xb4>)
 8007384:	4821      	ldr	r0, [pc, #132]	; (800740c <vTaskStartScheduler+0xb8>)
 8007386:	f7ff fe0f 	bl	8006fa8 <xTaskCreateStatic>
 800738a:	4603      	mov	r3, r0
 800738c:	4a20      	ldr	r2, [pc, #128]	; (8007410 <vTaskStartScheduler+0xbc>)
 800738e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007390:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <vTaskStartScheduler+0xbc>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	e001      	b.n	80073a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d102      	bne.n	80073ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073a8:	f000 fcfc 	bl	8007da4 <xTimerCreateTimerTask>
 80073ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d116      	bne.n	80073e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	613b      	str	r3, [r7, #16]
}
 80073c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073c8:	4b12      	ldr	r3, [pc, #72]	; (8007414 <vTaskStartScheduler+0xc0>)
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073d0:	4b11      	ldr	r3, [pc, #68]	; (8007418 <vTaskStartScheduler+0xc4>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <vTaskStartScheduler+0xc8>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073dc:	f001 f8b8 	bl	8008550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073e0:	e00e      	b.n	8007400 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e8:	d10a      	bne.n	8007400 <vTaskStartScheduler+0xac>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	60fb      	str	r3, [r7, #12]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <vTaskStartScheduler+0xaa>
}
 8007400:	bf00      	nop
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	08008d64 	.word	0x08008d64
 800740c:	08007a39 	.word	0x08007a39
 8007410:	20000f88 	.word	0x20000f88
 8007414:	20000f84 	.word	0x20000f84
 8007418:	20000f70 	.word	0x20000f70
 800741c:	20000f68 	.word	0x20000f68

08007420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <vTaskSuspendAll+0x18>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	4a03      	ldr	r2, [pc, #12]	; (8007438 <vTaskSuspendAll+0x18>)
 800742c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800742e:	bf00      	nop
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000f8c 	.word	0x20000f8c

0800743c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800744a:	4b42      	ldr	r3, [pc, #264]	; (8007554 <xTaskResumeAll+0x118>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <xTaskResumeAll+0x2c>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	603b      	str	r3, [r7, #0]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007468:	f001 f914 	bl	8008694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800746c:	4b39      	ldr	r3, [pc, #228]	; (8007554 <xTaskResumeAll+0x118>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3b01      	subs	r3, #1
 8007472:	4a38      	ldr	r2, [pc, #224]	; (8007554 <xTaskResumeAll+0x118>)
 8007474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007476:	4b37      	ldr	r3, [pc, #220]	; (8007554 <xTaskResumeAll+0x118>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d162      	bne.n	8007544 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800747e:	4b36      	ldr	r3, [pc, #216]	; (8007558 <xTaskResumeAll+0x11c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d05e      	beq.n	8007544 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007486:	e02f      	b.n	80074e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007488:	4b34      	ldr	r3, [pc, #208]	; (800755c <xTaskResumeAll+0x120>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3318      	adds	r3, #24
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff f871 	bl	800657c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff f86c 	bl	800657c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a8:	4b2d      	ldr	r3, [pc, #180]	; (8007560 <xTaskResumeAll+0x124>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d903      	bls.n	80074b8 <xTaskResumeAll+0x7c>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <xTaskResumeAll+0x124>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4a27      	ldr	r2, [pc, #156]	; (8007564 <xTaskResumeAll+0x128>)
 80074c6:	441a      	add	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7fe fff7 	bl	80064c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4b23      	ldr	r3, [pc, #140]	; (8007568 <xTaskResumeAll+0x12c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	429a      	cmp	r2, r3
 80074e0:	d302      	bcc.n	80074e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074e2:	4b22      	ldr	r3, [pc, #136]	; (800756c <xTaskResumeAll+0x130>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e8:	4b1c      	ldr	r3, [pc, #112]	; (800755c <xTaskResumeAll+0x120>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1cb      	bne.n	8007488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074f6:	f000 fb55 	bl	8007ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <xTaskResumeAll+0x134>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007506:	f000 f847 	bl	8007598 <xTaskIncrementTick>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007510:	4b16      	ldr	r3, [pc, #88]	; (800756c <xTaskResumeAll+0x130>)
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3b01      	subs	r3, #1
 800751a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f1      	bne.n	8007506 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007522:	4b13      	ldr	r3, [pc, #76]	; (8007570 <xTaskResumeAll+0x134>)
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007528:	4b10      	ldr	r3, [pc, #64]	; (800756c <xTaskResumeAll+0x130>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007530:	2301      	movs	r3, #1
 8007532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007534:	4b0f      	ldr	r3, [pc, #60]	; (8007574 <xTaskResumeAll+0x138>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007544:	f001 f8d6 	bl	80086f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007548:	68bb      	ldr	r3, [r7, #8]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000f8c 	.word	0x20000f8c
 8007558:	20000f64 	.word	0x20000f64
 800755c:	20000f24 	.word	0x20000f24
 8007560:	20000f6c 	.word	0x20000f6c
 8007564:	20000a94 	.word	0x20000a94
 8007568:	20000a90 	.word	0x20000a90
 800756c:	20000f78 	.word	0x20000f78
 8007570:	20000f74 	.word	0x20000f74
 8007574:	e000ed04 	.word	0xe000ed04

08007578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <xTaskGetTickCount+0x1c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007584:	687b      	ldr	r3, [r7, #4]
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000f68 	.word	0x20000f68

08007598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a2:	4b4f      	ldr	r3, [pc, #316]	; (80076e0 <xTaskIncrementTick+0x148>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 808f 	bne.w	80076ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075ac:	4b4d      	ldr	r3, [pc, #308]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075b4:	4a4b      	ldr	r2, [pc, #300]	; (80076e4 <xTaskIncrementTick+0x14c>)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d120      	bne.n	8007602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075c0:	4b49      	ldr	r3, [pc, #292]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <xTaskIncrementTick+0x46>
 80075e0:	4b41      	ldr	r3, [pc, #260]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	4b41      	ldr	r3, [pc, #260]	; (80076ec <xTaskIncrementTick+0x154>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a3f      	ldr	r2, [pc, #252]	; (80076e8 <xTaskIncrementTick+0x150>)
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	4a3f      	ldr	r2, [pc, #252]	; (80076ec <xTaskIncrementTick+0x154>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	4b3e      	ldr	r3, [pc, #248]	; (80076f0 <xTaskIncrementTick+0x158>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	4a3d      	ldr	r2, [pc, #244]	; (80076f0 <xTaskIncrementTick+0x158>)
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	f000 fad1 	bl	8007ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007602:	4b3c      	ldr	r3, [pc, #240]	; (80076f4 <xTaskIncrementTick+0x15c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d349      	bcc.n	80076a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <xTaskIncrementTick+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	4b37      	ldr	r3, [pc, #220]	; (80076f4 <xTaskIncrementTick+0x15c>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800761c:	601a      	str	r2, [r3, #0]
					break;
 800761e:	e03f      	b.n	80076a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007620:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <xTaskIncrementTick+0x150>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d203      	bcs.n	8007640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007638:	4a2e      	ldr	r2, [pc, #184]	; (80076f4 <xTaskIncrementTick+0x15c>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800763e:	e02f      	b.n	80076a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3304      	adds	r3, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe ff99 	bl	800657c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3318      	adds	r3, #24
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe ff90 	bl	800657c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <xTaskIncrementTick+0x160>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d903      	bls.n	8007670 <xTaskIncrementTick+0xd8>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a22      	ldr	r2, [pc, #136]	; (80076f8 <xTaskIncrementTick+0x160>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <xTaskIncrementTick+0x164>)
 800767e:	441a      	add	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7fe ff1b 	bl	80064c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <xTaskIncrementTick+0x168>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	429a      	cmp	r2, r3
 8007698:	d3b8      	bcc.n	800760c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769e:	e7b5      	b.n	800760c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076a0:	4b17      	ldr	r3, [pc, #92]	; (8007700 <xTaskIncrementTick+0x168>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	4915      	ldr	r1, [pc, #84]	; (80076fc <xTaskIncrementTick+0x164>)
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d901      	bls.n	80076bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <xTaskIncrementTick+0x16c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e004      	b.n	80076d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <xTaskIncrementTick+0x170>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <xTaskIncrementTick+0x170>)
 80076d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076d4:	697b      	ldr	r3, [r7, #20]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000f8c 	.word	0x20000f8c
 80076e4:	20000f68 	.word	0x20000f68
 80076e8:	20000f1c 	.word	0x20000f1c
 80076ec:	20000f20 	.word	0x20000f20
 80076f0:	20000f7c 	.word	0x20000f7c
 80076f4:	20000f84 	.word	0x20000f84
 80076f8:	20000f6c 	.word	0x20000f6c
 80076fc:	20000a94 	.word	0x20000a94
 8007700:	20000a90 	.word	0x20000a90
 8007704:	20000f78 	.word	0x20000f78
 8007708:	20000f74 	.word	0x20000f74

0800770c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007712:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <vTaskSwitchContext+0xa8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800771a:	4b27      	ldr	r3, [pc, #156]	; (80077b8 <vTaskSwitchContext+0xac>)
 800771c:	2201      	movs	r2, #1
 800771e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007720:	e041      	b.n	80077a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007722:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <vTaskSwitchContext+0xac>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007728:	4b24      	ldr	r3, [pc, #144]	; (80077bc <vTaskSwitchContext+0xb0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e010      	b.n	8007752 <vTaskSwitchContext+0x46>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <vTaskSwitchContext+0x40>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	607b      	str	r3, [r7, #4]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <vTaskSwitchContext+0x3e>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3b01      	subs	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	491b      	ldr	r1, [pc, #108]	; (80077c0 <vTaskSwitchContext+0xb4>)
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0e4      	beq.n	8007730 <vTaskSwitchContext+0x24>
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <vTaskSwitchContext+0xb4>)
 8007772:	4413      	add	r3, r2
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	605a      	str	r2, [r3, #4]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	3308      	adds	r3, #8
 8007788:	429a      	cmp	r2, r3
 800778a:	d104      	bne.n	8007796 <vTaskSwitchContext+0x8a>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <vTaskSwitchContext+0xb8>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	4a06      	ldr	r2, [pc, #24]	; (80077bc <vTaskSwitchContext+0xb0>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6013      	str	r3, [r2, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20000f8c 	.word	0x20000f8c
 80077b8:	20000f78 	.word	0x20000f78
 80077bc:	20000f6c 	.word	0x20000f6c
 80077c0:	20000a94 	.word	0x20000a94
 80077c4:	20000a90 	.word	0x20000a90

080077c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	60fb      	str	r3, [r7, #12]
}
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <vTaskPlaceOnEventList+0x44>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3318      	adds	r3, #24
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fe fe87 	bl	800650a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077fc:	2101      	movs	r1, #1
 80077fe:	6838      	ldr	r0, [r7, #0]
 8007800:	f000 fa7c 	bl	8007cfc <prvAddCurrentTaskToDelayedList>
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000a90 	.word	0x20000a90

08007810 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	617b      	str	r3, [r7, #20]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <vTaskPlaceOnEventListRestricted+0x54>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3318      	adds	r3, #24
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7fe fe3e 	bl	80064c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800784c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007850:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	68b8      	ldr	r0, [r7, #8]
 8007856:	f000 fa51 	bl	8007cfc <prvAddCurrentTaskToDelayedList>
	}
 800785a:	bf00      	nop
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000a90 	.word	0x20000a90

08007868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60fb      	str	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	3318      	adds	r3, #24
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fe6f 	bl	800657c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789e:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <xTaskRemoveFromEventList+0xb0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d11d      	bne.n	80078e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fe66 	bl	800657c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	4b19      	ldr	r3, [pc, #100]	; (800791c <xTaskRemoveFromEventList+0xb4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d903      	bls.n	80078c4 <xTaskRemoveFromEventList+0x5c>
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a16      	ldr	r2, [pc, #88]	; (800791c <xTaskRemoveFromEventList+0xb4>)
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <xTaskRemoveFromEventList+0xb8>)
 80078d2:	441a      	add	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fe fdf1 	bl	80064c2 <vListInsertEnd>
 80078e0:	e005      	b.n	80078ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3318      	adds	r3, #24
 80078e6:	4619      	mov	r1, r3
 80078e8:	480e      	ldr	r0, [pc, #56]	; (8007924 <xTaskRemoveFromEventList+0xbc>)
 80078ea:	f7fe fdea 	bl	80064c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f2:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <xTaskRemoveFromEventList+0xc0>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d905      	bls.n	8007908 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078fc:	2301      	movs	r3, #1
 80078fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <xTaskRemoveFromEventList+0xc4>)
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e001      	b.n	800790c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800790c:	697b      	ldr	r3, [r7, #20]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000f8c 	.word	0x20000f8c
 800791c:	20000f6c 	.word	0x20000f6c
 8007920:	20000a94 	.word	0x20000a94
 8007924:	20000f24 	.word	0x20000f24
 8007928:	20000a90 	.word	0x20000a90
 800792c:	20000f78 	.word	0x20000f78

08007930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <vTaskInternalSetTimeOutState+0x24>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <vTaskInternalSetTimeOutState+0x28>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	605a      	str	r2, [r3, #4]
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	20000f7c 	.word	0x20000f7c
 8007958:	20000f68 	.word	0x20000f68

0800795c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	613b      	str	r3, [r7, #16]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800799e:	f000 fe79 	bl	8008694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079a2:	4b1d      	ldr	r3, [pc, #116]	; (8007a18 <xTaskCheckForTimeOut+0xbc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ba:	d102      	bne.n	80079c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079bc:	2300      	movs	r3, #0
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	e023      	b.n	8007a0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <xTaskCheckForTimeOut+0xc0>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d007      	beq.n	80079de <xTaskCheckForTimeOut+0x82>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d302      	bcc.n	80079de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	61fb      	str	r3, [r7, #28]
 80079dc:	e015      	b.n	8007a0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d20b      	bcs.n	8007a00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff ff9b 	bl	8007930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	e004      	b.n	8007a0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a06:	2301      	movs	r3, #1
 8007a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a0a:	f000 fe73 	bl	80086f4 <vPortExitCritical>

	return xReturn;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20000f68 	.word	0x20000f68
 8007a1c:	20000f7c 	.word	0x20000f7c

08007a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <vTaskMissedYield+0x14>)
 8007a26:	2201      	movs	r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	20000f78 	.word	0x20000f78

08007a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a40:	f000 f852 	bl	8007ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a44:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <prvIdleTask+0x28>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d9f9      	bls.n	8007a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <prvIdleTask+0x2c>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a5c:	e7f0      	b.n	8007a40 <prvIdleTask+0x8>
 8007a5e:	bf00      	nop
 8007a60:	20000a94 	.word	0x20000a94
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a6e:	2300      	movs	r3, #0
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	e00c      	b.n	8007a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4a12      	ldr	r2, [pc, #72]	; (8007ac8 <prvInitialiseTaskLists+0x60>)
 8007a80:	4413      	add	r3, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fcf0 	bl	8006468 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b37      	cmp	r3, #55	; 0x37
 8007a92:	d9ef      	bls.n	8007a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a94:	480d      	ldr	r0, [pc, #52]	; (8007acc <prvInitialiseTaskLists+0x64>)
 8007a96:	f7fe fce7 	bl	8006468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a9a:	480d      	ldr	r0, [pc, #52]	; (8007ad0 <prvInitialiseTaskLists+0x68>)
 8007a9c:	f7fe fce4 	bl	8006468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007aa0:	480c      	ldr	r0, [pc, #48]	; (8007ad4 <prvInitialiseTaskLists+0x6c>)
 8007aa2:	f7fe fce1 	bl	8006468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aa6:	480c      	ldr	r0, [pc, #48]	; (8007ad8 <prvInitialiseTaskLists+0x70>)
 8007aa8:	f7fe fcde 	bl	8006468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007aac:	480b      	ldr	r0, [pc, #44]	; (8007adc <prvInitialiseTaskLists+0x74>)
 8007aae:	f7fe fcdb 	bl	8006468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <prvInitialiseTaskLists+0x78>)
 8007ab4:	4a05      	ldr	r2, [pc, #20]	; (8007acc <prvInitialiseTaskLists+0x64>)
 8007ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <prvInitialiseTaskLists+0x7c>)
 8007aba:	4a05      	ldr	r2, [pc, #20]	; (8007ad0 <prvInitialiseTaskLists+0x68>)
 8007abc:	601a      	str	r2, [r3, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000a94 	.word	0x20000a94
 8007acc:	20000ef4 	.word	0x20000ef4
 8007ad0:	20000f08 	.word	0x20000f08
 8007ad4:	20000f24 	.word	0x20000f24
 8007ad8:	20000f38 	.word	0x20000f38
 8007adc:	20000f50 	.word	0x20000f50
 8007ae0:	20000f1c 	.word	0x20000f1c
 8007ae4:	20000f20 	.word	0x20000f20

08007ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aee:	e019      	b.n	8007b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007af0:	f000 fdd0 	bl	8008694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af4:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <prvCheckTasksWaitingTermination+0x50>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3304      	adds	r3, #4
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe fd3b 	bl	800657c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b06:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <prvCheckTasksWaitingTermination+0x54>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	4a0b      	ldr	r2, [pc, #44]	; (8007b3c <prvCheckTasksWaitingTermination+0x54>)
 8007b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <prvCheckTasksWaitingTermination+0x58>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <prvCheckTasksWaitingTermination+0x58>)
 8007b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b1a:	f000 fdeb 	bl	80086f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f810 	bl	8007b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <prvCheckTasksWaitingTermination+0x58>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e1      	bne.n	8007af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b2c:	bf00      	nop
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000f38 	.word	0x20000f38
 8007b3c:	20000f64 	.word	0x20000f64
 8007b40:	20000f4c 	.word	0x20000f4c

08007b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d108      	bne.n	8007b68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 ff88 	bl	8008a70 <vPortFree>
				vPortFree( pxTCB );
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ff85 	bl	8008a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b66:	e018      	b.n	8007b9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d103      	bne.n	8007b7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 ff7c 	bl	8008a70 <vPortFree>
	}
 8007b78:	e00f      	b.n	8007b9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d00a      	beq.n	8007b9a <prvDeleteTCB+0x56>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvDeleteTCB+0x54>
	}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007baa:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <prvResetNextTaskUnblockTime+0x38>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <prvResetNextTaskUnblockTime+0x3c>)
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bbc:	e008      	b.n	8007bd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <prvResetNextTaskUnblockTime+0x38>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <prvResetNextTaskUnblockTime+0x3c>)
 8007bce:	6013      	str	r3, [r2, #0]
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20000f1c 	.word	0x20000f1c
 8007be0:	20000f84 	.word	0x20000f84

08007be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <xTaskGetSchedulerState+0x34>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	e008      	b.n	8007c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf8:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <xTaskGetSchedulerState+0x38>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c00:	2302      	movs	r3, #2
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	e001      	b.n	8007c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c06:	2300      	movs	r3, #0
 8007c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c0a:	687b      	ldr	r3, [r7, #4]
	}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	20000f70 	.word	0x20000f70
 8007c1c:	20000f8c 	.word	0x20000f8c

08007c20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d056      	beq.n	8007ce4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c36:	4b2e      	ldr	r3, [pc, #184]	; (8007cf0 <xTaskPriorityDisinherit+0xd0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d00a      	beq.n	8007c56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60bb      	str	r3, [r7, #8]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c78:	1e5a      	subs	r2, r3, #1
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d02c      	beq.n	8007ce4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d128      	bne.n	8007ce4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fc70 	bl	800657c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <xTaskPriorityDisinherit+0xd4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d903      	bls.n	8007cc4 <xTaskPriorityDisinherit+0xa4>
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	4a0c      	ldr	r2, [pc, #48]	; (8007cf4 <xTaskPriorityDisinherit+0xd4>)
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <xTaskPriorityDisinherit+0xd8>)
 8007cd2:	441a      	add	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7fe fbf1 	bl	80064c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ce4:	697b      	ldr	r3, [r7, #20]
	}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000a90 	.word	0x20000a90
 8007cf4:	20000f6c 	.word	0x20000f6c
 8007cf8:	20000a94 	.word	0x20000a94

08007cfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d06:	4b21      	ldr	r3, [pc, #132]	; (8007d8c <prvAddCurrentTaskToDelayedList+0x90>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d0c:	4b20      	ldr	r3, [pc, #128]	; (8007d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fc32 	bl	800657c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1e:	d10a      	bne.n	8007d36 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4819      	ldr	r0, [pc, #100]	; (8007d94 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d30:	f7fe fbc7 	bl	80064c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d34:	e026      	b.n	8007d84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d3e:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d209      	bcs.n	8007d62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fe fbd5 	bl	800650a <vListInsert>
}
 8007d60:	e010      	b.n	8007d84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d62:	4b0e      	ldr	r3, [pc, #56]	; (8007d9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fe fbcb 	bl	800650a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d202      	bcs.n	8007d84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d7e:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6013      	str	r3, [r2, #0]
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20000f68 	.word	0x20000f68
 8007d90:	20000a90 	.word	0x20000a90
 8007d94:	20000f50 	.word	0x20000f50
 8007d98:	20000f20 	.word	0x20000f20
 8007d9c:	20000f1c 	.word	0x20000f1c
 8007da0:	20000f84 	.word	0x20000f84

08007da4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dae:	f000 fb07 	bl	80083c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <xTimerCreateTimerTask+0x80>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d021      	beq.n	8007dfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dc2:	1d3a      	adds	r2, r7, #4
 8007dc4:	f107 0108 	add.w	r1, r7, #8
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe fb31 	bl	8006434 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	9202      	str	r2, [sp, #8]
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	2302      	movs	r3, #2
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	2300      	movs	r3, #0
 8007de2:	460a      	mov	r2, r1
 8007de4:	4910      	ldr	r1, [pc, #64]	; (8007e28 <xTimerCreateTimerTask+0x84>)
 8007de6:	4811      	ldr	r0, [pc, #68]	; (8007e2c <xTimerCreateTimerTask+0x88>)
 8007de8:	f7ff f8de 	bl	8006fa8 <xTaskCreateStatic>
 8007dec:	4603      	mov	r3, r0
 8007dee:	4a10      	ldr	r2, [pc, #64]	; (8007e30 <xTimerCreateTimerTask+0x8c>)
 8007df0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <xTimerCreateTimerTask+0x8c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	613b      	str	r3, [r7, #16]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e1a:	697b      	ldr	r3, [r7, #20]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000fc0 	.word	0x20000fc0
 8007e28:	08008d6c 	.word	0x08008d6c
 8007e2c:	08007f69 	.word	0x08007f69
 8007e30:	20000fc4 	.word	0x20000fc4

08007e34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	623b      	str	r3, [r7, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e62:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <xTimerGenericCommand+0x98>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d02a      	beq.n	8007ec0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	dc18      	bgt.n	8007eae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e7c:	f7ff feb2 	bl	8007be4 <xTaskGetSchedulerState>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d109      	bne.n	8007e9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <xTimerGenericCommand+0x98>)
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	f107 0110 	add.w	r1, r7, #16
 8007e8e:	2300      	movs	r3, #0
 8007e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e92:	f7fe fca1 	bl	80067d8 <xQueueGenericSend>
 8007e96:	6278      	str	r0, [r7, #36]	; 0x24
 8007e98:	e012      	b.n	8007ec0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <xTimerGenericCommand+0x98>)
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f107 0110 	add.w	r1, r7, #16
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f7fe fc97 	bl	80067d8 <xQueueGenericSend>
 8007eaa:	6278      	str	r0, [r7, #36]	; 0x24
 8007eac:	e008      	b.n	8007ec0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007eae:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <xTimerGenericCommand+0x98>)
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f107 0110 	add.w	r1, r7, #16
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	f7fe fd8b 	bl	80069d4 <xQueueGenericSendFromISR>
 8007ebe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3728      	adds	r7, #40	; 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000fc0 	.word	0x20000fc0

08007ed0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eda:	4b22      	ldr	r3, [pc, #136]	; (8007f64 <prvProcessExpiredTimer+0x94>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fe fb47 	bl	800657c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d022      	beq.n	8007f42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	18d1      	adds	r1, r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	6978      	ldr	r0, [r7, #20]
 8007f0a:	f000 f8d1 	bl	80080b0 <prvInsertTimerInActiveList>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01f      	beq.n	8007f54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f14:	2300      	movs	r3, #0
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f7ff ff88 	bl	8007e34 <xTimerGenericCommand>
 8007f24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d113      	bne.n	8007f54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60fb      	str	r3, [r7, #12]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	6978      	ldr	r0, [r7, #20]
 8007f5a:	4798      	blx	r3
}
 8007f5c:	bf00      	nop
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000fb8 	.word	0x20000fb8

08007f68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f70:	f107 0308 	add.w	r3, r7, #8
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 f857 	bl	8008028 <prvGetNextExpireTime>
 8007f7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f803 	bl	8007f8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f86:	f000 f8d5 	bl	8008134 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f8a:	e7f1      	b.n	8007f70 <prvTimerTask+0x8>

08007f8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f96:	f7ff fa43 	bl	8007420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f9a:	f107 0308 	add.w	r3, r7, #8
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f866 	bl	8008070 <prvSampleTimeNow>
 8007fa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d130      	bne.n	800800e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <prvProcessTimerOrBlockTask+0x3c>
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d806      	bhi.n	8007fc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fba:	f7ff fa3f 	bl	800743c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff85 	bl	8007ed0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fc6:	e024      	b.n	8008012 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d008      	beq.n	8007fe0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <prvProcessTimerOrBlockTask+0x90>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <prvProcessTimerOrBlockTask+0x50>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e000      	b.n	8007fde <prvProcessTimerOrBlockTask+0x52>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <prvProcessTimerOrBlockTask+0x94>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f7fe ffa7 	bl	8006f40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ff2:	f7ff fa23 	bl	800743c <xTaskResumeAll>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ffc:	4b09      	ldr	r3, [pc, #36]	; (8008024 <prvProcessTimerOrBlockTask+0x98>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	f3bf 8f6f 	isb	sy
}
 800800c:	e001      	b.n	8008012 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800800e:	f7ff fa15 	bl	800743c <xTaskResumeAll>
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000fbc 	.word	0x20000fbc
 8008020:	20000fc0 	.word	0x20000fc0
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <prvGetNextExpireTime+0x44>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <prvGetNextExpireTime+0x16>
 800803a:	2201      	movs	r2, #1
 800803c:	e000      	b.n	8008040 <prvGetNextExpireTime+0x18>
 800803e:	2200      	movs	r2, #0
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d105      	bne.n	8008058 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <prvGetNextExpireTime+0x44>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e001      	b.n	800805c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800805c:	68fb      	ldr	r3, [r7, #12]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000fb8 	.word	0x20000fb8

08008070 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008078:	f7ff fa7e 	bl	8007578 <xTaskGetTickCount>
 800807c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <prvSampleTimeNow+0x3c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d205      	bcs.n	8008094 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008088:	f000 f936 	bl	80082f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	e002      	b.n	800809a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800809a:	4a04      	ldr	r2, [pc, #16]	; (80080ac <prvSampleTimeNow+0x3c>)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080a0:	68fb      	ldr	r3, [r7, #12]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000fc8 	.word	0x20000fc8

080080b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d812      	bhi.n	80080fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	1ad2      	subs	r2, r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d302      	bcc.n	80080ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080e4:	2301      	movs	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e01b      	b.n	8008122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <prvInsertTimerInActiveList+0x7c>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fe fa08 	bl	800650a <vListInsert>
 80080fa:	e012      	b.n	8008122 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d206      	bcs.n	8008112 <prvInsertTimerInActiveList+0x62>
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d302      	bcc.n	8008112 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	e007      	b.n	8008122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008112:	4b07      	ldr	r3, [pc, #28]	; (8008130 <prvInsertTimerInActiveList+0x80>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3304      	adds	r3, #4
 800811a:	4619      	mov	r1, r3
 800811c:	4610      	mov	r0, r2
 800811e:	f7fe f9f4 	bl	800650a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000fbc 	.word	0x20000fbc
 8008130:	20000fb8 	.word	0x20000fb8

08008134 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08e      	sub	sp, #56	; 0x38
 8008138:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800813a:	e0ca      	b.n	80082d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	da18      	bge.n	8008174 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008142:	1d3b      	adds	r3, r7, #4
 8008144:	3304      	adds	r3, #4
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61fb      	str	r3, [r7, #28]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800816a:	6850      	ldr	r0, [r2, #4]
 800816c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800816e:	6892      	ldr	r2, [r2, #8]
 8008170:	4611      	mov	r1, r2
 8008172:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f2c0 80aa 	blt.w	80082d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	3304      	adds	r3, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f9f5 	bl	800657c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008192:	463b      	mov	r3, r7
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff ff6b 	bl	8008070 <prvSampleTimeNow>
 800819a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b09      	cmp	r3, #9
 80081a0:	f200 8097 	bhi.w	80082d2 <prvProcessReceivedCommands+0x19e>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <prvProcessReceivedCommands+0x78>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081d5 	.word	0x080081d5
 80081b0:	080081d5 	.word	0x080081d5
 80081b4:	080081d5 	.word	0x080081d5
 80081b8:	08008249 	.word	0x08008249
 80081bc:	0800825d 	.word	0x0800825d
 80081c0:	080082a7 	.word	0x080082a7
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081d5 	.word	0x080081d5
 80081cc:	08008249 	.word	0x08008249
 80081d0:	0800825d 	.word	0x0800825d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	18d1      	adds	r1, r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f4:	f7ff ff5c 	bl	80080b0 <prvInsertTimerInActiveList>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d069      	beq.n	80082d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008204:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d05e      	beq.n	80082d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	441a      	add	r2, r3
 800821c:	2300      	movs	r3, #0
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	2300      	movs	r3, #0
 8008222:	2100      	movs	r1, #0
 8008224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008226:	f7ff fe05 	bl	8007e34 <xTimerGenericCommand>
 800822a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d14f      	bne.n	80082d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	61bb      	str	r3, [r7, #24]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800824e:	f023 0301 	bic.w	r3, r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800825a:	e03a      	b.n	80082d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	b2da      	uxtb	r2, r3
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	617b      	str	r3, [r7, #20]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	18d1      	adds	r1, r2, r3
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a0:	f7ff ff06 	bl	80080b0 <prvInsertTimerInActiveList>
					break;
 80082a4:	e015      	b.n	80082d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80082b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b6:	f000 fbdb 	bl	8008a70 <vPortFree>
 80082ba:	e00a      	b.n	80082d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c2:	f023 0301 	bic.w	r3, r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082ce:	e000      	b.n	80082d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <prvProcessReceivedCommands+0x1c0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	1d39      	adds	r1, r7, #4
 80082d8:	2200      	movs	r2, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fc16 	bl	8006b0c <xQueueReceive>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f47f af2a 	bne.w	800813c <prvProcessReceivedCommands+0x8>
	}
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	3730      	adds	r7, #48	; 0x30
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000fc0 	.word	0x20000fc0

080082f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082fe:	e048      	b.n	8008392 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008300:	4b2d      	ldr	r3, [pc, #180]	; (80083b8 <prvSwitchTimerLists+0xc0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830a:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <prvSwitchTimerLists+0xc0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe f92f 	bl	800657c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d02e      	beq.n	8008392 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	d90e      	bls.n	8008364 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008352:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <prvSwitchTimerLists+0xc0>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3304      	adds	r3, #4
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7fe f8d4 	bl	800650a <vListInsert>
 8008362:	e016      	b.n	8008392 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	2300      	movs	r3, #0
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fd60 	bl	8007e34 <xTimerGenericCommand>
 8008374:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	603b      	str	r3, [r7, #0]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008392:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <prvSwitchTimerLists+0xc0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1b1      	bne.n	8008300 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <prvSwitchTimerLists+0xc0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <prvSwitchTimerLists+0xc4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a04      	ldr	r2, [pc, #16]	; (80083b8 <prvSwitchTimerLists+0xc0>)
 80083a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083aa:	4a04      	ldr	r2, [pc, #16]	; (80083bc <prvSwitchTimerLists+0xc4>)
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	6013      	str	r3, [r2, #0]
}
 80083b0:	bf00      	nop
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000fb8 	.word	0x20000fb8
 80083bc:	20000fbc 	.word	0x20000fbc

080083c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083c6:	f000 f965 	bl	8008694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <prvCheckForValidListAndQueue+0x60>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d120      	bne.n	8008414 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083d2:	4814      	ldr	r0, [pc, #80]	; (8008424 <prvCheckForValidListAndQueue+0x64>)
 80083d4:	f7fe f848 	bl	8006468 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083d8:	4813      	ldr	r0, [pc, #76]	; (8008428 <prvCheckForValidListAndQueue+0x68>)
 80083da:	f7fe f845 	bl	8006468 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <prvCheckForValidListAndQueue+0x6c>)
 80083e0:	4a10      	ldr	r2, [pc, #64]	; (8008424 <prvCheckForValidListAndQueue+0x64>)
 80083e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083e4:	4b12      	ldr	r3, [pc, #72]	; (8008430 <prvCheckForValidListAndQueue+0x70>)
 80083e6:	4a10      	ldr	r2, [pc, #64]	; (8008428 <prvCheckForValidListAndQueue+0x68>)
 80083e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ea:	2300      	movs	r3, #0
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <prvCheckForValidListAndQueue+0x74>)
 80083f0:	4a11      	ldr	r2, [pc, #68]	; (8008438 <prvCheckForValidListAndQueue+0x78>)
 80083f2:	2110      	movs	r1, #16
 80083f4:	200a      	movs	r0, #10
 80083f6:	f7fe f953 	bl	80066a0 <xQueueGenericCreateStatic>
 80083fa:	4603      	mov	r3, r0
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <prvCheckForValidListAndQueue+0x60>)
 80083fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <prvCheckForValidListAndQueue+0x60>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <prvCheckForValidListAndQueue+0x60>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	490b      	ldr	r1, [pc, #44]	; (800843c <prvCheckForValidListAndQueue+0x7c>)
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fd6c 	bl	8006eec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008414:	f000 f96e 	bl	80086f4 <vPortExitCritical>
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000fc0 	.word	0x20000fc0
 8008424:	20000f90 	.word	0x20000f90
 8008428:	20000fa4 	.word	0x20000fa4
 800842c:	20000fb8 	.word	0x20000fb8
 8008430:	20000fbc 	.word	0x20000fbc
 8008434:	2000106c 	.word	0x2000106c
 8008438:	20000fcc 	.word	0x20000fcc
 800843c:	08008d74 	.word	0x08008d74

08008440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3b04      	subs	r3, #4
 8008450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3b04      	subs	r3, #4
 800845e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f023 0201 	bic.w	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3b04      	subs	r3, #4
 800846e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008470:	4a0c      	ldr	r2, [pc, #48]	; (80084a4 <pxPortInitialiseStack+0x64>)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3b14      	subs	r3, #20
 800847a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3b04      	subs	r3, #4
 8008486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f06f 0202 	mvn.w	r2, #2
 800848e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3b20      	subs	r3, #32
 8008494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	080084a9 	.word	0x080084a9

080084a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084b2:	4b12      	ldr	r3, [pc, #72]	; (80084fc <prvTaskExitError+0x54>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ba:	d00a      	beq.n	80084d2 <prvTaskExitError+0x2a>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <prvTaskExitError+0x28>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	60bb      	str	r3, [r7, #8]
}
 80084e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084e6:	bf00      	nop
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0fc      	beq.n	80084e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	2000000c 	.word	0x2000000c

08008500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <pxCurrentTCBConst2>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	f380 8809 	msr	PSP, r0
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8811 	msr	BASEPRI, r0
 800851a:	4770      	bx	lr
 800851c:	f3af 8000 	nop.w

08008520 <pxCurrentTCBConst2>:
 8008520:	20000a90 	.word	0x20000a90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008528:	4808      	ldr	r0, [pc, #32]	; (800854c <prvPortStartFirstTask+0x24>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8814 	msr	CONTROL, r0
 800853a:	b662      	cpsie	i
 800853c:	b661      	cpsie	f
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	df00      	svc	0
 8008548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800854a:	bf00      	nop
 800854c:	e000ed08 	.word	0xe000ed08

08008550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008556:	4b46      	ldr	r3, [pc, #280]	; (8008670 <xPortStartScheduler+0x120>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a46      	ldr	r2, [pc, #280]	; (8008674 <xPortStartScheduler+0x124>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10a      	bne.n	8008576 <xPortStartScheduler+0x26>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008576:	4b3e      	ldr	r3, [pc, #248]	; (8008670 <xPortStartScheduler+0x120>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a3f      	ldr	r2, [pc, #252]	; (8008678 <xPortStartScheduler+0x128>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d10a      	bne.n	8008596 <xPortStartScheduler+0x46>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008596:	4b39      	ldr	r3, [pc, #228]	; (800867c <xPortStartScheduler+0x12c>)
 8008598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	4b31      	ldr	r3, [pc, #196]	; (8008680 <xPortStartScheduler+0x130>)
 80085bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085be:	4b31      	ldr	r3, [pc, #196]	; (8008684 <xPortStartScheduler+0x134>)
 80085c0:	2207      	movs	r2, #7
 80085c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085c4:	e009      	b.n	80085da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <xPortStartScheduler+0x134>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	4a2d      	ldr	r2, [pc, #180]	; (8008684 <xPortStartScheduler+0x134>)
 80085ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d0ef      	beq.n	80085c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085e6:	4b27      	ldr	r3, [pc, #156]	; (8008684 <xPortStartScheduler+0x134>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1c3 0307 	rsb	r3, r3, #7
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d00a      	beq.n	8008608 <xPortStartScheduler+0xb8>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60bb      	str	r3, [r7, #8]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008608:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <xPortStartScheduler+0x134>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <xPortStartScheduler+0x134>)
 8008610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008612:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <xPortStartScheduler+0x134>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800861a:	4a1a      	ldr	r2, [pc, #104]	; (8008684 <xPortStartScheduler+0x134>)
 800861c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008626:	4b18      	ldr	r3, [pc, #96]	; (8008688 <xPortStartScheduler+0x138>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a17      	ldr	r2, [pc, #92]	; (8008688 <xPortStartScheduler+0x138>)
 800862c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <xPortStartScheduler+0x138>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a14      	ldr	r2, [pc, #80]	; (8008688 <xPortStartScheduler+0x138>)
 8008638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800863c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800863e:	f000 f8dd 	bl	80087fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008642:	4b12      	ldr	r3, [pc, #72]	; (800868c <xPortStartScheduler+0x13c>)
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008648:	f000 f8fc 	bl	8008844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800864c:	4b10      	ldr	r3, [pc, #64]	; (8008690 <xPortStartScheduler+0x140>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <xPortStartScheduler+0x140>)
 8008652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008658:	f7ff ff66 	bl	8008528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800865c:	f7ff f856 	bl	800770c <vTaskSwitchContext>
	prvTaskExitError();
 8008660:	f7ff ff22 	bl	80084a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	e000ed00 	.word	0xe000ed00
 8008674:	410fc271 	.word	0x410fc271
 8008678:	410fc270 	.word	0x410fc270
 800867c:	e000e400 	.word	0xe000e400
 8008680:	200010bc 	.word	0x200010bc
 8008684:	200010c0 	.word	0x200010c0
 8008688:	e000ed20 	.word	0xe000ed20
 800868c:	2000000c 	.word	0x2000000c
 8008690:	e000ef34 	.word	0xe000ef34

08008694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	607b      	str	r3, [r7, #4]
}
 80086ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <vPortEnterCritical+0x58>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <vPortEnterCritical+0x58>)
 80086b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <vPortEnterCritical+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d10f      	bne.n	80086e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <vPortEnterCritical+0x5c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	603b      	str	r3, [r7, #0]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <vPortEnterCritical+0x4a>
	}
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000000c 	.word	0x2000000c
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <vPortExitCritical+0x50>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10a      	bne.n	8008718 <vPortExitCritical+0x24>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	607b      	str	r3, [r7, #4]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <vPortExitCritical+0x50>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3b01      	subs	r3, #1
 800871e:	4a09      	ldr	r2, [pc, #36]	; (8008744 <vPortExitCritical+0x50>)
 8008720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <vPortExitCritical+0x50>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <vPortExitCritical+0x42>
 800872a:	2300      	movs	r3, #0
 800872c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f383 8811 	msr	BASEPRI, r3
}
 8008734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000000c 	.word	0x2000000c
	...

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f01e 0f10 	tst.w	lr, #16
 8008760:	bf08      	it	eq
 8008762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008774:	f380 8811 	msr	BASEPRI, r0
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f7fe ffc4 	bl	800770c <vTaskSwitchContext>
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f380 8811 	msr	BASEPRI, r0
 800878c:	bc09      	pop	{r0, r3}
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	6808      	ldr	r0, [r1, #0]
 8008792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	f01e 0f10 	tst.w	lr, #16
 800879a:	bf08      	it	eq
 800879c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087a0:	f380 8809 	msr	PSP, r0
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst>:
 80087b0:	20000a90 	.word	0x20000a90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087d2:	f7fe fee1 	bl	8007598 <xTaskIncrementTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <xPortSysTickHandler+0x40>)
 80087de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
}
 80087ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <vPortSetupTimerInterrupt+0x38>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <vPortSetupTimerInterrupt+0x3c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	; (800883c <vPortSetupTimerInterrupt+0x40>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	4a09      	ldr	r2, [pc, #36]	; (8008840 <vPortSetupTimerInterrupt+0x44>)
 800881a:	3b01      	subs	r3, #1
 800881c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800881e:	4b04      	ldr	r3, [pc, #16]	; (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008820:	2207      	movs	r2, #7
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e010 	.word	0xe000e010
 8008834:	e000e018 	.word	0xe000e018
 8008838:	20000000 	.word	0x20000000
 800883c:	10624dd3 	.word	0x10624dd3
 8008840:	e000e014 	.word	0xe000e014

08008844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008854 <vPortEnableVFP+0x10>
 8008848:	6801      	ldr	r1, [r0, #0]
 800884a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800884e:	6001      	str	r1, [r0, #0]
 8008850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008852:	bf00      	nop
 8008854:	e000ed88 	.word	0xe000ed88

08008858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800885e:	f3ef 8305 	mrs	r3, IPSR
 8008862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d914      	bls.n	8008894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <vPortValidateInterruptPriority+0x70>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008874:	4b15      	ldr	r3, [pc, #84]	; (80088cc <vPortValidateInterruptPriority+0x74>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	429a      	cmp	r2, r3
 800887c:	d20a      	bcs.n	8008894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008894:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <vPortValidateInterruptPriority+0x78>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800889c:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <vPortValidateInterruptPriority+0x7c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d90a      	bls.n	80088ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	603b      	str	r3, [r7, #0]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <vPortValidateInterruptPriority+0x60>
	}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	e000e3f0 	.word	0xe000e3f0
 80088cc:	200010bc 	.word	0x200010bc
 80088d0:	e000ed0c 	.word	0xe000ed0c
 80088d4:	200010c0 	.word	0x200010c0

080088d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	; 0x28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088e4:	f7fe fd9c 	bl	8007420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088e8:	4b5b      	ldr	r3, [pc, #364]	; (8008a58 <pvPortMalloc+0x180>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f0:	f000 f920 	bl	8008b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088f4:	4b59      	ldr	r3, [pc, #356]	; (8008a5c <pvPortMalloc+0x184>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 8093 	bne.w	8008a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01d      	beq.n	8008944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008908:	2208      	movs	r2, #8
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d014      	beq.n	8008944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f023 0307 	bic.w	r3, r3, #7
 8008920:	3308      	adds	r3, #8
 8008922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <pvPortMalloc+0x6c>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	617b      	str	r3, [r7, #20]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d06e      	beq.n	8008a28 <pvPortMalloc+0x150>
 800894a:	4b45      	ldr	r3, [pc, #276]	; (8008a60 <pvPortMalloc+0x188>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d869      	bhi.n	8008a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008954:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <pvPortMalloc+0x18c>)
 8008956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008958:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <pvPortMalloc+0x18c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800895e:	e004      	b.n	800896a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d903      	bls.n	800897c <pvPortMalloc+0xa4>
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f1      	bne.n	8008960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800897c:	4b36      	ldr	r3, [pc, #216]	; (8008a58 <pvPortMalloc+0x180>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	429a      	cmp	r2, r3
 8008984:	d050      	beq.n	8008a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2208      	movs	r2, #8
 800898c:	4413      	add	r3, r2
 800898e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	1ad2      	subs	r2, r2, r3
 80089a0:	2308      	movs	r3, #8
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d91f      	bls.n	80089e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4413      	add	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <pvPortMalloc+0xf8>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	613b      	str	r3, [r7, #16]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089e2:	69b8      	ldr	r0, [r7, #24]
 80089e4:	f000 f908 	bl	8008bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089e8:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <pvPortMalloc+0x188>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <pvPortMalloc+0x188>)
 80089f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <pvPortMalloc+0x188>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <pvPortMalloc+0x190>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d203      	bcs.n	8008a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a02:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <pvPortMalloc+0x188>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a18      	ldr	r2, [pc, #96]	; (8008a68 <pvPortMalloc+0x190>)
 8008a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <pvPortMalloc+0x184>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <pvPortMalloc+0x194>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <pvPortMalloc+0x194>)
 8008a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a28:	f7fe fd08 	bl	800743c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <pvPortMalloc+0x174>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60fb      	str	r3, [r7, #12]
}
 8008a48:	bf00      	nop
 8008a4a:	e7fe      	b.n	8008a4a <pvPortMalloc+0x172>
	return pvReturn;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3728      	adds	r7, #40	; 0x28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20004ccc 	.word	0x20004ccc
 8008a5c:	20004ce0 	.word	0x20004ce0
 8008a60:	20004cd0 	.word	0x20004cd0
 8008a64:	20004cc4 	.word	0x20004cc4
 8008a68:	20004cd4 	.word	0x20004cd4
 8008a6c:	20004cd8 	.word	0x20004cd8

08008a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d04d      	beq.n	8008b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a82:	2308      	movs	r3, #8
 8008a84:	425b      	negs	r3, r3
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4413      	add	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <vPortFree+0xb8>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <vPortFree+0x44>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60fb      	str	r3, [r7, #12]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <vPortFree+0x62>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60bb      	str	r3, [r7, #8]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <vPortFree+0xb8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01e      	beq.n	8008b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11a      	bne.n	8008b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <vPortFree+0xb8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	43db      	mvns	r3, r3
 8008af2:	401a      	ands	r2, r3
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008af8:	f7fe fc92 	bl	8007420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <vPortFree+0xbc>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4413      	add	r3, r2
 8008b06:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <vPortFree+0xbc>)
 8008b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b0a:	6938      	ldr	r0, [r7, #16]
 8008b0c:	f000 f874 	bl	8008bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <vPortFree+0xc0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3301      	adds	r3, #1
 8008b16:	4a06      	ldr	r2, [pc, #24]	; (8008b30 <vPortFree+0xc0>)
 8008b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b1a:	f7fe fc8f 	bl	800743c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20004ce0 	.word	0x20004ce0
 8008b2c:	20004cd0 	.word	0x20004cd0
 8008b30:	20004cdc 	.word	0x20004cdc

08008b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b40:	4b27      	ldr	r3, [pc, #156]	; (8008be0 <prvHeapInit+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00c      	beq.n	8008b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3307      	adds	r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0307 	bic.w	r3, r3, #7
 8008b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <prvHeapInit+0xac>)
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <prvHeapInit+0xb0>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <prvHeapInit+0xb0>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b80:	2208      	movs	r2, #8
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <prvHeapInit+0xb4>)
 8008b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <prvHeapInit+0xb4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <prvHeapInit+0xb4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvHeapInit+0xb4>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <prvHeapInit+0xb8>)
 8008bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <prvHeapInit+0xbc>)
 8008bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <prvHeapInit+0xc0>)
 8008bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	200010c4 	.word	0x200010c4
 8008be4:	20004cc4 	.word	0x20004cc4
 8008be8:	20004ccc 	.word	0x20004ccc
 8008bec:	20004cd4 	.word	0x20004cd4
 8008bf0:	20004cd0 	.word	0x20004cd0
 8008bf4:	20004ce0 	.word	0x20004ce0

08008bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <prvInsertBlockIntoFreeList+0xac>)
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e002      	b.n	8008c0c <prvInsertBlockIntoFreeList+0x14>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d8f7      	bhi.n	8008c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4413      	add	r3, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d108      	bne.n	8008c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	441a      	add	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d118      	bne.n	8008c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d00d      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	441a      	add	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	e008      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e003      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d002      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20004cc4 	.word	0x20004cc4
 8008ca8:	20004ccc 	.word	0x20004ccc

08008cac <__libc_init_array>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	4d0d      	ldr	r5, [pc, #52]	; (8008ce4 <__libc_init_array+0x38>)
 8008cb0:	4c0d      	ldr	r4, [pc, #52]	; (8008ce8 <__libc_init_array+0x3c>)
 8008cb2:	1b64      	subs	r4, r4, r5
 8008cb4:	10a4      	asrs	r4, r4, #2
 8008cb6:	2600      	movs	r6, #0
 8008cb8:	42a6      	cmp	r6, r4
 8008cba:	d109      	bne.n	8008cd0 <__libc_init_array+0x24>
 8008cbc:	4d0b      	ldr	r5, [pc, #44]	; (8008cec <__libc_init_array+0x40>)
 8008cbe:	4c0c      	ldr	r4, [pc, #48]	; (8008cf0 <__libc_init_array+0x44>)
 8008cc0:	f000 f82e 	bl	8008d20 <_init>
 8008cc4:	1b64      	subs	r4, r4, r5
 8008cc6:	10a4      	asrs	r4, r4, #2
 8008cc8:	2600      	movs	r6, #0
 8008cca:	42a6      	cmp	r6, r4
 8008ccc:	d105      	bne.n	8008cda <__libc_init_array+0x2e>
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd4:	4798      	blx	r3
 8008cd6:	3601      	adds	r6, #1
 8008cd8:	e7ee      	b.n	8008cb8 <__libc_init_array+0xc>
 8008cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cde:	4798      	blx	r3
 8008ce0:	3601      	adds	r6, #1
 8008ce2:	e7f2      	b.n	8008cca <__libc_init_array+0x1e>
 8008ce4:	08008e10 	.word	0x08008e10
 8008ce8:	08008e10 	.word	0x08008e10
 8008cec:	08008e10 	.word	0x08008e10
 8008cf0:	08008e14 	.word	0x08008e14

08008cf4 <memcpy>:
 8008cf4:	440a      	add	r2, r1
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008cfc:	d100      	bne.n	8008d00 <memcpy+0xc>
 8008cfe:	4770      	bx	lr
 8008d00:	b510      	push	{r4, lr}
 8008d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	d1f9      	bne.n	8008d02 <memcpy+0xe>
 8008d0e:	bd10      	pop	{r4, pc}

08008d10 <memset>:
 8008d10:	4402      	add	r2, r0
 8008d12:	4603      	mov	r3, r0
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d100      	bne.n	8008d1a <memset+0xa>
 8008d18:	4770      	bx	lr
 8008d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1e:	e7f9      	b.n	8008d14 <memset+0x4>

08008d20 <_init>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	bf00      	nop
 8008d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d26:	bc08      	pop	{r3}
 8008d28:	469e      	mov	lr, r3
 8008d2a:	4770      	bx	lr

08008d2c <_fini>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr
