
Main_Board_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800a838  0800a838  0001a838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af70  0800af70  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800af70  0800af70  0001af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af78  0800af78  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800af80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020148  2**0
                  CONTENTS
 10 .bss          00000598  20000148  20000148  00020148  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006e0  200006e0  00020148  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001612d  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339c  00000000  00000000  000362a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00039648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0003aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025687  00000000  00000000  0003bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185d0  00000000  00000000  0006137f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df7ec  00000000  00000000  0007994f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015913b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000607c  00000000  00000000  0015918c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000148 	.word	0x20000148
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a820 	.word	0x0800a820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	0800a820 	.word	0x0800a820

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <PID_Position_Init>:
#include "PID_Position.h"

void PID_Position_Init(PIDPosition *pid, int N_input) {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]

	for(int i = 0; i< N_input; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e03e      	b.n	8000f9e <PID_Position_Init+0x8e>
	{
		pid->integrator[i] = 0.0f;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	330c      	adds	r3, #12
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
		pid->prevError[i] = 0.0f;
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3310      	adds	r3, #16
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		
		pid->differentiator[i]  = 0.0f;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3312      	adds	r3, #18
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
		pid->prevMeasurement[i] = 0.0f;
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3316      	adds	r3, #22
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
		pid->error_est[i] = 0.0f;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	330a      	adds	r3, #10
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
		pid->derror[i] = 0.0f;
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3306      	adds	r3, #6
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

		pid->out[i] = 0.0f;
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3304      	adds	r3, #4
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
	for(int i = 0; i< N_input; i++)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbbc      	blt.n	8000f20 <PID_Position_Init+0x10>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <PID_Position>:

float PID_Position(PIDPosition *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b08b      	sub	sp, #44	; 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	61f8      	str	r0, [r7, #28]
 8000fbc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fc0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fc4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fc8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000fcc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000fd0:	6079      	str	r1, [r7, #4]
	float error = setpoint - measurement;
 8000fd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float propotional = Kp*error;
 8000fe2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->integrator[i] = pid->integrator[i] + 0.5f * Ki *(error + pid->prevError[i])*pid->T;
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	edd7 7a03 	vldr	s15, [r7, #12]
 8001006:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800100a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3310      	adds	r3, #16
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	ed93 6a00 	vldr	s12, [r3]
 800101c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001020:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	edd3 7a05 	vldr	s15, [r3, #20]
 800102e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	330c      	adds	r3, #12
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	edc3 7a00 	vstr	s15, [r3]
	/* Anti-wind-up via integrator clamping */
    	if (pid->integrator[i] > pid->limMaxInt) {
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	330c      	adds	r3, #12
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3304      	adds	r3, #4
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	edd3 7a04 	vldr	s15, [r3, #16]
 800105c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	dd09      	ble.n	800107a <PID_Position+0xc6>
        	pid->integrator[i] = pid->limMaxInt;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	69f9      	ldr	r1, [r7, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	330c      	adds	r3, #12
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e027      	b.n	80010ca <PID_Position+0x116>
    	}
    	else if (pid->integrator[i] < pid->limMinInt) {
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330c      	adds	r3, #12
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3304      	adds	r3, #4
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d509      	bpl.n	80010ae <PID_Position+0xfa>
        	pid->integrator[i] = pid->limMinInt;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	330c      	adds	r3, #12
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3304      	adds	r3, #4
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00d      	b.n	80010ca <PID_Position+0x116>
    	}
    	else{
    		pid->integrator[i] = pid->integrator[i];
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	330c      	adds	r3, #12
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3304      	adds	r3, #4
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	69f9      	ldr	r1, [r7, #28]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	330c      	adds	r3, #12
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3304      	adds	r3, #4
 80010c8:	601a      	str	r2, [r3, #0]
    	}
    	
    	/* Lowpass filter */

	pid->error_est[i] = error - pid->prevError[i];
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3310      	adds	r3, #16
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	330a      	adds	r3, #10
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	edc3 7a00 	vstr	s15, [r3]
	pid->derror[i] = (1 - pid->alpha) * pid->derror[i] + pid->alpha * pid->error_est[i];
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	edd3 6a06 	vldr	s13, [r3, #24]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	330a      	adds	r3, #10
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3306      	adds	r3, #6
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3304      	adds	r3, #4
 8001138:	edc3 7a00 	vstr	s15, [r3]
	pid->differentiator[i] = Kd*(pid->derror[i]/pid->T);
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3306      	adds	r3, #6
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	edd3 6a00 	vldr	s13, [r3]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3312      	adds	r3, #18
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3304      	adds	r3, #4
 800116a:	edc3 7a00 	vstr	s15, [r3]
//	pid->differentiator[i] = pid->alpha*Kd*(error - pid->prevError[i])/pid->T + (1-pid->alpha)*pid->differentiator[i];

	pid->out[i] = propotional + pid->integrator[i] + pid->differentiator[i];
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	330c      	adds	r3, #12
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3312      	adds	r3, #18
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3304      	adds	r3, #4
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3318      	adds	r3, #24
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3304      	adds	r3, #4
 80011a6:	edc3 7a00 	vstr	s15, [r3]
	//satuaration in  pid->out[i];
    	if (pid->out[i] > pid->limMax) {
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3318      	adds	r3, #24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd09      	ble.n	80011de <PID_Position+0x22a>
        	pid->out[i] = pid->limMax;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69f9      	ldr	r1, [r7, #28]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3318      	adds	r3, #24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3304      	adds	r3, #4
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e027      	b.n	800122e <PID_Position+0x27a>
    	}
    	else if (pid->out[i] < pid->limMin) {
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3304      	adds	r3, #4
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d509      	bpl.n	8001212 <PID_Position+0x25e>
        	pid->out[i] = pid->limMin;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	69f9      	ldr	r1, [r7, #28]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3318      	adds	r3, #24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	3304      	adds	r3, #4
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e00d      	b.n	800122e <PID_Position+0x27a>
    	}
    	else{
    		pid->out[i] = pid->out[i];
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3318      	adds	r3, #24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69f9      	ldr	r1, [r7, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3318      	adds	r3, #24
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3304      	adds	r3, #4
 800122c:	601a      	str	r2, [r3, #0]
    	}
    pid->prevError[i] = error;
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3310      	adds	r3, #16
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	601a      	str	r2, [r3, #0]
	return pid->out[i];
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3318      	adds	r3, #24
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	ee07 3a90 	vmov	s15, r3
}
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	372c      	adds	r7, #44	; 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001270:	4a28      	ldr	r2, [pc, #160]	; (8001314 <MX_ADC1_Init+0xb8>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MX_ADC1_Init+0xb4>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001284:	2201      	movs	r2, #1
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_ADC1_Init+0xb4>)
 800128a:	2201      	movs	r2, #1
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_ADC1_Init+0xb4>)
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <MX_ADC1_Init+0xbc>)
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012be:	f002 ff3d 	bl	800413c <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f002 f9d0 	bl	800366c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012cc:	230a      	movs	r3, #10
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012de:	f003 f89f 	bl	8004420 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f002 f9c0 	bl	800366c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012ec:	230b      	movs	r3, #11
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012fa:	f003 f891 	bl	8004420 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001304:	f002 f9b2 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000164 	.word	0x20000164
 8001314:	40012000 	.word	0x40012000
 8001318:	0f000001 	.word	0x0f000001

0800131c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d157      	bne.n	80013ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001376:	2303      	movs	r3, #3
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	481d      	ldr	r0, [pc, #116]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 800138a:	f004 fdcd 	bl	8005f28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_ADC_MspInit+0xec>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013d2:	480c      	ldr	r0, [pc, #48]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013d4:	f004 fa38 	bl	8005848 <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013de:	f002 f945 	bl	800366c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40012000 	.word	0x40012000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	200001ac 	.word	0x200001ac
 8001408:	40026410 	.word	0x40026410

0800140c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	2007      	movs	r0, #7
 800141c:	f000 fc32 	bl	8001c84 <bno055_writeData>
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	203d      	movs	r0, #61	; 0x3d
 8001438:	f000 fc24 	bl	8001c84 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001442:	2013      	movs	r0, #19
 8001444:	f000 fc12 	bl	8001c6c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001448:	e002      	b.n	8001450 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800144a:	2007      	movs	r0, #7
 800144c:	f000 fc0e 	bl	8001c6c <bno055_delay>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ffe3 	bl	8001428 <bno055_setOperationMode>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}

08001466 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800146a:	200c      	movs	r0, #12
 800146c:	f7ff ffdc 	bl	8001428 <bno055_setOperationMode>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001478:	2120      	movs	r1, #32
 800147a:	203f      	movs	r0, #63	; 0x3f
 800147c:	f000 fc02 	bl	8001c84 <bno055_writeData>
  bno055_delay(700);
 8001480:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001484:	f000 fbf2 	bl	8001c6c <bno055_delay>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  bno055_reset();
 8001492:	f7ff ffef 	bl	8001474 <bno055_reset>

  uint8_t id = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	2201      	movs	r2, #1
 800149e:	4619      	mov	r1, r3
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 fcdb 	bl	8001e5c <bno055_readData>
  if (id != BNO055_ID) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2ba0      	cmp	r3, #160	; 0xa0
 80014aa:	d004      	beq.n	80014b6 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <bno055_setup+0x4c>)
 80014b2:	f007 f99d 	bl	80087f0 <iprintf>
  }
  bno055_setPage(0);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff ffa8 	bl	800140c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80014bc:	2100      	movs	r1, #0
 80014be:	203f      	movs	r0, #63	; 0x3f
 80014c0:	f000 fbe0 	bl	8001c84 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80014c4:	f7ff ffc8 	bl	8001458 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f000 fbcf 	bl	8001c6c <bno055_delay>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800a838 	.word	0x0800a838

080014dc <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80014dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e0:	b09e      	sub	sp, #120	; 0x78
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ff8e 	bl	800140c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80014f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d108      	bne.n	800150a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80014f8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80014fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001500:	2208      	movs	r2, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fcaa 	bl	8001e5c <bno055_readData>
 8001508:	e007      	b.n	800151a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800150a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800150e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001512:	2206      	movs	r2, #6
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fca1 	bl	8001e5c <bno055_readData>

  double scale = 1;
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	4b8b      	ldr	r3, [pc, #556]	; (800174c <bno055_getVector+0x270>)
 8001520:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	2b0e      	cmp	r3, #14
 800152a:	d109      	bne.n	8001540 <bno055_getVector+0x64>
    scale = magScale;
 800152c:	4b88      	ldr	r3, [pc, #544]	; (8001750 <bno055_getVector+0x274>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffdf 	bl	80004f4 <__aeabi_ui2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800153e:	e03e      	b.n	80015be <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001544:	2b08      	cmp	r3, #8
 8001546:	d007      	beq.n	8001558 <bno055_getVector+0x7c>
 8001548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154c:	2b28      	cmp	r3, #40	; 0x28
 800154e:	d003      	beq.n	8001558 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001554:	2b2e      	cmp	r3, #46	; 0x2e
 8001556:	d109      	bne.n	800156c <bno055_getVector+0x90>
    scale = accelScale;
 8001558:	4b7e      	ldr	r3, [pc, #504]	; (8001754 <bno055_getVector+0x278>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffc9 	bl	80004f4 <__aeabi_ui2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800156a:	e028      	b.n	80015be <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800156c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001570:	2b14      	cmp	r3, #20
 8001572:	d109      	bne.n	8001588 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001574:	4b78      	ldr	r3, [pc, #480]	; (8001758 <bno055_getVector+0x27c>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffbb 	bl	80004f4 <__aeabi_ui2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001586:	e01a      	b.n	80015be <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800158c:	2b1a      	cmp	r3, #26
 800158e:	d109      	bne.n	80015a4 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001590:	4b72      	ldr	r3, [pc, #456]	; (800175c <bno055_getVector+0x280>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffad 	bl	80004f4 <__aeabi_ui2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80015a2:	e00c      	b.n	80015be <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80015a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d108      	bne.n	80015be <bno055_getVector+0xe2>
    scale = quaScale;
 80015ac:	4b6c      	ldr	r3, [pc, #432]	; (8001760 <bno055_getVector+0x284>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff9f 	bl	80004f4 <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80015be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c2:	2220      	movs	r2, #32
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f007 f90a 	bl	80087e0 <memset>
    if (vec == BNO055_VECTOR_QUATERNION) {
 80015cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d150      	bne.n	8001676 <bno055_getVector+0x19a>
      xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015d4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff94 	bl	8000514 <__aeabi_i2d>
 80015ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015f0:	f7ff f924 	bl	800083c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80015fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21b      	sxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff80 	bl	8000514 <__aeabi_i2d>
 8001614:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001618:	f7ff f910 	bl	800083c <__aeabi_ddiv>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001624:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff6c 	bl	8000514 <__aeabi_i2d>
 800163c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001640:	f7ff f8fc 	bl	800083c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800164c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff58 	bl	8000514 <__aeabi_i2d>
 8001664:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001668:	f7ff f8e8 	bl	800083c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001674:	e03b      	b.n	80016ee <bno055_getVector+0x212>
    } else {
      xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001676:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21b      	sxth	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff43 	bl	8000514 <__aeabi_i2d>
 800168e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001692:	f7ff f8d3 	bl	800083c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800169e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff2f 	bl	8000514 <__aeabi_i2d>
 80016b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016ba:	f7ff f8bf 	bl	800083c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80016c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff1b 	bl	8000514 <__aeabi_i2d>
 80016de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016e2:	f7ff f8ab 	bl	800083c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return xyz;
 80016ee:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80016f2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001702:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001706:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800170a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800170e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001712:	ec49 8b14 	vmov	d4, r8, r9
 8001716:	ec45 4b15 	vmov	d5, r4, r5
 800171a:	ec41 0b16 	vmov	d6, r0, r1
 800171e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8001722:	eeb0 0a44 	vmov.f32	s0, s8
 8001726:	eef0 0a64 	vmov.f32	s1, s9
 800172a:	eeb0 1a45 	vmov.f32	s2, s10
 800172e:	eef0 1a65 	vmov.f32	s3, s11
 8001732:	eeb0 2a46 	vmov.f32	s4, s12
 8001736:	eef0 2a66 	vmov.f32	s5, s13
 800173a:	eeb0 3a47 	vmov.f32	s6, s14
 800173e:	eef0 3a67 	vmov.f32	s7, s15
 8001742:	3778      	adds	r7, #120	; 0x78
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800174a:	bf00      	nop
 800174c:	3ff00000 	.word	0x3ff00000
 8001750:	20000006 	.word	0x20000006
 8001754:	20000000 	.word	0x20000000
 8001758:	20000002 	.word	0x20000002
 800175c:	20000004 	.word	0x20000004
 8001760:	20000008 	.word	0x20000008

08001764 <bno055_getVectorQuaternion>:
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
  }
  bno055_vector_t bno055_getVectorGravity() {
    return bno055_getVector(BNO055_VECTOR_GRAVITY);
  }
  bno055_vector_t bno055_getVectorQuaternion() {
 8001764:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001768:	b090      	sub	sp, #64	; 0x40
 800176a:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800176c:	2020      	movs	r0, #32
 800176e:	f7ff feb5 	bl	80014dc <bno055_getVector>
 8001772:	eeb0 4a40 	vmov.f32	s8, s0
 8001776:	eef0 4a60 	vmov.f32	s9, s1
 800177a:	eeb0 5a41 	vmov.f32	s10, s2
 800177e:	eef0 5a61 	vmov.f32	s11, s3
 8001782:	eeb0 6a42 	vmov.f32	s12, s4
 8001786:	eef0 6a62 	vmov.f32	s13, s5
 800178a:	eeb0 7a43 	vmov.f32	s14, s6
 800178e:	eef0 7a63 	vmov.f32	s15, s7
 8001792:	ed87 4b08 	vstr	d4, [r7, #32]
 8001796:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800179a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800179e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80017a2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017a6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80017aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017b2:	ec49 8b14 	vmov	d4, r8, r9
 80017b6:	ec45 4b15 	vmov	d5, r4, r5
 80017ba:	ec41 0b16 	vmov	d6, r0, r1
 80017be:	ec43 2b17 	vmov	d7, r2, r3
  }
 80017c2:	eeb0 0a44 	vmov.f32	s0, s8
 80017c6:	eef0 0a64 	vmov.f32	s1, s9
 80017ca:	eeb0 1a45 	vmov.f32	s2, s10
 80017ce:	eef0 1a65 	vmov.f32	s3, s11
 80017d2:	eeb0 2a46 	vmov.f32	s4, s12
 80017d6:	eef0 2a66 	vmov.f32	s5, s13
 80017da:	eeb0 3a47 	vmov.f32	s6, s14
 80017de:	eef0 3a67 	vmov.f32	s7, s15
 80017e2:	3740      	adds	r7, #64	; 0x40
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080017ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <MX_CAN1_Init+0x9c>)
 80017f4:	4a25      	ldr	r2, [pc, #148]	; (800188c <MX_CAN1_Init+0xa0>)
 80017f6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_CAN1_Init+0x9c>)
 80017fa:	2206      	movs	r2, #6
 80017fc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_CAN1_Init+0x9c>)
 800180c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001810:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001814:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001818:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_CAN1_Init+0x9c>)
 800181c:	2200      	movs	r2, #0
 800181e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001822:	2200      	movs	r2, #0
 8001824:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001828:	2200      	movs	r2, #0
 800182a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_CAN1_Init+0x9c>)
 800182e:	2200      	movs	r2, #0
 8001830:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001834:	2200      	movs	r2, #0
 8001836:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_CAN1_Init+0x9c>)
 800183a:	2200      	movs	r2, #0
 800183c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_CAN1_Init+0x9c>)
 8001840:	f003 f88e 	bl	8004960 <HAL_CAN_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800184a:	f001 ff0f 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 8001872:	230e      	movs	r3, #14
 8001874:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001876:	463b      	mov	r3, r7
 8001878:	4619      	mov	r1, r3
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <MX_CAN1_Init+0x9c>)
 800187c:	f003 f96c 	bl	8004b58 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000020c 	.word	0x2000020c
 800188c:	40006400 	.word	0x40006400

08001890 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_CAN_MspInit+0x94>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d134      	bne.n	800191c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018fc:	2309      	movs	r3, #9
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <HAL_CAN_MspInit+0x9c>)
 8001908:	f004 fb0e 	bl	8005f28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2014      	movs	r0, #20
 8001912:	f003 ff62 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001916:	2014      	movs	r0, #20
 8001918:	f003 ff7b 	bl	8005812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40006400 	.word	0x40006400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020400 	.word	0x40020400

08001930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_DMA_Init+0x3c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <MX_DMA_Init+0x3c>)
 8001940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_DMA_Init+0x3c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2038      	movs	r0, #56	; 0x38
 8001958:	f003 ff3f 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800195c:	2038      	movs	r0, #56	; 0x38
 800195e:	f003 ff58 	bl	8005812 <HAL_NVIC_EnableIRQ>

}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <MX_GPIO_Init+0x120>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a40      	ldr	r2, [pc, #256]	; (8001a90 <MX_GPIO_Init+0x120>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <MX_GPIO_Init+0x120>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a39      	ldr	r2, [pc, #228]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <MX_GPIO_Init+0x120>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <MX_GPIO_Init+0x120>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <MX_GPIO_Init+0x120>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIr3_Pin|Air1_Pin|Air2_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f244 0130 	movw	r1, #16432	; 0x4030
 8001a18:	481e      	ldr	r0, [pc, #120]	; (8001a94 <MX_GPIO_Init+0x124>)
 8001a1a:	f004 fc21 	bl	8006260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AIr3_Pin|Air1_Pin|Air2_Pin;
 8001a1e:	f244 0330 	movw	r3, #16432	; 0x4030
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <MX_GPIO_Init+0x124>)
 8001a38:	f004 fa76 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_GPIO_Init+0x128>)
 8001a52:	f004 fa69 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4809      	ldr	r0, [pc, #36]	; (8001a98 <MX_GPIO_Init+0x128>)
 8001a74:	f004 fa58 	bl	8005f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2017      	movs	r0, #23
 8001a7e:	f003 feac 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a82:	2017      	movs	r0, #23
 8001a84:	f003 fec5 	bl	8005812 <HAL_NVIC_EnableIRQ>

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800

08001a9c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f004 fbff 	bl	80062dc <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f001 fdc2 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000234 	.word	0x20000234
 8001af0:	40005400 	.word	0x40005400
 8001af4:	00061a80 	.word	0x00061a80

08001af8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <MX_I2C2_Init+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <MX_I2C2_Init+0x58>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b36:	f004 fbd1 	bl	80062dc <HAL_I2C_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b40:	f001 fd94 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000288 	.word	0x20000288
 8001b4c:	40005800 	.word	0x40005800
 8001b50:	00061a80 	.word	0x00061a80

08001b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_I2C_MspInit+0xe8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a30      	ldr	r2, [pc, #192]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b96:	2312      	movs	r3, #18
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4825      	ldr	r0, [pc, #148]	; (8001c44 <HAL_I2C_MspInit+0xf0>)
 8001bae:	f004 f9bb 	bl	8005f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bce:	e031      	b.n	8001c34 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_I2C_MspInit+0xf4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_I2C_MspInit+0xf0>)
 8001c14:	f004 f988 	bl	8005f28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40005800 	.word	0x40005800

08001c4c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <bno055_assignI2C+0x1c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	200002dc 	.word	0x200002dc

08001c6c <bno055_delay>:

void bno055_delay(int time) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 fa3c 	bl	80040f4 <HAL_Delay>
#endif
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	733b      	strb	r3, [r7, #12]
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <bno055_writeData+0x184>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f107 020c 	add.w	r2, r7, #12
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2302      	movs	r3, #2
 8001caa:	2150      	movs	r1, #80	; 0x50
 8001cac:	f004 fc5a 	bl	8006564 <HAL_I2C_Master_Transmit>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80a0 	beq.w	8001dfc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d103      	bne.n	8001cca <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001cc2:	4852      	ldr	r0, [pc, #328]	; (8001e0c <bno055_writeData+0x188>)
 8001cc4:	f006 fe1a 	bl	80088fc <puts>
 8001cc8:	e012      	b.n	8001cf0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d103      	bne.n	8001cd8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001cd0:	484f      	ldr	r0, [pc, #316]	; (8001e10 <bno055_writeData+0x18c>)
 8001cd2:	f006 fe13 	bl	80088fc <puts>
 8001cd6:	e00b      	b.n	8001cf0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d103      	bne.n	8001ce6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001cde:	484d      	ldr	r0, [pc, #308]	; (8001e14 <bno055_writeData+0x190>)
 8001ce0:	f006 fe0c 	bl	80088fc <puts>
 8001ce4:	e004      	b.n	8001cf0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	484b      	ldr	r0, [pc, #300]	; (8001e18 <bno055_writeData+0x194>)
 8001cec:	f006 fd80 	bl	80087f0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001cf0:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <bno055_writeData+0x184>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 ff67 	bl	8006bc8 <HAL_I2C_GetError>
 8001cfa:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d07e      	beq.n	8001e00 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d103      	bne.n	8001d10 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001d08:	4844      	ldr	r0, [pc, #272]	; (8001e1c <bno055_writeData+0x198>)
 8001d0a:	f006 fdf7 	bl	80088fc <puts>
 8001d0e:	e021      	b.n	8001d54 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d103      	bne.n	8001d1e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001d16:	4842      	ldr	r0, [pc, #264]	; (8001e20 <bno055_writeData+0x19c>)
 8001d18:	f006 fdf0 	bl	80088fc <puts>
 8001d1c:	e01a      	b.n	8001d54 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d103      	bne.n	8001d2c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001d24:	483f      	ldr	r0, [pc, #252]	; (8001e24 <bno055_writeData+0x1a0>)
 8001d26:	f006 fde9 	bl	80088fc <puts>
 8001d2a:	e013      	b.n	8001d54 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d103      	bne.n	8001d3a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001d32:	483d      	ldr	r0, [pc, #244]	; (8001e28 <bno055_writeData+0x1a4>)
 8001d34:	f006 fde2 	bl	80088fc <puts>
 8001d38:	e00c      	b.n	8001d54 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d103      	bne.n	8001d48 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001d40:	483a      	ldr	r0, [pc, #232]	; (8001e2c <bno055_writeData+0x1a8>)
 8001d42:	f006 fddb 	bl	80088fc <puts>
 8001d46:	e005      	b.n	8001d54 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d102      	bne.n	8001d54 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001d4e:	4838      	ldr	r0, [pc, #224]	; (8001e30 <bno055_writeData+0x1ac>)
 8001d50:	f006 fdd4 	bl	80088fc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <bno055_writeData+0x184>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 ff27 	bl	8006bac <HAL_I2C_GetState>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001d68:	4832      	ldr	r0, [pc, #200]	; (8001e34 <bno055_writeData+0x1b0>)
 8001d6a:	f006 fdc7 	bl	80088fc <puts>
 8001d6e:	e048      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d103      	bne.n	8001d7e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001d76:	482f      	ldr	r0, [pc, #188]	; (8001e34 <bno055_writeData+0x1b0>)
 8001d78:	f006 fdc0 	bl	80088fc <puts>
 8001d7c:	e041      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b24      	cmp	r3, #36	; 0x24
 8001d82:	d103      	bne.n	8001d8c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001d84:	482c      	ldr	r0, [pc, #176]	; (8001e38 <bno055_writeData+0x1b4>)
 8001d86:	f006 fdb9 	bl	80088fc <puts>
 8001d8a:	e03a      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b21      	cmp	r3, #33	; 0x21
 8001d90:	d103      	bne.n	8001d9a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001d92:	482a      	ldr	r0, [pc, #168]	; (8001e3c <bno055_writeData+0x1b8>)
 8001d94:	f006 fdb2 	bl	80088fc <puts>
 8001d98:	e033      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	2b22      	cmp	r3, #34	; 0x22
 8001d9e:	d103      	bne.n	8001da8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001da0:	4827      	ldr	r0, [pc, #156]	; (8001e40 <bno055_writeData+0x1bc>)
 8001da2:	f006 fdab 	bl	80088fc <puts>
 8001da6:	e02c      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b28      	cmp	r3, #40	; 0x28
 8001dac:	d103      	bne.n	8001db6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001dae:	4825      	ldr	r0, [pc, #148]	; (8001e44 <bno055_writeData+0x1c0>)
 8001db0:	f006 fda4 	bl	80088fc <puts>
 8001db4:	e025      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b29      	cmp	r3, #41	; 0x29
 8001dba:	d103      	bne.n	8001dc4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001dbc:	4822      	ldr	r0, [pc, #136]	; (8001e48 <bno055_writeData+0x1c4>)
 8001dbe:	f006 fd9d 	bl	80088fc <puts>
 8001dc2:	e01e      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc8:	d103      	bne.n	8001dd2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001dca:	4820      	ldr	r0, [pc, #128]	; (8001e4c <bno055_writeData+0x1c8>)
 8001dcc:	f006 fd96 	bl	80088fc <puts>
 8001dd0:	e017      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b60      	cmp	r3, #96	; 0x60
 8001dd6:	d103      	bne.n	8001de0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001dd8:	481d      	ldr	r0, [pc, #116]	; (8001e50 <bno055_writeData+0x1cc>)
 8001dda:	f006 fd8f 	bl	80088fc <puts>
 8001dde:	e010      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	2ba0      	cmp	r3, #160	; 0xa0
 8001de4:	d103      	bne.n	8001dee <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001de6:	481b      	ldr	r0, [pc, #108]	; (8001e54 <bno055_writeData+0x1d0>)
 8001de8:	f006 fd88 	bl	80088fc <puts>
 8001dec:	e009      	b.n	8001e02 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2be0      	cmp	r3, #224	; 0xe0
 8001df2:	d106      	bne.n	8001e02 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001df4:	4818      	ldr	r0, [pc, #96]	; (8001e58 <bno055_writeData+0x1d4>)
 8001df6:	f006 fd81 	bl	80088fc <puts>
 8001dfa:	e002      	b.n	8001e02 <bno055_writeData+0x17e>
    return;
 8001dfc:	bf00      	nop
 8001dfe:	e000      	b.n	8001e02 <bno055_writeData+0x17e>
    return;
 8001e00:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002dc 	.word	0x200002dc
 8001e0c:	0800a874 	.word	0x0800a874
 8001e10:	0800a898 	.word	0x0800a898
 8001e14:	0800a8c0 	.word	0x0800a8c0
 8001e18:	0800a8e4 	.word	0x0800a8e4
 8001e1c:	0800a8fc 	.word	0x0800a8fc
 8001e20:	0800a910 	.word	0x0800a910
 8001e24:	0800a924 	.word	0x0800a924
 8001e28:	0800a938 	.word	0x0800a938
 8001e2c:	0800a94c 	.word	0x0800a94c
 8001e30:	0800a960 	.word	0x0800a960
 8001e34:	0800a978 	.word	0x0800a978
 8001e38:	0800a990 	.word	0x0800a990
 8001e3c:	0800a9a4 	.word	0x0800a9a4
 8001e40:	0800a9bc 	.word	0x0800a9bc
 8001e44:	0800a9d4 	.word	0x0800a9d4
 8001e48:	0800a9ec 	.word	0x0800a9ec
 8001e4c:	0800aa0c 	.word	0x0800aa0c
 8001e50:	0800aa2c 	.word	0x0800aa2c
 8001e54:	0800aa44 	.word	0x0800aa44
 8001e58:	0800aa5c 	.word	0x0800aa5c

08001e5c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <bno055_readData+0x40>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	1dfa      	adds	r2, r7, #7
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2301      	movs	r3, #1
 8001e78:	2150      	movs	r1, #80	; 0x50
 8001e7a:	f004 fb73 	bl	8006564 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <bno055_readData+0x40>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2264      	movs	r2, #100	; 0x64
 8001e88:	9200      	str	r2, [sp, #0]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	2150      	movs	r1, #80	; 0x50
 8001e8e:	f004 fc67 	bl	8006760 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200002dc 	.word	0x200002dc

08001ea0 <map>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001eaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001eae:	ed87 1a03 	vstr	s2, [r7, #12]
 8001eb2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001eb6:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001eca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ece:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	0000      	movs	r0, r0
	...

08001f00 <read_encoder>:
void read_encoder(Encoder *enc, TIM_HandleTypeDef* timer, float CPR){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	ed87 0a01 	vstr	s0, [r7, #4]
	enc->new_counter = __HAL_TIM_GET_COUNTER(timer);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
	enc->counter_status = __HAL_TIM_IS_TIM_COUNTING_DOWN(timer);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	721a      	strb	r2, [r3, #8]
	int16_t count_change = enc->new_counter - enc->counter;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	82fb      	strh	r3, [r7, #22]
	if(enc->counter_status && count_change <0){
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	7a1b      	ldrb	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <read_encoder+0x54>
 8001f4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db07      	blt.n	8001f64 <read_encoder+0x64>
		count_change += 65536;
	}else if (!enc->counter_status && count_change > 0){
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	7a1b      	ldrb	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <read_encoder+0x66>
 8001f5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	e000      	b.n	8001f66 <read_encoder+0x66>
		count_change += 65536;
 8001f64:	bf00      	nop
		count_change -= 65536;
	}
	enc->counter = enc->new_counter;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	601a      	str	r2, [r3, #0]
	enc->counter_status = (count_change >=0);
 8001f6e:	8afb      	ldrh	r3, [r7, #22]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	0bdb      	lsrs	r3, r3, #15
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	721a      	strb	r2, [r3, #8]
	enc->speed = (float)count_change*1000.0f/(CPR_X * sampling_time);
 8001f7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002010 <read_encoder+0x110>
 8001f8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f92:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002014 <read_encoder+0x114>
 8001f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	edc3 7a03 	vstr	s15, [r3, #12]
	enc->rdps = (float)count_change*2*PI*1000.0f/(CPR_X * sampling_time);
 8001fa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fb0:	ee17 0a90 	vmov	r0, s15
 8001fb4:	f7fe fac0 	bl	8000538 <__aeabi_f2d>
 8001fb8:	a311      	add	r3, pc, #68	; (adr r3, 8002000 <read_encoder+0x100>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb13 	bl	80005e8 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <read_encoder+0x118>)
 8001fd0:	f7fe fb0a 	bl	80005e8 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	a30a      	add	r3, pc, #40	; (adr r3, 8002008 <read_encoder+0x108>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fc2b 	bl	800083c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fdbd 	bl	8000b6c <__aeabi_d2f>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	5532617c 	.word	0x5532617c
 8002004:	40092a30 	.word	0x40092a30
 8002008:	00000000 	.word	0x00000000
 800200c:	40cc2000 	.word	0x40cc2000
 8002010:	447a0000 	.word	0x447a0000
 8002014:	46610000 	.word	0x46610000
 8002018:	408f4000 	.word	0x408f4000
 800201c:	00000000 	.word	0x00000000

08002020 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002028:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800202a:	4a68      	ldr	r2, [pc, #416]	; (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800202c:	2100      	movs	r1, #0
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f002 ff91 	bl	8004f56 <HAL_CAN_GetRxMessage>
	cntt++;
 8002034:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800203e:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 8002040:	e002      	b.n	8002048 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		cntt = 0;
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d8f8      	bhi.n	8002042 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	}
	if (RxHeader.StdId == 0x401)
 8002050:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f240 4201 	movw	r2, #1025	; 0x401
 8002058:	4293      	cmp	r3, r2
 800205a:	f040 80a9 	bne.w	80021b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		{
			VxM = map(RxData[0], 0, 255, -3.0 , 3.0);
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800206e:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8002072:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
 8002076:	eddf 0a58 	vldr	s1, [pc, #352]	; 80021d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	f7ff ff0f 	bl	8001ea0 <map>
 8002082:	eef0 7a40 	vmov.f32	s15, s0
 8002086:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8002088:	edc3 7a00 	vstr	s15, [r3]
			VyM = map(RxData[1], 0, 255, -3.0 , 3.0);
 800208c:	4b4e      	ldr	r3, [pc, #312]	; (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002098:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800209c:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 80020a0:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
 80020a4:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80021d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>
 80020a8:	eeb0 0a67 	vmov.f32	s0, s15
 80020ac:	f7ff fef8 	bl	8001ea0 <map>
 80020b0:	eef0 7a40 	vmov.f32	s15, s0
 80020b4:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80020b6:	edc3 7a00 	vstr	s15, [r3]
			OmegaM = map(RxData[2], 0, 255, -3.0 , 3.0);
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80020bc:	789b      	ldrb	r3, [r3, #2]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 80020ca:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 80020ce:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
 80020d2:	eddf 0a41 	vldr	s1, [pc, #260]	; 80021d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	f7ff fee1 	bl	8001ea0 <map>
 80020de:	eef0 7a40 	vmov.f32	s15, s0
 80020e2:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
			Mode = RxData[3];
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80020ea:	78da      	ldrb	r2, [r3, #3]
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80020ee:	701a      	strb	r2, [r3, #0]
			Position = RxData[4];
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80020f2:	791a      	ldrb	r2, [r3, #4]
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80020f6:	701a      	strb	r2, [r3, #0]
		if (VxM >= -0.05 && VxM <= 0.05) {
 80020f8:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa1b 	bl	8000538 <__aeabi_f2d>
 8002102:	a32d      	add	r3, pc, #180	; (adr r3, 80021b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fcf4 	bl	8000af4 <__aeabi_dcmpge>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa0e 	bl	8000538 <__aeabi_f2d>
 800211c:	a328      	add	r3, pc, #160	; (adr r3, 80021c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fcdd 	bl	8000ae0 <__aeabi_dcmple>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
			VxM = 0.0;
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
		}
		if (VyM >= -0.05 && VyM <= 0.05) {
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fd 	bl	8000538 <__aeabi_f2d>
 800213e:	a31e      	add	r3, pc, #120	; (adr r3, 80021b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fcd6 	bl	8000af4 <__aeabi_dcmpge>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d010      	beq.n	8002170 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f9f0 	bl	8000538 <__aeabi_f2d>
 8002158:	a319      	add	r3, pc, #100	; (adr r3, 80021c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f7fe fcbf 	bl	8000ae0 <__aeabi_dcmple>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
			VyM = 0.0;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
		}
		if (OmegaM >= -0.05 && OmegaM <= 0.05) {
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f9df 	bl	8000538 <__aeabi_f2d>
 800217a:	a30f      	add	r3, pc, #60	; (adr r3, 80021b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f7fe fcb8 	bl	8000af4 <__aeabi_dcmpge>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d100      	bne.n	800218c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
//		if (V4_back >= 0.001 && V4_back <= -0.001) {
//			V4_back = 0.0;
//		}
//			datacheck = 1;
//	}
}
 800218a:	e011      	b.n	80021b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		if (OmegaM >= -0.05 && OmegaM <= 0.05) {
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe f9d1 	bl	8000538 <__aeabi_f2d>
 8002196:	a30a      	add	r3, pc, #40	; (adr r3, 80021c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fca0 	bl	8000ae0 <__aeabi_dcmple>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d100      	bne.n	80021a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
}
 80021a6:	e003      	b.n	80021b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
			OmegaM = 0.0;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	9999999a 	.word	0x9999999a
 80021bc:	bfa99999 	.word	0xbfa99999
 80021c0:	9999999a 	.word	0x9999999a
 80021c4:	3fa99999 	.word	0x3fa99999
 80021c8:	20000414 	.word	0x20000414
 80021cc:	20000350 	.word	0x20000350
 80021d0:	2000041c 	.word	0x2000041c
 80021d4:	437f0000 	.word	0x437f0000
 80021d8:	00000000 	.word	0x00000000
 80021dc:	20000454 	.word	0x20000454
 80021e0:	20000458 	.word	0x20000458
 80021e4:	2000045c 	.word	0x2000045c
 80021e8:	20000471 	.word	0x20000471
 80021ec:	20000472 	.word	0x20000472

080021f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f4:	f001 ff0c 	bl	8004010 <HAL_Init>

  /* USER CODE BEGIN Init */
  PID_Position_Init(&pid, 3);
 80021f8:	2103      	movs	r1, #3
 80021fa:	4835      	ldr	r0, [pc, #212]	; (80022d0 <main+0xe0>)
 80021fc:	f7fe fe88 	bl	8000f10 <PID_Position_Init>
  pid.limMax = Output_max;
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <main+0xe4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <main+0xe0>)
 8002206:	6093      	str	r3, [r2, #8]
  pid.limMin = -Output_max;
 8002208:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <main+0xe4>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	eef1 7a67 	vneg.f32	s15, s15
 8002212:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <main+0xe0>)
 8002214:	edc3 7a01 	vstr	s15, [r3, #4]
  pid.limMaxInt = Integral_max;
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <main+0xe8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <main+0xe0>)
 800221e:	6113      	str	r3, [r2, #16]
  pid.limMinInt = -Integral_max;
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <main+0xe8>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	eef1 7a67 	vneg.f32	s15, s15
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <main+0xe0>)
 800222c:	edc3 7a03 	vstr	s15, [r3, #12]
  pid.T = dt;
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <main+0xe0>)
 8002232:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <main+0xec>)
 8002234:	615a      	str	r2, [r3, #20]
  pid.alpha = 0.8;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <main+0xe0>)
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <main+0xf0>)
 800223a:	619a      	str	r2, [r3, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800223c:	f000 f862 	bl	8002304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002240:	f7ff fb96 	bl	8001970 <MX_GPIO_Init>
  MX_DMA_Init();
 8002244:	f7ff fb74 	bl	8001930 <MX_DMA_Init>
  MX_CAN1_Init();
 8002248:	f7ff fad0 	bl	80017ec <MX_CAN1_Init>
  MX_I2C1_Init();
 800224c:	f7ff fc26 	bl	8001a9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002250:	f001 fa12 	bl	8003678 <MX_SPI1_Init>
  MX_I2C2_Init();
 8002254:	f7ff fc50 	bl	8001af8 <MX_I2C2_Init>
  MX_TIM4_Init();
 8002258:	f001 fc7a 	bl	8003b50 <MX_TIM4_Init>
  MX_TIM3_Init();
 800225c:	f001 fc2a 	bl	8003ab4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002260:	f001 fbd4 	bl	8003a0c <MX_TIM2_Init>
  MX_TIM9_Init();
 8002264:	f001 fd16 	bl	8003c94 <MX_TIM9_Init>
  MX_TIM5_Init();
 8002268:	f001 fcc6 	bl	8003bf8 <MX_TIM5_Init>
  MX_ADC1_Init();
 800226c:	f7fe fff6 	bl	800125c <MX_ADC1_Init>
  MX_TIM12_Init();
 8002270:	f001 fd4a 	bl	8003d08 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  // CAN _Transmition
  	HAL_CAN_Start(&hcan1);
 8002274:	481b      	ldr	r0, [pc, #108]	; (80022e4 <main+0xf4>)
 8002276:	f002 fd4f 	bl	8004d18 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800227a:	2102      	movs	r1, #2
 800227c:	4819      	ldr	r0, [pc, #100]	; (80022e4 <main+0xf4>)
 800227e:	f002 ff7c 	bl	800517a <HAL_CAN_ActivateNotification>
  	TxHeader.DLC = 7; // data length
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <main+0xf8>)
 8002284:	2207      	movs	r2, #7
 8002286:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <main+0xf8>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <main+0xf8>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x407; //Id 0x7FF
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <main+0xf8>)
 8002296:	f240 4207 	movw	r2, #1031	; 0x407
 800229a:	601a      	str	r2, [r3, #0]

  	// TIMER Internal clock
  	HAL_TIM_Base_Start_IT(&htim3);
 800229c:	4813      	ldr	r0, [pc, #76]	; (80022ec <main+0xfc>)
 800229e:	f005 fce9 	bl	8007c74 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim12);
 80022a2:	4813      	ldr	r0, [pc, #76]	; (80022f0 <main+0x100>)
 80022a4:	f005 fce6 	bl	8007c74 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim5);
 80022a8:	4812      	ldr	r0, [pc, #72]	; (80022f4 <main+0x104>)
 80022aa:	f005 fce3 	bl	8007c74 <HAL_TIM_Base_Start_IT>

  	// IMU
	bno055_assignI2C(&hi2c1);
 80022ae:	4812      	ldr	r0, [pc, #72]	; (80022f8 <main+0x108>)
 80022b0:	f7ff fccc 	bl	8001c4c <bno055_assignI2C>
	bno055_setup();
 80022b4:	f7ff f8ea 	bl	800148c <bno055_setup>
	bno055_setOperationModeNDOF();
 80022b8:	f7ff f8d5 	bl	8001466 <bno055_setOperationModeNDOF>

	// Read Rotary encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80022bc:	213c      	movs	r1, #60	; 0x3c
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <main+0x10c>)
 80022c0:	f005 fdee 	bl	8007ea0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022c4:	213c      	movs	r1, #60	; 0x3c
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <main+0x110>)
 80022c8:	f005 fdea 	bl	8007ea0 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <main+0xdc>
 80022ce:	bf00      	nop
 80022d0:	200002e0 	.word	0x200002e0
 80022d4:	20000010 	.word	0x20000010
 80022d8:	20000014 	.word	0x20000014
 80022dc:	3c23d70a 	.word	0x3c23d70a
 80022e0:	3f4ccccd 	.word	0x3f4ccccd
 80022e4:	2000020c 	.word	0x2000020c
 80022e8:	2000036c 	.word	0x2000036c
 80022ec:	20000564 	.word	0x20000564
 80022f0:	20000684 	.word	0x20000684
 80022f4:	200005f4 	.word	0x200005f4
 80022f8:	20000234 	.word	0x20000234
 80022fc:	2000051c 	.word	0x2000051c
 8002300:	200005ac 	.word	0x200005ac

08002304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b094      	sub	sp, #80	; 0x50
 8002308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	2230      	movs	r2, #48	; 0x30
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f006 fa64 	bl	80087e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <SystemClock_Config+0xcc>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <SystemClock_Config+0xcc>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <SystemClock_Config+0xcc>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <SystemClock_Config+0xd0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <SystemClock_Config+0xd0>)
 800234e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <SystemClock_Config+0xd0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002364:	2301      	movs	r3, #1
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002368:	2310      	movs	r3, #16
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236c:	2302      	movs	r3, #2
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002370:	2300      	movs	r3, #0
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002374:	2308      	movs	r3, #8
 8002376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002378:	23a8      	movs	r3, #168	; 0xa8
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800237c:	2302      	movs	r3, #2
 800237e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002380:	2304      	movs	r3, #4
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	4618      	mov	r0, r3
 800238a:	f004 ff57 	bl	800723c <HAL_RCC_OscConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002394:	f001 f96a 	bl	800366c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002398:	230f      	movs	r3, #15
 800239a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2105      	movs	r1, #5
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 f9b8 	bl	800772c <HAL_RCC_ClockConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023c2:	f001 f953 	bl	800366c <Error_Handler>
  }
}
 80023c6:	bf00      	nop
 80023c8:	3750      	adds	r7, #80	; 0x50
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000

080023d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	ed2d 8b02 	vpush	{d8}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a53      	ldr	r2, [pc, #332]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	f040 8150 	bne.w	8002690 <HAL_TIM_PeriodElapsedCallback+0x2b8>
	{
		//PID POSITION

		Output_Vx = PID_Position(&pid, goal[0], X_enR, Kp_X, Ki_X, Kd_X, X);
 80023f0:	4b52      	ldr	r3, [pc, #328]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	4b52      	ldr	r3, [pc, #328]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80023f8:	ed93 7a00 	vldr	s14, [r3]
 80023fc:	2100      	movs	r1, #0
 80023fe:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8002544 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002402:	eddf 1a51 	vldr	s3, [pc, #324]	; 8002548 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002406:	ed9f 1a51 	vldr	s2, [pc, #324]	; 800254c <HAL_TIM_PeriodElapsedCallback+0x174>
 800240a:	eef0 0a47 	vmov.f32	s1, s14
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	484f      	ldr	r0, [pc, #316]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002414:	f7fe fdce 	bl	8000fb4 <PID_Position>
 8002418:	eef0 7a40 	vmov.f32	s15, s0
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800241e:	edc3 7a00 	vstr	s15, [r3]
		Output_Vy = PID_Position(&pid, goal[1], Y_enR, Kp_Y, Ki_Y, Kd_Y, Y);
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002424:	edd3 7a01 	vldr	s15, [r3, #4]
 8002428:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	2101      	movs	r1, #1
 8002430:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8002544 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002434:	eddf 1a44 	vldr	s3, [pc, #272]	; 8002548 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002438:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800243c:	eef0 0a47 	vmov.f32	s1, s14
 8002440:	eeb0 0a67 	vmov.f32	s0, s15
 8002444:	4842      	ldr	r0, [pc, #264]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002446:	f7fe fdb5 	bl	8000fb4 <PID_Position>
 800244a:	eef0 7a40 	vmov.f32	s15, s0
 800244e:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002450:	edc3 7a00 	vstr	s15, [r3]
		Output_Omega = PID_Position(&pid, goal[2], theta, Kp_Yaw, Ki_Yaw, Kd_Yaw, YAW);
 8002454:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002456:	edd3 7a02 	vldr	s15, [r3, #8]
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800245c:	ed93 7a00 	vldr	s14, [r3]
 8002460:	2102      	movs	r1, #2
 8002462:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8002544 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002466:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002548 <HAL_TIM_PeriodElapsedCallback+0x170>
 800246a:	ed9f 1a38 	vldr	s2, [pc, #224]	; 800254c <HAL_TIM_PeriodElapsedCallback+0x174>
 800246e:	eef0 0a47 	vmov.f32	s1, s14
 8002472:	eeb0 0a67 	vmov.f32	s0, s15
 8002476:	4836      	ldr	r0, [pc, #216]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002478:	f7fe fd9c 	bl	8000fb4 <PID_Position>
 800247c:	eef0 7a40 	vmov.f32	s15, s0
 8002480:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
		vx = Output_Vx*cosf(theta) + Output_Vy*sinf(theta);
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eeb0 0a67 	vmov.f32	s0, s15
 8002490:	f007 f9b2 	bl	80097f8 <cosf>
 8002494:	eeb0 7a40 	vmov.f32	s14, s0
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee27 8a27 	vmul.f32	s16, s14, s15
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	f007 f9e8 	bl	8009880 <sinf>
 80024b0:	eeb0 7a40 	vmov.f32	s14, s0
 80024b4:	4b29      	ldr	r3, [pc, #164]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80024c4:	edc3 7a00 	vstr	s15, [r3]
		vy = -Output_Vx*sinf(theta) + Output_Vy*cosf(theta);
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	eeb1 8a67 	vneg.f32	s16, s15
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eeb0 0a67 	vmov.f32	s0, s15
 80024dc:	f007 f9d0 	bl	8009880 <sinf>
 80024e0:	eef0 7a40 	vmov.f32	s15, s0
 80024e4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	f007 f981 	bl	80097f8 <cosf>
 80024f6:	eeb0 7a40 	vmov.f32	s14, s0
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800250a:	edc3 7a00 	vstr	s15, [r3]
		omega = Output_Omega;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002514:	6013      	str	r3, [r2, #0]
		if (Mode == 1)
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d132      	bne.n	8002584 <HAL_TIM_PeriodElapsedCallback+0x1ac>
		{
			Vx = vx;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002524:	6013      	str	r3, [r2, #0]
			Vy = vy;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a14      	ldr	r2, [pc, #80]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800252c:	6013      	str	r3, [r2, #0]
			Omega = omega;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e035      	b.n	80025a4 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8002538:	40000400 	.word	0x40000400
 800253c:	2000048c 	.word	0x2000048c
 8002540:	2000000c 	.word	0x2000000c
 8002544:	3b83126f 	.word	0x3b83126f
 8002548:	38d1b717 	.word	0x38d1b717
 800254c:	3fb33333 	.word	0x3fb33333
 8002550:	200002e0 	.word	0x200002e0
 8002554:	20000474 	.word	0x20000474
 8002558:	20000420 	.word	0x20000420
 800255c:	20000478 	.word	0x20000478
 8002560:	20000434 	.word	0x20000434
 8002564:	2000047c 	.word	0x2000047c
 8002568:	20000460 	.word	0x20000460
 800256c:	20000464 	.word	0x20000464
 8002570:	20000468 	.word	0x20000468
 8002574:	20000471 	.word	0x20000471
 8002578:	20000448 	.word	0x20000448
 800257c:	2000044c 	.word	0x2000044c
 8002580:	20000450 	.word	0x20000450
		}
		else if (Mode == 0)
 8002584:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		{
			Vx = VxM;
 800258c:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a75      	ldr	r2, [pc, #468]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002592:	6013      	str	r3, [r2, #0]
			Vy = VyM;
 8002594:	4b75      	ldr	r3, [pc, #468]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800259a:	6013      	str	r3, [r2, #0]
			Omega = OmegaM;
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80025a2:	6013      	str	r3, [r2, #0]
		}
		V1_out = map(Vx, -3.0, 3.0, 0, 65535);
 80025a4:	4b70      	ldr	r3, [pc, #448]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ed9f 2a74 	vldr	s4, [pc, #464]	; 800277c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80025ae:	eddf 1a74 	vldr	s3, [pc, #464]	; 8002780 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80025b2:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80025b6:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	f7ff fc6f 	bl	8001ea0 <map>
 80025c2:	eef0 7a40 	vmov.f32	s15, s0
 80025c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ca:	ee17 3a90 	vmov	r3, s15
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80025d2:	801a      	strh	r2, [r3, #0]
		V2_out = map(Vy, -3.0, 3.0, 0, 65535);
 80025d4:	4b66      	ldr	r3, [pc, #408]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ed9f 2a68 	vldr	s4, [pc, #416]	; 800277c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80025de:	eddf 1a68 	vldr	s3, [pc, #416]	; 8002780 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80025e2:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80025e6:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 80025ea:	eeb0 0a67 	vmov.f32	s0, s15
 80025ee:	f7ff fc57 	bl	8001ea0 <map>
 80025f2:	eef0 7a40 	vmov.f32	s15, s0
 80025f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025fa:	ee17 3a90 	vmov	r3, s15
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002602:	801a      	strh	r2, [r3, #0]
		V3_out = map(Omega, -3.14, 3.14, 0, 65535);
 8002604:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ed9f 2a5c 	vldr	s4, [pc, #368]	; 800277c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800260e:	eddf 1a5c 	vldr	s3, [pc, #368]	; 8002780 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002612:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800278c <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8002616:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8002790 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 800261a:	eeb0 0a67 	vmov.f32	s0, s15
 800261e:	f7ff fc3f 	bl	8001ea0 <map>
 8002622:	eef0 7a40 	vmov.f32	s15, s0
 8002626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262a:	ee17 3a90 	vmov	r3, s15
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002632:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((V1_out & 0xFF00) >> 8);
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	b29b      	uxth	r3, r3
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002640:	701a      	strb	r2, [r3, #0]
		TxData[1] = (V1_out & 0x00FF);
 8002642:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800264a:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((V2_out & 0xFF00) >> 8);
 800264c:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	b29b      	uxth	r3, r3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002658:	709a      	strb	r2, [r3, #2]
		TxData[3] = (V2_out & 0x00FF);
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002662:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((V3_out & 0xFF00) >> 8);
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29b      	uxth	r3, r3
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002670:	711a      	strb	r2, [r3, #4]
		TxData[5] = (V3_out & 0x00FF);
 8002672:	4b48      	ldr	r3, [pc, #288]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800267a:	715a      	strb	r2, [r3, #5]
		TxData[6] = State;
 800267c:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b45      	ldr	r3, [pc, #276]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002682:	719a      	strb	r2, [r3, #6]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8002684:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002686:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002688:	4946      	ldr	r1, [pc, #280]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800268a:	4847      	ldr	r0, [pc, #284]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800268c:	f002 fb88 	bl	8004da0 <HAL_CAN_AddTxMessage>

	}
	if (htim->Instance == TIM5)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f040 85fb 	bne.w	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
	{
		errorX = goal[0] - X_enR;
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80026ae:	edc3 7a00 	vstr	s15, [r3]
		errorY = goal[1] - Y_enR;
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80026b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80026c4:	edc3 7a00 	vstr	s15, [r3]
		errorYaw = goal[2] - theta;
 80026c8:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80026ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 80026da:	edc3 7a00 	vstr	s15, [r3]
		if (Position == 1 && State == 0) {
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d114      	bne.n	8002710 <HAL_TIM_PeriodElapsedCallback+0x338>
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d110      	bne.n	8002710 <HAL_TIM_PeriodElapsedCallback+0x338>
			goal[0] = goal1[0];
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80026f4:	6013      	str	r3, [r2, #0]
			goal[1] = goal1[1];
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80026fc:	6053      	str	r3, [r2, #4]
			goal[2] = goal1[2];
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002704:	6093      	str	r3, [r2, #8]
			State = 1;
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	f000 bdc1 	b.w	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
		} else if (abs(errorX) < 0.05 && State == 1) {
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271a:	ee17 3a90 	vmov	r3, s15
 800271e:	2b00      	cmp	r3, #0
 8002720:	db5a      	blt.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x400>
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272c:	ee17 3a90 	vmov	r3, s15
 8002730:	2b00      	cmp	r3, #0
 8002732:	dc51      	bgt.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x400>
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d14d      	bne.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x400>
			goal[0] = goal2[0];
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002742:	6013      	str	r3, [r2, #0]
			goal[1] = goal2[1];
 8002744:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800274a:	6053      	str	r3, [r2, #4]
			goal[2] = goal2[2];
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002752:	6093      	str	r3, [r2, #8]
			State = 2;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002756:	2202      	movs	r2, #2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	f000 bd9a 	b.w	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 800275e:	bf00      	nop
 8002760:	20000471 	.word	0x20000471
 8002764:	20000454 	.word	0x20000454
 8002768:	20000448 	.word	0x20000448
 800276c:	20000458 	.word	0x20000458
 8002770:	2000044c 	.word	0x2000044c
 8002774:	2000045c 	.word	0x2000045c
 8002778:	20000450 	.word	0x20000450
 800277c:	477fff00 	.word	0x477fff00
 8002780:	00000000 	.word	0x00000000
 8002784:	2000040c 	.word	0x2000040c
 8002788:	2000040e 	.word	0x2000040e
 800278c:	4048f5c3 	.word	0x4048f5c3
 8002790:	c048f5c3 	.word	0xc048f5c3
 8002794:	20000410 	.word	0x20000410
 8002798:	20000400 	.word	0x20000400
 800279c:	20000470 	.word	0x20000470
 80027a0:	20000408 	.word	0x20000408
 80027a4:	2000036c 	.word	0x2000036c
 80027a8:	2000020c 	.word	0x2000020c
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	2000048c 	.word	0x2000048c
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	20000480 	.word	0x20000480
 80027bc:	20000420 	.word	0x20000420
 80027c0:	20000484 	.word	0x20000484
 80027c4:	20000434 	.word	0x20000434
 80027c8:	20000488 	.word	0x20000488
 80027cc:	20000472 	.word	0x20000472
 80027d0:	20000018 	.word	0x20000018
 80027d4:	20000024 	.word	0x20000024
		} else if (abs(errorY) < 0.05 && State == 2) {
 80027d8:	4b85      	ldr	r3, [pc, #532]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e2:	ee17 3a90 	vmov	r3, s15
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f2c0 8082 	blt.w	80028f0 <HAL_TIM_PeriodElapsedCallback+0x518>
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f6:	ee17 3a90 	vmov	r3, s15
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	dc78      	bgt.n	80028f0 <HAL_TIM_PeriodElapsedCallback+0x518>
 80027fe:	4b7d      	ldr	r3, [pc, #500]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d174      	bne.n	80028f0 <HAL_TIM_PeriodElapsedCallback+0x518>
			errorlaserx = -target_laserx[0] + laserx;
 8002806:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280c:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x624>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd fd31 	bl	8000278 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4979      	ldr	r1, [pc, #484]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800281c:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[0] + lasery;
 8002820:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002826:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fd24 	bl	8000278 <__aeabi_dsub>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4975      	ldr	r1, [pc, #468]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8002836:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 800283a:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe7a 	bl	8000538 <__aeabi_f2d>
 8002844:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fd17 	bl	800027c <__adddf3>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe f989 	bl	8000b6c <__aeabi_d2f>
 800285a:	4603      	mov	r3, r0
 800285c:	4a6d      	ldr	r2, [pc, #436]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800285e:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002860:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe67 	bl	8000538 <__aeabi_f2d>
 800286a:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd fd04 	bl	800027c <__adddf3>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f976 	bl	8000b6c <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	4a64      	ldr	r2, [pc, #400]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8002884:	6053      	str	r3, [r2, #4]
			goal[2] = goal3[2];
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x644>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4a62      	ldr	r2, [pc, #392]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800288c:	6093      	str	r3, [r2, #8]
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f7fe f940 	bl	8000b1c <__aeabi_d2iz>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f2c0 84cf 	blt.w	8003242 <HAL_TIM_PeriodElapsedCallback+0xe6a>
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f935 	bl	8000b1c <__aeabi_d2iz>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f300 84c4 	bgt.w	8003242 <HAL_TIM_PeriodElapsedCallback+0xe6a>
 80028ba:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f92a 	bl	8000b1c <__aeabi_d2iz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f2c0 84b9 	blt.w	8003242 <HAL_TIM_PeriodElapsedCallback+0xe6a>
 80028d0:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f91f 	bl	8000b1c <__aeabi_d2iz>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f300 84ae 	bgt.w	8003242 <HAL_TIM_PeriodElapsedCallback+0xe6a>
			{
				State = 3;
 80028e6:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80028e8:	2203      	movs	r2, #3
 80028ea:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 80028ec:	f000 bca9 	b.w	8003242 <HAL_TIM_PeriodElapsedCallback+0xe6a>
			}
		}
		else if (Position == 2 && State == 3) {
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f040 8097 	bne.w	8002a28 <HAL_TIM_PeriodElapsedCallback+0x650>
 80028fa:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	f040 8092 	bne.w	8002a28 <HAL_TIM_PeriodElapsedCallback+0x650>
			errorlaserx = -target_laserx[1] + laserx;
 8002904:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290a:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x624>)
 800290c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002910:	f7fd fcb2 	bl	8000278 <__aeabi_dsub>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4939      	ldr	r1, [pc, #228]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800291a:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[1] + lasery;
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002920:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8002926:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800292a:	f7fd fca5 	bl	8000278 <__aeabi_dsub>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4936      	ldr	r1, [pc, #216]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8002934:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx + X_enR;
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdfb 	bl	8000538 <__aeabi_f2d>
 8002942:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fc98 	bl	800027c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f90a 	bl	8000b6c <__aeabi_d2f>
 8002958:	4603      	mov	r3, r0
 800295a:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800295c:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery + Y_enR;
 800295e:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fde8 	bl	8000538 <__aeabi_f2d>
 8002968:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fd fc85 	bl	800027c <__adddf3>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f8f7 	bl	8000b6c <__aeabi_d2f>
 800297e:	4603      	mov	r3, r0
 8002980:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8002982:	6053      	str	r3, [r2, #4]
			goal[2] = goal4[2];
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800298a:	6093      	str	r3, [r2, #8]
			if (abs(errorlaserx)<= 0.05 && abs(errorlasery)<=0.05)
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f8c1 	bl	8000b1c <__aeabi_d2iz>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f2c0 8452 	blt.w	8003246 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7fe f8b6 	bl	8000b1c <__aeabi_d2iz>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f300 8447 	bgt.w	8003246 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f8ab 	bl	8000b1c <__aeabi_d2iz>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f2c0 843c 	blt.w	8003246 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f8a0 	bl	8000b1c <__aeabi_d2iz>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f300 8431 	bgt.w	8003246 <HAL_TIM_PeriodElapsedCallback+0xe6e>
			{
				State = 4;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80029e6:	2204      	movs	r2, #4
 80029e8:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx)<= 0.05 && abs(errorlasery)<=0.05)
 80029ea:	f000 bc2c 	b.w	8003246 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 80029ee:	bf00      	nop
 80029f0:	20000484 	.word	0x20000484
 80029f4:	20000470 	.word	0x20000470
 80029f8:	200004a0 	.word	0x200004a0
 80029fc:	20000070 	.word	0x20000070
 8002a00:	200004b0 	.word	0x200004b0
 8002a04:	200004a8 	.word	0x200004a8
 8002a08:	20000090 	.word	0x20000090
 8002a0c:	200004b8 	.word	0x200004b8
 8002a10:	2000000c 	.word	0x2000000c
 8002a14:	2000048c 	.word	0x2000048c
 8002a18:	20000420 	.word	0x20000420
 8002a1c:	20000030 	.word	0x20000030
 8002a20:	20000472 	.word	0x20000472
 8002a24:	2000003c 	.word	0x2000003c
			}
		}
		else if (Position == 3 && State == 4) {
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d177      	bne.n	8002b20 <HAL_TIM_PeriodElapsedCallback+0x748>
 8002a30:	4b9c      	ldr	r3, [pc, #624]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d173      	bne.n	8002b20 <HAL_TIM_PeriodElapsedCallback+0x748>
			errorlaserx = -target_laserx[2] + laserx;
 8002a38:	4b9b      	ldr	r3, [pc, #620]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8002a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3e:	4b9b      	ldr	r3, [pc, #620]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8002a40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a44:	f7fd fc18 	bl	8000278 <__aeabi_dsub>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4998      	ldr	r1, [pc, #608]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[2] + lasery;
 8002a52:	4b98      	ldr	r3, [pc, #608]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8002a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a58:	4b97      	ldr	r3, [pc, #604]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002a5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a5e:	f7fd fc0b 	bl	8000278 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4995      	ldr	r1, [pc, #596]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002a68:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx + X_enR;
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd61 	bl	8000538 <__aeabi_f2d>
 8002a76:	4b8e      	ldr	r3, [pc, #568]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fbfe 	bl	800027c <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f870 	bl	8000b6c <__aeabi_d2f>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a8d      	ldr	r2, [pc, #564]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002a90:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery + Y_enR;
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fd4e 	bl	8000538 <__aeabi_f2d>
 8002a9c:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fbeb 	bl	800027c <__adddf3>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f85d 	bl	8000b6c <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a83      	ldr	r2, [pc, #524]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002ab6:	6053      	str	r3, [r2, #4]
			goal[2] = goal5[2];
 8002ab8:	4b84      	ldr	r3, [pc, #528]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a81      	ldr	r2, [pc, #516]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002abe:	6093      	str	r3, [r2, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05) {
 8002ac0:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f827 	bl	8000b1c <__aeabi_d2iz>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f2c0 83ba 	blt.w	800324a <HAL_TIM_PeriodElapsedCallback+0xe72>
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f81c 	bl	8000b1c <__aeabi_d2iz>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f300 83af 	bgt.w	800324a <HAL_TIM_PeriodElapsedCallback+0xe72>
 8002aec:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f811 	bl	8000b1c <__aeabi_d2iz>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f2c0 83a4 	blt.w	800324a <HAL_TIM_PeriodElapsedCallback+0xe72>
 8002b02:	4b6e      	ldr	r3, [pc, #440]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fe f806 	bl	8000b1c <__aeabi_d2iz>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f300 8399 	bgt.w	800324a <HAL_TIM_PeriodElapsedCallback+0xe72>
				State = 5;
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05) {
 8002b1e:	e394      	b.n	800324a <HAL_TIM_PeriodElapsedCallback+0xe72>
			}
		}
		else if (Position == 4 && State == 5) {
 8002b20:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d113      	bne.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x778>
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d10f      	bne.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x778>
			goal[0] = goal6[0];
 8002b30:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a63      	ldr	r2, [pc, #396]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002b36:	6013      	str	r3, [r2, #0]
			goal[1] = goal6[1];
 8002b38:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a61      	ldr	r2, [pc, #388]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002b3e:	6053      	str	r3, [r2, #4]
			goal[2] = goal6[2];
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a5f      	ldr	r2, [pc, #380]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002b46:	6093      	str	r3, [r2, #8]
			State = 6;
 8002b48:	4b56      	ldr	r3, [pc, #344]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002b4a:	2206      	movs	r2, #6
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e3a0      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
		} else if (abs(errorY) < 0.05 && State == 6) {
 8002b50:	4b60      	ldr	r3, [pc, #384]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5a:	ee17 3a90 	vmov	r3, s15
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db1c      	blt.n	8002b9c <HAL_TIM_PeriodElapsedCallback+0x7c4>
 8002b62:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6c:	ee17 3a90 	vmov	r3, s15
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dc13      	bgt.n	8002b9c <HAL_TIM_PeriodElapsedCallback+0x7c4>
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d10f      	bne.n	8002b9c <HAL_TIM_PeriodElapsedCallback+0x7c4>
			goal[0] = goal6[0];
 8002b7c:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002b82:	6013      	str	r3, [r2, #0]
			goal[1] = goal6[1];
 8002b84:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a4e      	ldr	r2, [pc, #312]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002b8a:	6053      	str	r3, [r2, #4]
			goal[2] = goal7[2];
 8002b8c:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002b92:	6093      	str	r3, [r2, #8]
			State = 7;
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002b96:	2207      	movs	r2, #7
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e37a      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
		}
		else if (Position == 5 && State == 7) {
 8002b9c:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b05      	cmp	r3, #5
 8002ba2:	f040 809d 	bne.w	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x908>
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b07      	cmp	r3, #7
 8002bac:	f040 8098 	bne.w	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x908>
			errorlaserx = -target_laserx[3] + lasery;
 8002bb0:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8002bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8002bb8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bbc:	f7fd fb5c 	bl	8000278 <__aeabi_dsub>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	493a      	ldr	r1, [pc, #232]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002bc6:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[3] - laserx;
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002bcc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fb4f 	bl	8000278 <__aeabi_dsub>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002be0:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fca5 	bl	8000538 <__aeabi_f2d>
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fb42 	bl	800027c <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fd ffb4 	bl	8000b6c <__aeabi_d2f>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4a2f      	ldr	r2, [pc, #188]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002c08:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fc92 	bl	8000538 <__aeabi_f2d>
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fb2f 	bl	800027c <__adddf3>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd ffa1 	bl	8000b6c <__aeabi_d2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002c2e:	6053      	str	r3, [r2, #4]
			goal[2] = -1.57;
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002c32:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x904>)
 8002c34:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 7) {
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd ff6c 	bl	8000b1c <__aeabi_d2iz>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f2c0 8301 	blt.w	800324e <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ff61 	bl	8000b1c <__aeabi_d2iz>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f300 82f6 	bgt.w	800324e <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ff56 	bl	8000b1c <__aeabi_d2iz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f2c0 82eb 	blt.w	800324e <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ff4b 	bl	8000b1c <__aeabi_d2iz>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f300 82e0 	bgt.w	800324e <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	f040 82db 	bne.w	800324e <HAL_TIM_PeriodElapsedCallback+0xe76>
				State = 8;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 7) {
 8002c9e:	e2d6      	b.n	800324e <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002ca0:	20000472 	.word	0x20000472
 8002ca4:	20000470 	.word	0x20000470
 8002ca8:	200004a0 	.word	0x200004a0
 8002cac:	20000070 	.word	0x20000070
 8002cb0:	200004b0 	.word	0x200004b0
 8002cb4:	200004a8 	.word	0x200004a8
 8002cb8:	20000090 	.word	0x20000090
 8002cbc:	200004b8 	.word	0x200004b8
 8002cc0:	2000000c 	.word	0x2000000c
 8002cc4:	2000048c 	.word	0x2000048c
 8002cc8:	20000420 	.word	0x20000420
 8002ccc:	20000048 	.word	0x20000048
 8002cd0:	20000054 	.word	0x20000054
 8002cd4:	20000484 	.word	0x20000484
 8002cd8:	20000060 	.word	0x20000060
 8002cdc:	bfc8f5c3 	.word	0xbfc8f5c3
			}
		}
		else if (Position == 6 && State == 8) {
 8002ce0:	4b80      	ldr	r3, [pc, #512]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d17b      	bne.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8002ce8:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d177      	bne.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0xa08>
			errorlaserx = -target_laserx[3] + lasery;
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8002cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf6:	4b7e      	ldr	r3, [pc, #504]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8002cf8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002cfc:	f7fd fabc 	bl	8000278 <__aeabi_dsub>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	497b      	ldr	r1, [pc, #492]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002d06:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[4] - laserx;
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8002d0c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d10:	4b7a      	ldr	r3, [pc, #488]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd faaf 	bl	8000278 <__aeabi_dsub>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4978      	ldr	r1, [pc, #480]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002d20:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002d24:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc05 	bl	8000538 <__aeabi_f2d>
 8002d2e:	4b71      	ldr	r3, [pc, #452]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd faa2 	bl	800027c <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd ff14 	bl	8000b6c <__aeabi_d2f>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a70      	ldr	r2, [pc, #448]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002d48:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002d4a:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbf2 	bl	8000538 <__aeabi_f2d>
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fa8f 	bl	800027c <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd ff01 	bl	8000b6c <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002d6e:	6053      	str	r3, [r2, #4]
			goal[2] = -1.57;
 8002d70:	4b65      	ldr	r3, [pc, #404]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002d72:	4a67      	ldr	r2, [pc, #412]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8002d74:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 8) {
 8002d76:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd fecc 	bl	8000b1c <__aeabi_d2iz>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f2c0 8263 	blt.w	8003252 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7fd fec1 	bl	8000b1c <__aeabi_d2iz>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f300 8258 	bgt.w	8003252 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd feb6 	bl	8000b1c <__aeabi_d2iz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f2c0 824d 	blt.w	8003252 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002db8:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd feab 	bl	8000b1c <__aeabi_d2iz>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f300 8242 	bgt.w	8003252 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002dce:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	f040 823d 	bne.w	8003252 <HAL_TIM_PeriodElapsedCallback+0xe7a>
					State = 9;
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002dda:	2209      	movs	r2, #9
 8002ddc:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 8) {
 8002dde:	e238      	b.n	8003252 <HAL_TIM_PeriodElapsedCallback+0xe7a>
			}
		}
		else if (Position == 7 && State == 9 ) {
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	f040 8095 	bne.w	8002f14 <HAL_TIM_PeriodElapsedCallback+0xb3c>
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	f040 8090 	bne.w	8002f14 <HAL_TIM_PeriodElapsedCallback+0xb3c>
			errorlaserx = -target_laserx[3] + lasery;
 8002df4:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8002df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8002dfc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e00:	f7fd fa3a 	bl	8000278 <__aeabi_dsub>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	493a      	ldr	r1, [pc, #232]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002e0a:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[5] - laserx;
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8002e10:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fa2d 	bl	8000278 <__aeabi_dsub>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002e24:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002e28:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb83 	bl	8000538 <__aeabi_f2d>
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f7fd fa20 	bl	800027c <__adddf3>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7fd fe92 	bl	8000b6c <__aeabi_d2f>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002e4c:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb70 	bl	8000538 <__aeabi_f2d>
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fa0d 	bl	800027c <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fe7f 	bl	8000b6c <__aeabi_d2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002e72:	6053      	str	r3, [r2, #4]
			goal[2] = -1.57;
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002e76:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8002e78:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 9) {
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fd fe4a 	bl	8000b1c <__aeabi_d2iz>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f2c0 81e3 	blt.w	8003256 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f7fd fe3f 	bl	8000b1c <__aeabi_d2iz>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f300 81d8 	bgt.w	8003256 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fe34 	bl	8000b1c <__aeabi_d2iz>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f2c0 81cd 	blt.w	8003256 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7fd fe29 	bl	8000b1c <__aeabi_d2iz>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f300 81c2 	bgt.w	8003256 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b09      	cmp	r3, #9
 8002ed8:	f040 81bd 	bne.w	8003256 <HAL_TIM_PeriodElapsedCallback+0xe7e>
					State = 10;
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002ede:	220a      	movs	r2, #10
 8002ee0:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 9) {
 8002ee2:	e1b8      	b.n	8003256 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002ee4:	20000472 	.word	0x20000472
 8002ee8:	20000470 	.word	0x20000470
 8002eec:	200004a8 	.word	0x200004a8
 8002ef0:	20000070 	.word	0x20000070
 8002ef4:	200004b0 	.word	0x200004b0
 8002ef8:	20000090 	.word	0x20000090
 8002efc:	200004a0 	.word	0x200004a0
 8002f00:	200004b8 	.word	0x200004b8
 8002f04:	2000000c 	.word	0x2000000c
 8002f08:	2000048c 	.word	0x2000048c
 8002f0c:	20000420 	.word	0x20000420
 8002f10:	bfc8f5c3 	.word	0xbfc8f5c3
			}
		}
		else if (Position == 8 && State == 10 ) {
 8002f14:	4b80      	ldr	r3, [pc, #512]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d17b      	bne.n	8003014 <HAL_TIM_PeriodElapsedCallback+0xc3c>
 8002f1c:	4b7f      	ldr	r3, [pc, #508]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b0a      	cmp	r3, #10
 8002f22:	d177      	bne.n	8003014 <HAL_TIM_PeriodElapsedCallback+0xc3c>
			errorlaserx = -target_laserx[3] + lasery;
 8002f24:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8002f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8002f2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f30:	f7fd f9a2 	bl	8000278 <__aeabi_dsub>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	497b      	ldr	r1, [pc, #492]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002f3a:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[6] - laserx;
 8002f3e:	4b7b      	ldr	r3, [pc, #492]	; (800312c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002f40:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f44:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f7fd f995 	bl	8000278 <__aeabi_dsub>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4978      	ldr	r1, [pc, #480]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002f58:	4b77      	ldr	r3, [pc, #476]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd faeb 	bl	8000538 <__aeabi_f2d>
 8002f62:	4b71      	ldr	r3, [pc, #452]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f7fd f988 	bl	800027c <__adddf3>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fdfa 	bl	8000b6c <__aeabi_d2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4a70      	ldr	r2, [pc, #448]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002f7c:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002f7e:	4b70      	ldr	r3, [pc, #448]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fad8 	bl	8000538 <__aeabi_f2d>
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f7fd f975 	bl	800027c <__adddf3>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fde7 	bl	8000b6c <__aeabi_d2f>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a66      	ldr	r2, [pc, #408]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002fa2:	6053      	str	r3, [r2, #4]
			goal[2] = -1.57;
 8002fa4:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002fa6:	4a67      	ldr	r2, [pc, #412]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8002fa8:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 10) {
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fdb2 	bl	8000b1c <__aeabi_d2iz>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f2c0 814d 	blt.w	800325a <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f7fd fda7 	bl	8000b1c <__aeabi_d2iz>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f300 8142 	bgt.w	800325a <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002fd6:	4b57      	ldr	r3, [pc, #348]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fd9c 	bl	8000b1c <__aeabi_d2iz>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f2c0 8137 	blt.w	800325a <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002fec:	4b51      	ldr	r3, [pc, #324]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7fd fd91 	bl	8000b1c <__aeabi_d2iz>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f300 812c 	bgt.w	800325a <HAL_TIM_PeriodElapsedCallback+0xe82>
 8003002:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b0a      	cmp	r3, #10
 8003008:	f040 8127 	bne.w	800325a <HAL_TIM_PeriodElapsedCallback+0xe82>
					State = 11;
 800300c:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 800300e:	220b      	movs	r2, #11
 8003010:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 10) {
 8003012:	e122      	b.n	800325a <HAL_TIM_PeriodElapsedCallback+0xe82>
			}
		}
		else if (Position == 9 && State == 11 ) {
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b09      	cmp	r3, #9
 800301a:	f040 8095 	bne.w	8003148 <HAL_TIM_PeriodElapsedCallback+0xd70>
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b0b      	cmp	r3, #11
 8003024:	f040 8090 	bne.w	8003148 <HAL_TIM_PeriodElapsedCallback+0xd70>
			errorlaserx = -target_laserx[3] + lasery;
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 800302a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8003030:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003034:	f7fd f920 	bl	8000278 <__aeabi_dsub>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	493a      	ldr	r1, [pc, #232]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 800303e:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[7] - laserx;
 8003042:	4b3a      	ldr	r3, [pc, #232]	; (800312c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8003044:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd f913 	bl	8000278 <__aeabi_dsub>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4937      	ldr	r1, [pc, #220]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa69 	bl	8000538 <__aeabi_f2d>
 8003066:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f7fd f906 	bl	800027c <__adddf3>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fd78 	bl	8000b6c <__aeabi_d2f>
 800307c:	4603      	mov	r3, r0
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8003080:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa56 	bl	8000538 <__aeabi_f2d>
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd f8f3 	bl	800027c <__adddf3>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd65 	bl	8000b6c <__aeabi_d2f>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80030a6:	6053      	str	r3, [r2, #4]
			goal[2] = -1.57;
 80030a8:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80030aa:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 80030ac:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.03 && abs(errorlasery) <= 0.03 && State == 11) {
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fd30 	bl	8000b1c <__aeabi_d2iz>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f2c0 80e6 	blt.w	8003290 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7fd fd25 	bl	8000b1c <__aeabi_d2iz>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f300 80db 	bgt.w	8003290 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7fd fd1a 	bl	8000b1c <__aeabi_d2iz>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f2c0 80d0 	blt.w	8003290 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd0f 	bl	8000b1c <__aeabi_d2iz>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	f300 80c5 	bgt.w	8003290 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b0b      	cmp	r3, #11
 800310c:	f040 80c0 	bne.w	8003290 <HAL_TIM_PeriodElapsedCallback+0xeb8>
					State = 12;
 8003110:	4b02      	ldr	r3, [pc, #8]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8003112:	220c      	movs	r2, #12
 8003114:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.03 && abs(errorlasery) <= 0.03 && State == 11) {
 8003116:	e0bb      	b.n	8003290 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8003118:	20000472 	.word	0x20000472
 800311c:	20000470 	.word	0x20000470
 8003120:	200004a8 	.word	0x200004a8
 8003124:	20000070 	.word	0x20000070
 8003128:	200004b0 	.word	0x200004b0
 800312c:	20000090 	.word	0x20000090
 8003130:	200004a0 	.word	0x200004a0
 8003134:	200004b8 	.word	0x200004b8
 8003138:	2000000c 	.word	0x2000000c
 800313c:	2000048c 	.word	0x2000048c
 8003140:	20000420 	.word	0x20000420
 8003144:	bfc8f5c3 	.word	0xbfc8f5c3
			}
		}
		else if (Position == 10 && State == 12 ) {
 8003148:	4b45      	ldr	r3, [pc, #276]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xe88>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b0a      	cmp	r3, #10
 800314e:	f040 80a0 	bne.w	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8003152:	4b44      	ldr	r3, [pc, #272]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	f040 809b 	bne.w	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			errorlaserx = -target_laserx[3] + lasery;
 800315c:	4b42      	ldr	r3, [pc, #264]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xe90>)
 800315e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003162:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xe94>)
 8003164:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003168:	f7fd f886 	bl	8000278 <__aeabi_dsub>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	493f      	ldr	r1, [pc, #252]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 8003172:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[8] - laserx;
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_TIM_PeriodElapsedCallback+0xe9c>)
 8003178:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f7fd f879 	bl	8000278 <__aeabi_dsub>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	493c      	ldr	r1, [pc, #240]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 800318c:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0xea8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd f9cf 	bl	8000538 <__aeabi_f2d>
 800319a:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fd f86c 	bl	800027c <__adddf3>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7fd fcde 	bl	8000b6c <__aeabi_d2f>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a34      	ldr	r2, [pc, #208]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 80031b4:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9bc 	bl	8000538 <__aeabi_f2d>
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd f859 	bl	800027c <__adddf3>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fccb 	bl	8000b6c <__aeabi_d2f>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 80031da:	6053      	str	r3, [r2, #4]
			goal[2] = -1.57;
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 80031de:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 80031e0:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 12) {
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fc96 	bl	8000b1c <__aeabi_d2iz>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db4d      	blt.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f7fd fc8c 	bl	8000b1c <__aeabi_d2iz>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	dc43      	bgt.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fc82 	bl	8000b1c <__aeabi_d2iz>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	db39      	blt.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fc78 	bl	8000b1c <__aeabi_d2iz>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	dc2f      	bgt.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d12b      	bne.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
					State = 13;
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 800323c:	220d      	movs	r2, #13
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e027      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 8003242:	bf00      	nop
 8003244:	e025      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx)<= 0.05 && abs(errorlasery)<=0.05)
 8003246:	bf00      	nop
 8003248:	e023      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05) {
 800324a:	bf00      	nop
 800324c:	e021      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 7) {
 800324e:	bf00      	nop
 8003250:	e01f      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 8) {
 8003252:	bf00      	nop
 8003254:	e01d      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 9) {
 8003256:	bf00      	nop
 8003258:	e01b      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 10) {
 800325a:	bf00      	nop
 800325c:	e019      	b.n	8003292 <HAL_TIM_PeriodElapsedCallback+0xeba>
 800325e:	bf00      	nop
 8003260:	20000472 	.word	0x20000472
 8003264:	20000470 	.word	0x20000470
 8003268:	200004a8 	.word	0x200004a8
 800326c:	20000070 	.word	0x20000070
 8003270:	200004b0 	.word	0x200004b0
 8003274:	20000090 	.word	0x20000090
 8003278:	200004a0 	.word	0x200004a0
 800327c:	200004b8 	.word	0x200004b8
 8003280:	2000000c 	.word	0x2000000c
 8003284:	2000048c 	.word	0x2000048c
 8003288:	20000420 	.word	0x20000420
 800328c:	bfc8f5c3 	.word	0xbfc8f5c3
			if (abs(errorlaserx) <= 0.03 && abs(errorlasery) <= 0.03 && State == 11) {
 8003290:	bf00      	nop
			}
		}
	}
	if (htim->Instance == TIM12)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4aca      	ldr	r2, [pc, #808]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	f040 81d5 	bne.w	8003648 <HAL_TIM_PeriodElapsedCallback+0x1270>
	{
		read_encoder(&encoderX, &htim2, CPR_X);
 800329e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x11ec>
 80032a2:	49c9      	ldr	r1, [pc, #804]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 80032a4:	48c9      	ldr	r0, [pc, #804]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 80032a6:	f7fe fe2b 	bl	8001f00 <read_encoder>
	    read_encoder(&encoderY, &htim4, CPR_Y);
 80032aa:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x11ec>
 80032ae:	49c8      	ldr	r1, [pc, #800]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 80032b0:	48c8      	ldr	r0, [pc, #800]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 80032b2:	f7fe fe25 	bl	8001f00 <read_encoder>
	    W1 = (double) encoderX.rdps * r;
 80032b6:	4bc5      	ldr	r3, [pc, #788]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f93c 	bl	8000538 <__aeabi_f2d>
 80032c0:	a3b5      	add	r3, pc, #724	; (adr r3, 8003598 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fd f98f 	bl	80005e8 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc4b 	bl	8000b6c <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4abf      	ldr	r2, [pc, #764]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 80032da:	6013      	str	r3, [r2, #0]
	    W2 = (double) encoderY.rdps * r;
 80032dc:	4bbd      	ldr	r3, [pc, #756]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd f929 	bl	8000538 <__aeabi_f2d>
 80032e6:	a3ac      	add	r3, pc, #688	; (adr r3, 8003598 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fd f97c 	bl	80005e8 <__aeabi_dmul>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f7fd fc38 	bl	8000b6c <__aeabi_d2f>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4ab7      	ldr	r2, [pc, #732]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003300:	6013      	str	r3, [r2, #0]
	    Q = bno055_getVectorQuaternion();
 8003302:	f7fe fa2f 	bl	8001764 <bno055_getVectorQuaternion>
 8003306:	eeb0 4a40 	vmov.f32	s8, s0
 800330a:	eef0 4a60 	vmov.f32	s9, s1
 800330e:	eeb0 5a41 	vmov.f32	s10, s2
 8003312:	eef0 5a61 	vmov.f32	s11, s3
 8003316:	eeb0 6a42 	vmov.f32	s12, s4
 800331a:	eef0 6a62 	vmov.f32	s13, s5
 800331e:	eeb0 7a43 	vmov.f32	s14, s6
 8003322:	eef0 7a63 	vmov.f32	s15, s7
 8003326:	4bae      	ldr	r3, [pc, #696]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003328:	ed83 4b00 	vstr	d4, [r3]
 800332c:	ed83 5b02 	vstr	d5, [r3, #8]
 8003330:	ed83 6b04 	vstr	d6, [r3, #16]
 8003334:	ed83 7b06 	vstr	d7, [r3, #24]
		// yaw (z-axis rotation)
		siny_cosp = 2 * (Q.w * Q.z + Q.x * Q.y);
 8003338:	4ba9      	ldr	r3, [pc, #676]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 800333a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800333e:	4ba8      	ldr	r3, [pc, #672]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003340:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003344:	f7fd f950 	bl	80005e8 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	461d      	mov	r5, r3
 8003350:	4ba3      	ldr	r3, [pc, #652]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003352:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003356:	4ba2      	ldr	r3, [pc, #648]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003358:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800335c:	f7fd f944 	bl	80005e8 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fc ff88 	bl	800027c <__adddf3>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	f7fc ff80 	bl	800027c <__adddf3>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4998      	ldr	r1, [pc, #608]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8003382:	e9c1 2300 	strd	r2, r3, [r1]
		cosy_cosp = 1 - 2 * (Q.y * Q.y + Q.z * Q.z);
 8003386:	4b96      	ldr	r3, [pc, #600]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003388:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800338c:	4b94      	ldr	r3, [pc, #592]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 800338e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003392:	f7fd f929 	bl	80005e8 <__aeabi_dmul>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4614      	mov	r4, r2
 800339c:	461d      	mov	r5, r3
 800339e:	4b90      	ldr	r3, [pc, #576]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80033a0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80033a4:	4b8e      	ldr	r3, [pc, #568]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80033a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033aa:	f7fd f91d 	bl	80005e8 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc ff61 	bl	800027c <__adddf3>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	f7fc ff59 	bl	800027c <__adddf3>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	4985      	ldr	r1, [pc, #532]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x1210>)
 80033d4:	f7fc ff50 	bl	8000278 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4983      	ldr	r1, [pc, #524]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x1214>)
 80033de:	e9c1 2300 	strd	r2, r3, [r1]
		Angle.Yaw = atan2(siny_cosp, cosy_cosp);
 80033e2:	4b80      	ldr	r3, [pc, #512]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 80033e4:	ed93 7b00 	vldr	d7, [r3]
 80033e8:	4b80      	ldr	r3, [pc, #512]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x1214>)
 80033ea:	ed93 6b00 	vldr	d6, [r3]
 80033ee:	eeb0 1a46 	vmov.f32	s2, s12
 80033f2:	eef0 1a66 	vmov.f32	s3, s13
 80033f6:	eeb0 0a47 	vmov.f32	s0, s14
 80033fa:	eef0 0a67 	vmov.f32	s1, s15
 80033fe:	f006 fa85 	bl	800990c <atan2>
 8003402:	eeb0 7a40 	vmov.f32	s14, s0
 8003406:	eef0 7a60 	vmov.f32	s15, s1
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 800340c:	ed83 7b04 	vstr	d7, [r3, #16]
		//		theta = Angle.Yaw; // radians]
		theta = Angle.Yaw;
 8003410:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 8003412:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	f7fd fba7 	bl	8000b6c <__aeabi_d2f>
 800341e:	4603      	mov	r3, r0
 8003420:	4a74      	ldr	r2, [pc, #464]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003422:	6013      	str	r3, [r2, #0]
		Vx_enR = W1*cosf(theta) - W2*sinf(theta);
 8003424:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eeb0 0a67 	vmov.f32	s0, s15
 800342e:	f006 f9e3 	bl	80097f8 <cosf>
 8003432:	eeb0 7a40 	vmov.f32	s14, s0
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeb0 0a67 	vmov.f32	s0, s15
 800344a:	f006 fa19 	bl	8009880 <sinf>
 800344e:	eeb0 7a40 	vmov.f32	s14, s0
 8003452:	4b62      	ldr	r3, [pc, #392]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003460:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8003462:	edc3 7a00 	vstr	s15, [r3]
		Vy_enR = W1*sinf(theta) + W2*cosf(theta);
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	eeb0 0a67 	vmov.f32	s0, s15
 8003470:	f006 fa06 	bl	8009880 <sinf>
 8003474:	eeb0 7a40 	vmov.f32	s14, s0
 8003478:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003482:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	eeb0 0a67 	vmov.f32	s0, s15
 800348c:	f006 f9b4 	bl	80097f8 <cosf>
 8003490:	eeb0 7a40 	vmov.f32	s14, s0
 8003494:	4b51      	ldr	r3, [pc, #324]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	ee78 7a27 	vadd.f32	s15, s16, s15
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x1224>)
 80034a4:	edc3 7a00 	vstr	s15, [r3]
		X_enR = X_enR + Vx_enR*dt;
 80034a8:	4b55      	ldr	r3, [pc, #340]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd f843 	bl	8000538 <__aeabi_f2d>
 80034b2:	4604      	mov	r4, r0
 80034b4:	460d      	mov	r5, r1
 80034b6:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f83c 	bl	8000538 <__aeabi_f2d>
 80034c0:	a337      	add	r3, pc, #220	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd f88f 	bl	80005e8 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	f7fc fed3 	bl	800027c <__adddf3>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	f7fd fb45 	bl	8000b6c <__aeabi_d2f>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4a46      	ldr	r2, [pc, #280]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 80034e6:	6013      	str	r3, [r2, #0]
		Y_enR = Y_enR + Vy_enR*dt;
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f823 	bl	8000538 <__aeabi_f2d>
 80034f2:	4604      	mov	r4, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x1224>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f81c 	bl	8000538 <__aeabi_f2d>
 8003500:	a327      	add	r3, pc, #156	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f86f 	bl	80005e8 <__aeabi_dmul>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4620      	mov	r0, r4
 8003510:	4629      	mov	r1, r5
 8003512:	f7fc feb3 	bl	800027c <__adddf3>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f7fd fb25 	bl	8000b6c <__aeabi_d2f>
 8003522:	4603      	mov	r3, r0
 8003524:	4a37      	ldr	r2, [pc, #220]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 8003526:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 8003528:	2202      	movs	r2, #2
 800352a:	4937      	ldr	r1, [pc, #220]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800352c:	4837      	ldr	r0, [pc, #220]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800352e:	f000 fe49 	bl	80041c4 <HAL_ADC_Start_DMA>
		laserx = ((AD_RES[1] *0.01416) + 0.1963)/10; //aready
 8003532:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8003534:	885b      	ldrh	r3, [r3, #2]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fc ffec 	bl	8000514 <__aeabi_i2d>
 800353c:	a31a      	add	r3, pc, #104	; (adr r3, 80035a8 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f7fd f851 	bl	80005e8 <__aeabi_dmul>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	a318      	add	r3, pc, #96	; (adr r3, 80035b0 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f7fc fe92 	bl	800027c <__adddf3>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 8003566:	f7fd f969 	bl	800083c <__aeabi_ddiv>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4929      	ldr	r1, [pc, #164]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003570:	e9c1 2300 	strd	r2, r3, [r1]
		lasery = ((AD_RES[0] *0.01289) + 0.3364)/10;
 8003574:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ffcb 	bl	8000514 <__aeabi_i2d>
 800357e:	a30e      	add	r3, pc, #56	; (adr r3, 80035b8 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fd f830 	bl	80005e8 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	e042      	b.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x1240>
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	eb851eb8 	.word	0xeb851eb8
 800359c:	3f9eb851 	.word	0x3f9eb851
 80035a0:	47ae147b 	.word	0x47ae147b
 80035a4:	3f847ae1 	.word	0x3f847ae1
 80035a8:	074a771d 	.word	0x074a771d
 80035ac:	3f8cffeb 	.word	0x3f8cffeb
 80035b0:	c01a36e3 	.word	0xc01a36e3
 80035b4:	3fc9205b 	.word	0x3fc9205b
 80035b8:	839042d9 	.word	0x839042d9
 80035bc:	3f8a6612 	.word	0x3f8a6612
 80035c0:	40001800 	.word	0x40001800
 80035c4:	44b40000 	.word	0x44b40000
 80035c8:	2000051c 	.word	0x2000051c
 80035cc:	20000388 	.word	0x20000388
 80035d0:	200005ac 	.word	0x200005ac
 80035d4:	200003a8 	.word	0x200003a8
 80035d8:	20000424 	.word	0x20000424
 80035dc:	20000428 	.word	0x20000428
 80035e0:	200003e0 	.word	0x200003e0
 80035e4:	20000438 	.word	0x20000438
 80035e8:	3ff00000 	.word	0x3ff00000
 80035ec:	20000440 	.word	0x20000440
 80035f0:	200003c8 	.word	0x200003c8
 80035f4:	20000434 	.word	0x20000434
 80035f8:	2000042c 	.word	0x2000042c
 80035fc:	20000430 	.word	0x20000430
 8003600:	2000000c 	.word	0x2000000c
 8003604:	20000420 	.word	0x20000420
 8003608:	20000498 	.word	0x20000498
 800360c:	20000164 	.word	0x20000164
 8003610:	40240000 	.word	0x40240000
 8003614:	200004a0 	.word	0x200004a0
 8003618:	a312      	add	r3, pc, #72	; (adr r3, 8003664 <HAL_TIM_PeriodElapsedCallback+0x128c>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f7fc fe2d 	bl	800027c <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 8003630:	f7fd f904 	bl	800083c <__aeabi_ddiv>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4908      	ldr	r1, [pc, #32]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x1284>)
 800363a:	e9c1 2300 	strd	r2, r3, [r1]
		p++;
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 8003646:	6013      	str	r3, [r2, #0]

	}
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	ecbd 8b02 	vpop	{d8}
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	f3af 8000 	nop.w
 8003658:	40240000 	.word	0x40240000
 800365c:	200004a8 	.word	0x200004a8
 8003660:	2000046c 	.word	0x2000046c
 8003664:	dd97f62b 	.word	0xdd97f62b
 8003668:	3fd58793 	.word	0x3fd58793

0800366c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003670:	b672      	cpsid	i
}
 8003672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003674:	e7fe      	b.n	8003674 <Error_Handler+0x8>
	...

08003678 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <MX_SPI1_Init+0x64>)
 800367e:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <MX_SPI1_Init+0x68>)
 8003680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003682:	4b16      	ldr	r3, [pc, #88]	; (80036dc <MX_SPI1_Init+0x64>)
 8003684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <MX_SPI1_Init+0x64>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <MX_SPI1_Init+0x64>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <MX_SPI1_Init+0x64>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <MX_SPI1_Init+0x64>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <MX_SPI1_Init+0x64>)
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <MX_SPI1_Init+0x64>)
 80036ac:	2220      	movs	r2, #32
 80036ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <MX_SPI1_Init+0x64>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <MX_SPI1_Init+0x64>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <MX_SPI1_Init+0x64>)
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <MX_SPI1_Init+0x64>)
 80036c4:	220a      	movs	r2, #10
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <MX_SPI1_Init+0x64>)
 80036ca:	f004 f9fb 	bl	8007ac4 <HAL_SPI_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036d4:	f7ff ffca 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200004c0 	.word	0x200004c0
 80036e0:	40013000 	.word	0x40013000

080036e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_SPI_MspInit+0x84>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d12b      	bne.n	800375e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_SPI_MspInit+0x88>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <HAL_SPI_MspInit+0x88>)
 8003710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_SPI_MspInit+0x88>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_SPI_MspInit+0x88>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a10      	ldr	r2, [pc, #64]	; (800376c <HAL_SPI_MspInit+0x88>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_SPI_MspInit+0x88>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800373e:	23e0      	movs	r3, #224	; 0xe0
 8003740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800374e:	2305      	movs	r3, #5
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	4619      	mov	r1, r3
 8003758:	4805      	ldr	r0, [pc, #20]	; (8003770 <HAL_SPI_MspInit+0x8c>)
 800375a:	f002 fbe5 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40013000 	.word	0x40013000
 800376c:	40023800 	.word	0x40023800
 8003770:	40020000 	.word	0x40020000

08003774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_MspInit+0x4c>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <HAL_MspInit+0x4c>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003788:	6453      	str	r3, [r2, #68]	; 0x44
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_MspInit+0x4c>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_MspInit+0x4c>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <HAL_MspInit+0x4c>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_MspInit+0x4c>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800

080037c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037c8:	e7fe      	b.n	80037c8 <NMI_Handler+0x4>

080037ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ce:	e7fe      	b.n	80037ce <HardFault_Handler+0x4>

080037d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <MemManage_Handler+0x4>

080037d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <BusFault_Handler+0x4>

080037dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <UsageFault_Handler+0x4>

080037e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003810:	f000 fc50 	bl	80040b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800381c:	4802      	ldr	r0, [pc, #8]	; (8003828 <CAN1_RX0_IRQHandler+0x10>)
 800381e:	f001 fcd2 	bl	80051c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	2000020c 	.word	0x2000020c

0800382c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003830:	2040      	movs	r0, #64	; 0x40
 8003832:	f002 fd2f 	bl	8006294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003840:	4802      	ldr	r0, [pc, #8]	; (800384c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003842:	f004 fbbb 	bl	8007fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2000063c 	.word	0x2000063c

08003850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003854:	4802      	ldr	r0, [pc, #8]	; (8003860 <TIM3_IRQHandler+0x10>)
 8003856:	f004 fbb1 	bl	8007fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000564 	.word	0x20000564

08003864 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003868:	4802      	ldr	r0, [pc, #8]	; (8003874 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800386a:	f004 fba7 	bl	8007fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000684 	.word	0x20000684

08003878 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <TIM5_IRQHandler+0x10>)
 800387e:	f004 fb9d 	bl	8007fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200005f4 	.word	0x200005f4

0800388c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <DMA2_Stream0_IRQHandler+0x10>)
 8003892:	f002 f8df 	bl	8005a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200001ac 	.word	0x200001ac

080038a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e00a      	b.n	80038c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038b2:	f3af 8000 	nop.w
 80038b6:	4601      	mov	r1, r0
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	60ba      	str	r2, [r7, #8]
 80038be:	b2ca      	uxtb	r2, r1
 80038c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dbf0      	blt.n	80038b2 <_read+0x12>
  }

  return len;
 80038d0:	687b      	ldr	r3, [r7, #4]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e009      	b.n	8003900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	60ba      	str	r2, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	dbf1      	blt.n	80038ec <_write+0x12>
  }
  return len;
 8003908:	687b      	ldr	r3, [r7, #4]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_close>:

int _close(int file)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800393a:	605a      	str	r2, [r3, #4]
  return 0;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_isatty>:

int _isatty(int file)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003952:	2301      	movs	r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <_sbrk+0x5c>)
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <_sbrk+0x60>)
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <_sbrk+0x64>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <_sbrk+0x64>)
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <_sbrk+0x68>)
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <_sbrk+0x64>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d207      	bcs.n	80039bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039ac:	f004 feee 	bl	800878c <__errno>
 80039b0:	4603      	mov	r3, r0
 80039b2:	220c      	movs	r2, #12
 80039b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ba:	e009      	b.n	80039d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <_sbrk+0x64>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <_sbrk+0x64>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <_sbrk+0x64>)
 80039cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20020000 	.word	0x20020000
 80039dc:	00000400 	.word	0x00000400
 80039e0:	20000518 	.word	0x20000518
 80039e4:	200006e0 	.word	0x200006e0

080039e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <SystemInit+0x20>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <SystemInit+0x20>)
 80039f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fee0 	bl	80087e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a30:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a4a:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a50:	2303      	movs	r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a64:	2300      	movs	r3, #0
 8003a66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	4619      	mov	r1, r3
 8003a7a:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a7c:	f004 f96a 	bl	8007d54 <HAL_TIM_Encoder_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003a86:	f7ff fdf1 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4806      	ldr	r0, [pc, #24]	; (8003ab0 <MX_TIM2_Init+0xa4>)
 8003a98:	f004 fde8 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003aa2:	f7ff fde3 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003aa6:	bf00      	nop
 8003aa8:	3730      	adds	r7, #48	; 0x30
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000051c 	.word	0x2000051c

08003ab4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac8:	463b      	mov	r3, r7
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <MX_TIM3_Init+0x98>)
 8003ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003ad8:	2253      	movs	r2, #83	; 0x53
 8003ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003ae4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003af6:	4814      	ldr	r0, [pc, #80]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003af8:	f004 f86d 	bl	8007bd6 <HAL_TIM_Base_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003b02:	f7ff fdb3 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b0c:	f107 0308 	add.w	r3, r7, #8
 8003b10:	4619      	mov	r1, r3
 8003b12:	480d      	ldr	r0, [pc, #52]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003b14:	f004 fb5a 	bl	80081cc <HAL_TIM_ConfigClockSource>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003b1e:	f7ff fda5 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b2a:	463b      	mov	r3, r7
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4806      	ldr	r0, [pc, #24]	; (8003b48 <MX_TIM3_Init+0x94>)
 8003b30:	f004 fd9c 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b3a:	f7ff fd97 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000564 	.word	0x20000564
 8003b4c:	40000400 	.word	0x40000400

08003b50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	; 0x30
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 fe3e 	bl	80087e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003b6e:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <MX_TIM4_Init+0xa4>)
 8003b70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b72:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b92:	2303      	movs	r3, #3
 8003b94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	4619      	mov	r1, r3
 8003bbc:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003bbe:	f004 f8c9 	bl	8007d54 <HAL_TIM_Encoder_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003bc8:	f7ff fd50 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <MX_TIM4_Init+0xa0>)
 8003bda:	f004 fd47 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003be4:	f7ff fd42 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	3730      	adds	r7, #48	; 0x30
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200005ac 	.word	0x200005ac
 8003bf4:	40000800 	.word	0x40000800

08003bf8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <MX_TIM5_Init+0x98>)
 8003c18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 183;
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c1c:	22b7      	movs	r2, #183	; 0xb7
 8003c1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c28:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c34:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c36:	2280      	movs	r2, #128	; 0x80
 8003c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003c3a:	4814      	ldr	r0, [pc, #80]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c3c:	f003 ffcb 	bl	8007bd6 <HAL_TIM_Base_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003c46:	f7ff fd11 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	4619      	mov	r1, r3
 8003c56:	480d      	ldr	r0, [pc, #52]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c58:	f004 fab8 	bl	80081cc <HAL_TIM_ConfigClockSource>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003c62:	f7ff fd03 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c6e:	463b      	mov	r3, r7
 8003c70:	4619      	mov	r1, r3
 8003c72:	4806      	ldr	r0, [pc, #24]	; (8003c8c <MX_TIM5_Init+0x94>)
 8003c74:	f004 fcfa 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003c7e:	f7ff fcf5 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200005f4 	.word	0x200005f4
 8003c90:	40000c00 	.word	0x40000c00

08003c94 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <MX_TIM9_Init+0x70>)
 8003caa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003cae:	22a7      	movs	r2, #167	; 0xa7
 8003cb0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003cba:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cbe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003ccc:	480c      	ldr	r0, [pc, #48]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003cce:	f003 ff82 	bl	8007bd6 <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003cd8:	f7ff fcc8 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4806      	ldr	r0, [pc, #24]	; (8003d00 <MX_TIM9_Init+0x6c>)
 8003ce8:	f004 fa70 	bl	80081cc <HAL_TIM_ConfigClockSource>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003cf2:	f7ff fcbb 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000063c 	.word	0x2000063c
 8003d04:	40014000 	.word	0x40014000

08003d08 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d0e:	463b      	mov	r3, r7
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d1c:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <MX_TIM12_Init+0x70>)
 8003d1e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d22:	2253      	movs	r2, #83	; 0x53
 8003d24:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d32:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003d40:	480c      	ldr	r0, [pc, #48]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d42:	f003 ff48 	bl	8007bd6 <HAL_TIM_Base_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003d4c:	f7ff fc8e 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d54:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003d56:	463b      	mov	r3, r7
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4806      	ldr	r0, [pc, #24]	; (8003d74 <MX_TIM12_Init+0x6c>)
 8003d5c:	f004 fa36 	bl	80081cc <HAL_TIM_ConfigClockSource>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8003d66:	f7ff fc81 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000684 	.word	0x20000684
 8003d78:	40001800 	.word	0x40001800

08003d7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	; 0x30
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d84:	f107 031c 	add.w	r3, r7, #28
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d14b      	bne.n	8003e36 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a3f      	ldr	r2, [pc, #252]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e04:	2301      	movs	r3, #1
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4826      	ldr	r0, [pc, #152]	; (8003ea8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003e10:	f002 f88a 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e14:	2308      	movs	r3, #8
 8003e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e24:	2301      	movs	r3, #1
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	481f      	ldr	r0, [pc, #124]	; (8003eac <HAL_TIM_Encoder_MspInit+0x130>)
 8003e30:	f002 f87a 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003e34:	e031      	b.n	8003e9a <HAL_TIM_Encoder_MspInit+0x11e>
  else if(tim_encoderHandle->Instance==TIM4)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_TIM_Encoder_MspInit+0x134>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d12c      	bne.n	8003e9a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003e78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e86:	2300      	movs	r3, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4619      	mov	r1, r3
 8003e94:	4807      	ldr	r0, [pc, #28]	; (8003eb4 <HAL_TIM_Encoder_MspInit+0x138>)
 8003e96:	f002 f847 	bl	8005f28 <HAL_GPIO_Init>
}
 8003e9a:	bf00      	nop
 8003e9c:	3730      	adds	r7, #48	; 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40020400 	.word	0x40020400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40020c00 	.word	0x40020c00

08003eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <HAL_TIM_Base_MspInit+0xf0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d116      	bne.n	8003ef8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	4b37      	ldr	r3, [pc, #220]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a36      	ldr	r2, [pc, #216]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	201d      	movs	r0, #29
 8003eec:	f001 fc75 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ef0:	201d      	movs	r0, #29
 8003ef2:	f001 fc8e 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003ef6:	e052      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <HAL_TIM_Base_MspInit+0xf8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d116      	bne.n	8003f30 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2032      	movs	r0, #50	; 0x32
 8003f24:	f001 fc59 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f28:	2032      	movs	r0, #50	; 0x32
 8003f2a:	f001 fc72 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 8003f2e:	e036      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM9)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIM_Base_MspInit+0xfc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d116      	bne.n	8003f68 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003f56:	2200      	movs	r2, #0
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2018      	movs	r0, #24
 8003f5c:	f001 fc3d 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003f60:	2018      	movs	r0, #24
 8003f62:	f001 fc56 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 8003f66:	e01a      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM12)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <HAL_TIM_Base_MspInit+0x100>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d115      	bne.n	8003f9e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_TIM_Base_MspInit+0xf4>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	202b      	movs	r0, #43	; 0x2b
 8003f94:	f001 fc21 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f98:	202b      	movs	r0, #43	; 0x2b
 8003f9a:	f001 fc3a 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40001800 	.word	0x40001800

08003fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fc0:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fc2:	490e      	ldr	r1, [pc, #56]	; (8003ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc8:	e002      	b.n	8003fd0 <LoopCopyDataInit>

08003fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fce:	3304      	adds	r3, #4

08003fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd4:	d3f9      	bcc.n	8003fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fd8:	4c0b      	ldr	r4, [pc, #44]	; (8004008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fdc:	e001      	b.n	8003fe2 <LoopFillZerobss>

08003fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe0:	3204      	adds	r2, #4

08003fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe4:	d3fb      	bcc.n	8003fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fe6:	f7ff fcff 	bl	80039e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fea:	f004 fbd5 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fee:	f7fe f8ff 	bl	80021f0 <main>
  bx  lr    
 8003ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ffc:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8004000:	0800af80 	.word	0x0800af80
  ldr r2, =_sbss
 8004004:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8004008:	200006e0 	.word	0x200006e0

0800400c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800400c:	e7fe      	b.n	800400c <ADC_IRQHandler>
	...

08004010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_Init+0x40>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <HAL_Init+0x40>)
 800401a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_Init+0x40>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <HAL_Init+0x40>)
 8004026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800402a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_Init+0x40>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <HAL_Init+0x40>)
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004038:	2003      	movs	r0, #3
 800403a:	f001 fbc3 	bl	80057c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800403e:	200f      	movs	r0, #15
 8004040:	f000 f808 	bl	8004054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004044:	f7ff fb96 	bl	8003774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00

08004054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_InitTick+0x54>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_InitTick+0x58>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800406a:	fbb3 f3f1 	udiv	r3, r3, r1
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fbdb 	bl	800582e <HAL_SYSTICK_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e00e      	b.n	80040a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d80a      	bhi.n	800409e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004088:	2200      	movs	r2, #0
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004090:	f001 fba3 	bl	80057da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004094:	4a06      	ldr	r2, [pc, #24]	; (80040b0 <HAL_InitTick+0x5c>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200000d8 	.word	0x200000d8
 80040ac:	200000e0 	.word	0x200000e0
 80040b0:	200000dc 	.word	0x200000dc

080040b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_IncTick+0x20>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_IncTick+0x24>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4413      	add	r3, r2
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_IncTick+0x24>)
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	200000e0 	.word	0x200000e0
 80040d8:	200006cc 	.word	0x200006cc

080040dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return uwTick;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_GetTick+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	200006cc 	.word	0x200006cc

080040f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7ff ffee 	bl	80040dc <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800410c:	d005      	beq.n	800411a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_Delay+0x44>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800411a:	bf00      	nop
 800411c:	f7ff ffde 	bl	80040dc <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d8f7      	bhi.n	800411c <HAL_Delay+0x28>
  {
  }
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200000e0 	.word	0x200000e0

0800413c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e033      	b.n	80041ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd f8de 	bl	800131c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004182:	f023 0302 	bic.w	r3, r3, #2
 8004186:	f043 0202 	orr.w	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fa68 	bl	8004664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
 80041aa:	e001      	b.n	80041b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_Start_DMA+0x1e>
 80041de:	2302      	movs	r3, #2
 80041e0:	e0e9      	b.n	80043b6 <HAL_ADC_Start_DMA+0x1f2>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d018      	beq.n	800422a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004208:	4b6d      	ldr	r3, [pc, #436]	; (80043c0 <HAL_ADC_Start_DMA+0x1fc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6d      	ldr	r2, [pc, #436]	; (80043c4 <HAL_ADC_Start_DMA+0x200>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9a      	lsrs	r2, r3, #18
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800421c:	e002      	b.n	8004224 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3b01      	subs	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f9      	bne.n	800421e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004238:	d107      	bne.n	800424a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004248:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	f040 80a1 	bne.w	800439c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004284:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004298:	d106      	bne.n	80042a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f023 0206 	bic.w	r2, r3, #6
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
 80042a6:	e002      	b.n	80042ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b6:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <HAL_ADC_Start_DMA+0x204>)
 80042b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	4a43      	ldr	r2, [pc, #268]	; (80043cc <HAL_ADC_Start_DMA+0x208>)
 80042c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4a42      	ldr	r2, [pc, #264]	; (80043d0 <HAL_ADC_Start_DMA+0x20c>)
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	4a41      	ldr	r2, [pc, #260]	; (80043d4 <HAL_ADC_Start_DMA+0x210>)
 80042d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80042da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80042ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	334c      	adds	r3, #76	; 0x4c
 8004306:	4619      	mov	r1, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f001 fb4a 	bl	80059a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12a      	bne.n	8004372 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <HAL_ADC_Start_DMA+0x214>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d015      	beq.n	8004352 <HAL_ADC_Start_DMA+0x18e>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <HAL_ADC_Start_DMA+0x218>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d105      	bne.n	800433c <HAL_ADC_Start_DMA+0x178>
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <HAL_ADC_Start_DMA+0x204>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <HAL_ADC_Start_DMA+0x21c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d136      	bne.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <HAL_ADC_Start_DMA+0x204>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d130      	bne.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d129      	bne.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	e020      	b.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <HAL_ADC_Start_DMA+0x214>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d11b      	bne.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d114      	bne.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004398:	609a      	str	r2, [r3, #8]
 800439a:	e00b      	b.n	80043b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0210 	orr.w	r2, r3, #16
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200000d8 	.word	0x200000d8
 80043c4:	431bde83 	.word	0x431bde83
 80043c8:	40012300 	.word	0x40012300
 80043cc:	0800485d 	.word	0x0800485d
 80043d0:	08004917 	.word	0x08004917
 80043d4:	08004933 	.word	0x08004933
 80043d8:	40012000 	.word	0x40012000
 80043dc:	40012100 	.word	0x40012100
 80043e0:	40012200 	.word	0x40012200

080043e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x1c>
 8004438:	2302      	movs	r3, #2
 800443a:	e105      	b.n	8004648 <HAL_ADC_ConfigChannel+0x228>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b09      	cmp	r3, #9
 800444a:	d925      	bls.n	8004498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	3b1e      	subs	r3, #30
 8004462:	2207      	movs	r2, #7
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43da      	mvns	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	400a      	ands	r2, r1
 8004470:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68d9      	ldr	r1, [r3, #12]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	4618      	mov	r0, r3
 8004484:	4603      	mov	r3, r0
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4403      	add	r3, r0
 800448a:	3b1e      	subs	r3, #30
 800448c:	409a      	lsls	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	e022      	b.n	80044de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6919      	ldr	r1, [r3, #16]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	2207      	movs	r2, #7
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	400a      	ands	r2, r1
 80044ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6919      	ldr	r1, [r3, #16]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4618      	mov	r0, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4403      	add	r3, r0
 80044d4:	409a      	lsls	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d824      	bhi.n	8004530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	3b05      	subs	r3, #5
 80044f8:	221f      	movs	r2, #31
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43da      	mvns	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	400a      	ands	r2, r1
 8004506:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	4618      	mov	r0, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	3b05      	subs	r3, #5
 8004522:	fa00 f203 	lsl.w	r2, r0, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	635a      	str	r2, [r3, #52]	; 0x34
 800452e:	e04c      	b.n	80045ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d824      	bhi.n	8004582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	3b23      	subs	r3, #35	; 0x23
 800454a:	221f      	movs	r2, #31
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43da      	mvns	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	400a      	ands	r2, r1
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	4618      	mov	r0, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	3b23      	subs	r3, #35	; 0x23
 8004574:	fa00 f203 	lsl.w	r2, r0, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
 8004580:	e023      	b.n	80045ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	3b41      	subs	r3, #65	; 0x41
 8004594:	221f      	movs	r2, #31
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	400a      	ands	r2, r1
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	4618      	mov	r0, r3
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	3b41      	subs	r3, #65	; 0x41
 80045be:	fa00 f203 	lsl.w	r2, r0, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045ca:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_ADC_ConfigChannel+0x234>)
 80045cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a21      	ldr	r2, [pc, #132]	; (8004658 <HAL_ADC_ConfigChannel+0x238>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d109      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x1cc>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b12      	cmp	r3, #18
 80045de:	d105      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a19      	ldr	r2, [pc, #100]	; (8004658 <HAL_ADC_ConfigChannel+0x238>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d123      	bne.n	800463e <HAL_ADC_ConfigChannel+0x21e>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d003      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x1e6>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b11      	cmp	r3, #17
 8004604:	d11b      	bne.n	800463e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b10      	cmp	r3, #16
 8004618:	d111      	bne.n	800463e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <HAL_ADC_ConfigChannel+0x23c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a10      	ldr	r2, [pc, #64]	; (8004660 <HAL_ADC_ConfigChannel+0x240>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	0c9a      	lsrs	r2, r3, #18
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004630:	e002      	b.n	8004638 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3b01      	subs	r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f9      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40012300 	.word	0x40012300
 8004658:	40012000 	.word	0x40012000
 800465c:	200000d8 	.word	0x200000d8
 8004660:	431bde83 	.word	0x431bde83

08004664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800466c:	4b79      	ldr	r3, [pc, #484]	; (8004854 <ADC_Init+0x1f0>)
 800466e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	021a      	lsls	r2, r3, #8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	4a58      	ldr	r2, [pc, #352]	; (8004858 <ADC_Init+0x1f4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d022      	beq.n	8004742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800470a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800472c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	e00f      	b.n	8004762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0202 	bic.w	r2, r2, #2
 8004770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7e1b      	ldrb	r3, [r3, #24]
 800477c:	005a      	lsls	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	3b01      	subs	r3, #1
 80047bc:	035a      	lsls	r2, r3, #13
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e007      	b.n	80047d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	051a      	lsls	r2, r3, #20
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800480c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800481a:	025a      	lsls	r2, r3, #9
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6899      	ldr	r1, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	029a      	lsls	r2, r3, #10
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40012300 	.word	0x40012300
 8004858:	0f000001 	.word	0x0f000001

0800485c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d13c      	bne.n	80048f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12b      	bne.n	80048e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004894:	2b00      	cmp	r3, #0
 8004896:	d127      	bne.n	80048e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d119      	bne.n	80048e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0220 	bic.w	r2, r2, #32
 80048c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff fd7b 	bl	80043e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048ee:	e00e      	b.n	800490e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fd85 	bl	800440c <HAL_ADC_ErrorCallback>
}
 8004902:	e004      	b.n	800490e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff fd67 	bl	80043f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f043 0204 	orr.w	r2, r3, #4
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fd5a 	bl	800440c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0ed      	b.n	8004b4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc ff86 	bl	8001890 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004994:	f7ff fba2 	bl	80040dc <HAL_GetTick>
 8004998:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800499a:	e012      	b.n	80049c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800499c:	f7ff fb9e 	bl	80040dc <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b0a      	cmp	r3, #10
 80049a8:	d90b      	bls.n	80049c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2205      	movs	r2, #5
 80049ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0c5      	b.n	8004b4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0e5      	beq.n	800499c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0202 	bic.w	r2, r2, #2
 80049de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049e0:	f7ff fb7c 	bl	80040dc <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049e6:	e012      	b.n	8004a0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049e8:	f7ff fb78 	bl	80040dc <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b0a      	cmp	r3, #10
 80049f4:	d90b      	bls.n	8004a0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2205      	movs	r2, #5
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e09f      	b.n	8004b4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7e1b      	ldrb	r3, [r3, #24]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d108      	bne.n	8004a36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e007      	b.n	8004a46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7e5b      	ldrb	r3, [r3, #25]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d108      	bne.n	8004a60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e007      	b.n	8004a70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7e9b      	ldrb	r3, [r3, #26]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d108      	bne.n	8004a8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0220 	orr.w	r2, r2, #32
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e007      	b.n	8004a9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0220 	bic.w	r2, r2, #32
 8004a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7edb      	ldrb	r3, [r3, #27]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d108      	bne.n	8004ab4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0210 	bic.w	r2, r2, #16
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e007      	b.n	8004ac4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0210 	orr.w	r2, r2, #16
 8004ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7f1b      	ldrb	r3, [r3, #28]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e007      	b.n	8004aee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0208 	bic.w	r2, r2, #8
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7f5b      	ldrb	r3, [r3, #29]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d108      	bne.n	8004b08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0204 	orr.w	r2, r2, #4
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0204 	bic.w	r2, r2, #4
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	ea42 0103 	orr.w	r1, r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d003      	beq.n	8004b7e <HAL_CAN_ConfigFilter+0x26>
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f040 80be 	bne.w	8004cfa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_CAN_ConfigFilter+0x1bc>)
 8004b80:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	401a      	ands	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d123      	bne.n	8004c28 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	401a      	ands	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3248      	adds	r2, #72	; 0x48
 8004c08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c1e:	6979      	ldr	r1, [r7, #20]
 8004c20:	3348      	adds	r3, #72	; 0x48
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	440b      	add	r3, r1
 8004c26:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d122      	bne.n	8004c76 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3248      	adds	r2, #72	; 0x48
 8004c56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c6c:	6979      	ldr	r1, [r7, #20]
 8004c6e:	3348      	adds	r3, #72	; 0x48
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	440b      	add	r3, r1
 8004c74:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	401a      	ands	r2, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004c90:	e007      	b.n	8004ca2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	401a      	ands	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004cbc:	e007      	b.n	8004cce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cec:	f023 0201 	bic.w	r2, r3, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e006      	b.n	8004d08 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40006400 	.word	0x40006400

08004d18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d12e      	bne.n	8004d8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d44:	f7ff f9ca 	bl	80040dc <HAL_GetTick>
 8004d48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d4a:	e012      	b.n	8004d72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d4c:	f7ff f9c6 	bl	80040dc <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b0a      	cmp	r3, #10
 8004d58:	d90b      	bls.n	8004d72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e012      	b.n	8004d98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e5      	bne.n	8004d4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e006      	b.n	8004d98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004db4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dbe:	7ffb      	ldrb	r3, [r7, #31]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d003      	beq.n	8004dcc <HAL_CAN_AddTxMessage+0x2c>
 8004dc4:	7ffb      	ldrb	r3, [r7, #31]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	f040 80b8 	bne.w	8004f3c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80a0 	beq.w	8004f2c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	0e1b      	lsrs	r3, r3, #24
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d907      	bls.n	8004e0c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e09e      	b.n	8004f4a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	409a      	lsls	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	6809      	ldr	r1, [r1, #0]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3318      	adds	r3, #24
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	440b      	add	r3, r1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e00f      	b.n	8004e5a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	3318      	adds	r3, #24
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	440b      	add	r3, r1
 8004e58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3318      	adds	r3, #24
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	440b      	add	r3, r1
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	7d1b      	ldrb	r3, [r3, #20]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d111      	bne.n	8004e9a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3318      	adds	r3, #24
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	440b      	add	r3, r1
 8004e96:	3304      	adds	r3, #4
 8004e98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	061a      	lsls	r2, r3, #24
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3306      	adds	r3, #6
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3305      	adds	r3, #5
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	3204      	adds	r2, #4
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	ea43 0200 	orr.w	r2, r3, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	440b      	add	r3, r1
 8004ecc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ed0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3303      	adds	r3, #3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	061a      	lsls	r2, r3, #24
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3302      	adds	r3, #2
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	4313      	orrs	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	6811      	ldr	r1, [r2, #0]
 8004ef8:	ea43 0200 	orr.w	r2, r3, r0
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3318      	adds	r3, #24
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4413      	add	r3, r2
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6811      	ldr	r1, [r2, #0]
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	3318      	adds	r3, #24
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	440b      	add	r3, r1
 8004f26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e00e      	b.n	8004f4a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e006      	b.n	8004f4a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f6a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d003      	beq.n	8004f7a <HAL_CAN_GetRxMessage+0x24>
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	f040 80f3 	bne.w	8005160 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10e      	bne.n	8004f9e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0e7      	b.n	800516e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0d8      	b.n	800516e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	331b      	adds	r3, #27
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	4413      	add	r3, r2
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0204 	and.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	331b      	adds	r3, #27
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	4413      	add	r3, r2
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0d5b      	lsrs	r3, r3, #21
 8004fea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e00b      	b.n	800500c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	331b      	adds	r3, #27
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	4413      	add	r3, r2
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	08db      	lsrs	r3, r3, #3
 8005004:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	331b      	adds	r3, #27
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0202 	and.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	331b      	adds	r3, #27
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	331b      	adds	r3, #27
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	331b      	adds	r3, #27
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	b29a      	uxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4413      	add	r3, r2
 8005074:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	4413      	add	r3, r2
 800508a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	0a1a      	lsrs	r2, r3, #8
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	0c1a      	lsrs	r2, r3, #16
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	3302      	adds	r3, #2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	4413      	add	r3, r2
 80050be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e1a      	lsrs	r2, r3, #24
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	3303      	adds	r3, #3
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	3304      	adds	r3, #4
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0a1a      	lsrs	r2, r3, #8
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	3305      	adds	r3, #5
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	4413      	add	r3, r2
 800510a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0c1a      	lsrs	r2, r3, #16
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	3306      	adds	r3, #6
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	4413      	add	r3, r2
 8005124:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	0e1a      	lsrs	r2, r3, #24
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3307      	adds	r3, #7
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0220 	orr.w	r2, r2, #32
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	e007      	b.n	800515c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0220 	orr.w	r2, r2, #32
 800515a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e006      	b.n	800516e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800518a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d002      	beq.n	8005198 <HAL_CAN_ActivateNotification+0x1e>
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d109      	bne.n	80051ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6959      	ldr	r1, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e006      	b.n	80051ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b08a      	sub	sp, #40	; 0x28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d07c      	beq.n	8005306 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d023      	beq.n	800525e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f983 	bl	8005534 <HAL_CAN_TxMailbox0CompleteCallback>
 800522e:	e016      	b.n	800525e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	e00c      	b.n	800525e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	e002      	b.n	800525e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f989 	bl	8005570 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d024      	beq.n	80052b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f963 	bl	8005548 <HAL_CAN_TxMailbox1CompleteCallback>
 8005282:	e016      	b.n	80052b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	e00c      	b.n	80052b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e002      	b.n	80052b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f969 	bl	8005584 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d024      	beq.n	8005306 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f943 	bl	800555c <HAL_CAN_TxMailbox2CompleteCallback>
 80052d6:	e016      	b.n	8005306 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	e00c      	b.n	8005306 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	e002      	b.n	8005306 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f949 	bl	8005598 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00c      	beq.n	800532a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005320:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2210      	movs	r2, #16
 8005328:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d006      	beq.n	800534c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2208      	movs	r2, #8
 8005344:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f930 	bl	80055ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fc fe5b 	bl	8002020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005384:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2210      	movs	r2, #16
 800538c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2208      	movs	r2, #8
 80053a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f912 	bl	80055d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8f9 	bl	80055c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2210      	movs	r2, #16
 80053e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8fc 	bl	80055e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d006      	beq.n	8005412 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8f5 	bl	80055fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d07b      	beq.n	8005514 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d072      	beq.n	800550c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	f043 0304 	orr.w	r3, r3, #4
 8005478:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005480:	2b00      	cmp	r3, #0
 8005482:	d043      	beq.n	800550c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800548a:	2b00      	cmp	r3, #0
 800548c:	d03e      	beq.n	800550c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d02b      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x32a>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d82e      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 800549c:	2b50      	cmp	r3, #80	; 0x50
 800549e:	d022      	beq.n	80054e6 <HAL_CAN_IRQHandler+0x320>
 80054a0:	2b50      	cmp	r3, #80	; 0x50
 80054a2:	d82a      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d019      	beq.n	80054dc <HAL_CAN_IRQHandler+0x316>
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d826      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d010      	beq.n	80054d2 <HAL_CAN_IRQHandler+0x30c>
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d822      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d002      	beq.n	80054be <HAL_CAN_IRQHandler+0x2f8>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d005      	beq.n	80054c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80054bc:	e01d      	b.n	80054fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	f043 0308 	orr.w	r3, r3, #8
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054c6:	e019      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f043 0310 	orr.w	r3, r3, #16
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054d0:	e014      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054da:	e00f      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054e4:	e00a      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054ee:	e005      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054f8:	e000      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            break;
 80054fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800550a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2204      	movs	r2, #4
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f872 	bl	8005610 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800552c:	bf00      	nop
 800552e:	3728      	adds	r7, #40	; 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <__NVIC_SetPriorityGrouping+0x44>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005640:	4013      	ands	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800564c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005656:	4a04      	ldr	r2, [pc, #16]	; (8005668 <__NVIC_SetPriorityGrouping+0x44>)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	60d3      	str	r3, [r2, #12]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	e000ed00 	.word	0xe000ed00

0800566c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005670:	4b04      	ldr	r3, [pc, #16]	; (8005684 <__NVIC_GetPriorityGrouping+0x18>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	f003 0307 	and.w	r3, r3, #7
}
 800567a:	4618      	mov	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005696:	2b00      	cmp	r3, #0
 8005698:	db0b      	blt.n	80056b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	f003 021f 	and.w	r2, r3, #31
 80056a0:	4907      	ldr	r1, [pc, #28]	; (80056c0 <__NVIC_EnableIRQ+0x38>)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2001      	movs	r0, #1
 80056aa:	fa00 f202 	lsl.w	r2, r0, r2
 80056ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	e000e100 	.word	0xe000e100

080056c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db0a      	blt.n	80056ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	490c      	ldr	r1, [pc, #48]	; (8005710 <__NVIC_SetPriority+0x4c>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	440b      	add	r3, r1
 80056e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056ec:	e00a      	b.n	8005704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4908      	ldr	r1, [pc, #32]	; (8005714 <__NVIC_SetPriority+0x50>)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	3b04      	subs	r3, #4
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	440b      	add	r3, r1
 8005702:	761a      	strb	r2, [r3, #24]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	e000e100 	.word	0xe000e100
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f1c3 0307 	rsb	r3, r3, #7
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf28      	it	cs
 8005736:	2304      	movcs	r3, #4
 8005738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3304      	adds	r3, #4
 800573e:	2b06      	cmp	r3, #6
 8005740:	d902      	bls.n	8005748 <NVIC_EncodePriority+0x30>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3b03      	subs	r3, #3
 8005746:	e000      	b.n	800574a <NVIC_EncodePriority+0x32>
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800574c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	401a      	ands	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	43d9      	mvns	r1, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	4313      	orrs	r3, r2
         );
}
 8005772:	4618      	mov	r0, r3
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005790:	d301      	bcc.n	8005796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005792:	2301      	movs	r3, #1
 8005794:	e00f      	b.n	80057b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <SysTick_Config+0x40>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579e:	210f      	movs	r1, #15
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a4:	f7ff ff8e 	bl	80056c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <SysTick_Config+0x40>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ae:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <SysTick_Config+0x40>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000e010 	.word	0xe000e010

080057c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff29 	bl	8005624 <__NVIC_SetPriorityGrouping>
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	4603      	mov	r3, r0
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057ec:	f7ff ff3e 	bl	800566c <__NVIC_GetPriorityGrouping>
 80057f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f7ff ff8e 	bl	8005718 <NVIC_EncodePriority>
 80057fc:	4602      	mov	r2, r0
 80057fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff ff5d 	bl	80056c4 <__NVIC_SetPriority>
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff ff31 	bl	8005688 <__NVIC_EnableIRQ>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffa2 	bl	8005780 <SysTick_Config>
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005854:	f7fe fc42 	bl	80040dc <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e099      	b.n	8005998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005884:	e00f      	b.n	80058a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005886:	f7fe fc29 	bl	80040dc <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b05      	cmp	r3, #5
 8005892:	d908      	bls.n	80058a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2203      	movs	r2, #3
 800589e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e078      	b.n	8005998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e8      	bne.n	8005886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <HAL_DMA_Init+0x158>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d107      	bne.n	8005910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	4313      	orrs	r3, r2
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f023 0307 	bic.w	r3, r3, #7
 8005926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b04      	cmp	r3, #4
 8005938:	d117      	bne.n	800596a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fa6f 	bl	8005e30 <DMA_CheckFifoParam>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2240      	movs	r2, #64	; 0x40
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005966:	2301      	movs	r3, #1
 8005968:	e016      	b.n	8005998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa26 	bl	8005dc4 <DMA_CalcBaseAndBitshift>
 8005978:	4603      	mov	r3, r0
 800597a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	223f      	movs	r2, #63	; 0x3f
 8005982:	409a      	lsls	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	f010803f 	.word	0xf010803f

080059a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_DMA_Start_IT+0x26>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e040      	b.n	8005a4c <HAL_DMA_Start_IT+0xa8>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d12f      	bne.n	8005a3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f9b8 	bl	8005d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	223f      	movs	r2, #63	; 0x3f
 80059fe:	409a      	lsls	r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0216 	orr.w	r2, r2, #22
 8005a12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0208 	orr.w	r2, r2, #8
 8005a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e005      	b.n	8005a4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
 8005a48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a60:	4b8e      	ldr	r3, [pc, #568]	; (8005c9c <HAL_DMA_IRQHandler+0x248>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a8e      	ldr	r2, [pc, #568]	; (8005ca0 <HAL_DMA_IRQHandler+0x24c>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0a9b      	lsrs	r3, r3, #10
 8005a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7e:	2208      	movs	r2, #8
 8005a80:	409a      	lsls	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01a      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d013      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0204 	bic.w	r2, r2, #4
 8005aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aac:	2208      	movs	r2, #8
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	f043 0201 	orr.w	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d012      	beq.n	8005af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f043 0202 	orr.w	r2, r3, #2
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	2204      	movs	r2, #4
 8005afc:	409a      	lsls	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b18:	2204      	movs	r2, #4
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b24:	f043 0204 	orr.w	r2, r3, #4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	2210      	movs	r2, #16
 8005b32:	409a      	lsls	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d043      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d03c      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4e:	2210      	movs	r2, #16
 8005b50:	409a      	lsls	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d018      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d108      	bne.n	8005b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d024      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
 8005b82:	e01f      	b.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01b      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
 8005b94:	e016      	b.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d107      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0208 	bic.w	r2, r2, #8
 8005bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	2220      	movs	r2, #32
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 808f 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8087 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	2220      	movs	r2, #32
 8005bec:	409a      	lsls	r2, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	d136      	bne.n	8005c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0216 	bic.w	r2, r2, #22
 8005c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_DMA_IRQHandler+0x1da>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0208 	bic.w	r2, r2, #8
 8005c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c42:	223f      	movs	r2, #63	; 0x3f
 8005c44:	409a      	lsls	r2, r3
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d07e      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
        }
        return;
 8005c6a:	e079      	b.n	8005d60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10d      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d031      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
 8005c98:	e02c      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
 8005c9a:	bf00      	nop
 8005c9c:	200000d8 	.word	0x200000d8
 8005ca0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d023      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
 8005cb4:	e01e      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0210 	bic.w	r2, r2, #16
 8005cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d032      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d022      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2205      	movs	r2, #5
 8005d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d307      	bcc.n	8005d3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f2      	bne.n	8005d20 <HAL_DMA_IRQHandler+0x2cc>
 8005d3a:	e000      	b.n	8005d3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d60:	bf00      	nop
    }
  }
}
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d108      	bne.n	8005da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005da6:	e007      	b.n	8005db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	60da      	str	r2, [r3, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	3b10      	subs	r3, #16
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <DMA_CalcBaseAndBitshift+0x64>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005dde:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <DMA_CalcBaseAndBitshift+0x68>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d909      	bls.n	8005e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	659a      	str	r2, [r3, #88]	; 0x58
 8005e04:	e007      	b.n	8005e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	aaaaaaab 	.word	0xaaaaaaab
 8005e2c:	0800aa8c 	.word	0x0800aa8c

08005e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d11f      	bne.n	8005e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d856      	bhi.n	8005efe <DMA_CheckFifoParam+0xce>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <DMA_CheckFifoParam+0x28>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005e7b 	.word	0x08005e7b
 8005e60:	08005e69 	.word	0x08005e69
 8005e64:	08005eff 	.word	0x08005eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d046      	beq.n	8005f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e78:	e043      	b.n	8005f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e82:	d140      	bne.n	8005f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e88:	e03d      	b.n	8005f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e92:	d121      	bne.n	8005ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d837      	bhi.n	8005f0a <DMA_CheckFifoParam+0xda>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <DMA_CheckFifoParam+0x70>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb1 	.word	0x08005eb1
 8005ea4:	08005eb7 	.word	0x08005eb7
 8005ea8:	08005eb1 	.word	0x08005eb1
 8005eac:	08005ec9 	.word	0x08005ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb4:	e030      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d025      	beq.n	8005f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec6:	e022      	b.n	8005f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ed0:	d11f      	bne.n	8005f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ed6:	e01c      	b.n	8005f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d903      	bls.n	8005ee6 <DMA_CheckFifoParam+0xb6>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d003      	beq.n	8005eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ee4:	e018      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eea:	e015      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00e      	beq.n	8005f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
      break;
 8005efc:	e00b      	b.n	8005f16 <DMA_CheckFifoParam+0xe6>
      break;
 8005efe:	bf00      	nop
 8005f00:	e00a      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      break;
 8005f02:	bf00      	nop
 8005f04:	e008      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      break;
 8005f06:	bf00      	nop
 8005f08:	e006      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <DMA_CheckFifoParam+0xe8>
      break;
 8005f16:	bf00      	nop
    }
  } 
  
  return status; 
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop

08005f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b089      	sub	sp, #36	; 0x24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e16b      	b.n	800621c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f44:	2201      	movs	r2, #1
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	f040 815a 	bne.w	8006216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d005      	beq.n	8005f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d130      	bne.n	8005fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	2203      	movs	r2, #3
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 0201 	and.w	r2, r3, #1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d017      	beq.n	8006018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d123      	bne.n	800606c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	08da      	lsrs	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3208      	adds	r2, #8
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	220f      	movs	r2, #15
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	08da      	lsrs	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3208      	adds	r2, #8
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	2203      	movs	r2, #3
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0203 	and.w	r2, r3, #3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80b4 	beq.w	8006216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4b60      	ldr	r3, [pc, #384]	; (8006234 <HAL_GPIO_Init+0x30c>)
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	4a5f      	ldr	r2, [pc, #380]	; (8006234 <HAL_GPIO_Init+0x30c>)
 80060b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060bc:	6453      	str	r3, [r2, #68]	; 0x44
 80060be:	4b5d      	ldr	r3, [pc, #372]	; (8006234 <HAL_GPIO_Init+0x30c>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ca:	4a5b      	ldr	r2, [pc, #364]	; (8006238 <HAL_GPIO_Init+0x310>)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	3302      	adds	r3, #2
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a52      	ldr	r2, [pc, #328]	; (800623c <HAL_GPIO_Init+0x314>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d02b      	beq.n	800614e <HAL_GPIO_Init+0x226>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a51      	ldr	r2, [pc, #324]	; (8006240 <HAL_GPIO_Init+0x318>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d025      	beq.n	800614a <HAL_GPIO_Init+0x222>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a50      	ldr	r2, [pc, #320]	; (8006244 <HAL_GPIO_Init+0x31c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01f      	beq.n	8006146 <HAL_GPIO_Init+0x21e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a4f      	ldr	r2, [pc, #316]	; (8006248 <HAL_GPIO_Init+0x320>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d019      	beq.n	8006142 <HAL_GPIO_Init+0x21a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a4e      	ldr	r2, [pc, #312]	; (800624c <HAL_GPIO_Init+0x324>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_GPIO_Init+0x216>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a4d      	ldr	r2, [pc, #308]	; (8006250 <HAL_GPIO_Init+0x328>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00d      	beq.n	800613a <HAL_GPIO_Init+0x212>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a4c      	ldr	r2, [pc, #304]	; (8006254 <HAL_GPIO_Init+0x32c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <HAL_GPIO_Init+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a4b      	ldr	r2, [pc, #300]	; (8006258 <HAL_GPIO_Init+0x330>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_GPIO_Init+0x20a>
 800612e:	2307      	movs	r3, #7
 8006130:	e00e      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006132:	2308      	movs	r3, #8
 8006134:	e00c      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006136:	2306      	movs	r3, #6
 8006138:	e00a      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613a:	2305      	movs	r3, #5
 800613c:	e008      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613e:	2304      	movs	r3, #4
 8006140:	e006      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006142:	2303      	movs	r3, #3
 8006144:	e004      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006146:	2302      	movs	r3, #2
 8006148:	e002      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614e:	2300      	movs	r3, #0
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	f002 0203 	and.w	r2, r2, #3
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	4093      	lsls	r3, r2
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006160:	4935      	ldr	r1, [pc, #212]	; (8006238 <HAL_GPIO_Init+0x310>)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	3302      	adds	r3, #2
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800616e:	4b3b      	ldr	r3, [pc, #236]	; (800625c <HAL_GPIO_Init+0x334>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006192:	4a32      	ldr	r2, [pc, #200]	; (800625c <HAL_GPIO_Init+0x334>)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006198:	4b30      	ldr	r3, [pc, #192]	; (800625c <HAL_GPIO_Init+0x334>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <HAL_GPIO_Init+0x334>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061c2:	4b26      	ldr	r3, [pc, #152]	; (800625c <HAL_GPIO_Init+0x334>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <HAL_GPIO_Init+0x334>)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_GPIO_Init+0x334>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006210:	4a12      	ldr	r2, [pc, #72]	; (800625c <HAL_GPIO_Init+0x334>)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3301      	adds	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b0f      	cmp	r3, #15
 8006220:	f67f ae90 	bls.w	8005f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3724      	adds	r7, #36	; 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	40013800 	.word	0x40013800
 800623c:	40020000 	.word	0x40020000
 8006240:	40020400 	.word	0x40020400
 8006244:	40020800 	.word	0x40020800
 8006248:	40020c00 	.word	0x40020c00
 800624c:	40021000 	.word	0x40021000
 8006250:	40021400 	.word	0x40021400
 8006254:	40021800 	.word	0x40021800
 8006258:	40021c00 	.word	0x40021c00
 800625c:	40013c00 	.word	0x40013c00

08006260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
 800626c:	4613      	mov	r3, r2
 800626e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006270:	787b      	ldrb	r3, [r7, #1]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006276:	887a      	ldrh	r2, [r7, #2]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800627c:	e003      	b.n	8006286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800627e:	887b      	ldrh	r3, [r7, #2]
 8006280:	041a      	lsls	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800629e:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062aa:	4a05      	ldr	r2, [pc, #20]	; (80062c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f806 	bl	80062c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40013c00 	.word	0x40013c00

080062c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e12b      	b.n	8006546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb fc26 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800633e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006340:	f001 fbac 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 8006344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4a81      	ldr	r2, [pc, #516]	; (8006550 <HAL_I2C_Init+0x274>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d807      	bhi.n	8006360 <HAL_I2C_Init+0x84>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a80      	ldr	r2, [pc, #512]	; (8006554 <HAL_I2C_Init+0x278>)
 8006354:	4293      	cmp	r3, r2
 8006356:	bf94      	ite	ls
 8006358:	2301      	movls	r3, #1
 800635a:	2300      	movhi	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	e006      	b.n	800636e <HAL_I2C_Init+0x92>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a7d      	ldr	r2, [pc, #500]	; (8006558 <HAL_I2C_Init+0x27c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	bf94      	ite	ls
 8006368:	2301      	movls	r3, #1
 800636a:	2300      	movhi	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e0e7      	b.n	8006546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a78      	ldr	r2, [pc, #480]	; (800655c <HAL_I2C_Init+0x280>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	0c9b      	lsrs	r3, r3, #18
 8006380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a6a      	ldr	r2, [pc, #424]	; (8006550 <HAL_I2C_Init+0x274>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d802      	bhi.n	80063b0 <HAL_I2C_Init+0xd4>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3301      	adds	r3, #1
 80063ae:	e009      	b.n	80063c4 <HAL_I2C_Init+0xe8>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	4a69      	ldr	r2, [pc, #420]	; (8006560 <HAL_I2C_Init+0x284>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	099b      	lsrs	r3, r3, #6
 80063c2:	3301      	adds	r3, #1
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	495c      	ldr	r1, [pc, #368]	; (8006550 <HAL_I2C_Init+0x274>)
 80063e0:	428b      	cmp	r3, r1
 80063e2:	d819      	bhi.n	8006418 <HAL_I2C_Init+0x13c>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1e59      	subs	r1, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063f8:	400b      	ands	r3, r1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_I2C_Init+0x138>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1e59      	subs	r1, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	fbb1 f3f3 	udiv	r3, r1, r3
 800640c:	3301      	adds	r3, #1
 800640e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006412:	e051      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006414:	2304      	movs	r3, #4
 8006416:	e04f      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d111      	bne.n	8006444 <HAL_I2C_Init+0x168>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1e58      	subs	r0, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6859      	ldr	r1, [r3, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	440b      	add	r3, r1
 800642e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006432:	3301      	adds	r3, #1
 8006434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf0c      	ite	eq
 800643c:	2301      	moveq	r3, #1
 800643e:	2300      	movne	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e012      	b.n	800646a <HAL_I2C_Init+0x18e>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1e58      	subs	r0, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	0099      	lsls	r1, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	fbb0 f3f3 	udiv	r3, r0, r3
 800645a:	3301      	adds	r3, #1
 800645c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_I2C_Init+0x196>
 800646e:	2301      	movs	r3, #1
 8006470:	e022      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10e      	bne.n	8006498 <HAL_I2C_Init+0x1bc>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1e58      	subs	r0, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	440b      	add	r3, r1
 8006488:	fbb0 f3f3 	udiv	r3, r0, r3
 800648c:	3301      	adds	r3, #1
 800648e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	e00f      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1e58      	subs	r0, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	0099      	lsls	r1, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ae:	3301      	adds	r3, #1
 80064b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	6809      	ldr	r1, [r1, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6911      	ldr	r1, [r2, #16]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68d2      	ldr	r2, [r2, #12]
 80064f2:	4311      	orrs	r1, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	000186a0 	.word	0x000186a0
 8006554:	001e847f 	.word	0x001e847f
 8006558:	003d08ff 	.word	0x003d08ff
 800655c:	431bde83 	.word	0x431bde83
 8006560:	10624dd3 	.word	0x10624dd3

08006564 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	461a      	mov	r2, r3
 8006570:	460b      	mov	r3, r1
 8006572:	817b      	strh	r3, [r7, #10]
 8006574:	4613      	mov	r3, r2
 8006576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006578:	f7fd fdb0 	bl	80040dc <HAL_GetTick>
 800657c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b20      	cmp	r3, #32
 8006588:	f040 80e0 	bne.w	800674c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2319      	movs	r3, #25
 8006592:	2201      	movs	r2, #1
 8006594:	4970      	ldr	r1, [pc, #448]	; (8006758 <HAL_I2C_Master_Transmit+0x1f4>)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fc72 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0d3      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_I2C_Master_Transmit+0x50>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e0cc      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d007      	beq.n	80065da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2221      	movs	r2, #33	; 0x21
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2210      	movs	r2, #16
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	893a      	ldrh	r2, [r7, #8]
 800660a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a50      	ldr	r2, [pc, #320]	; (800675c <HAL_I2C_Master_Transmit+0x1f8>)
 800661a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800661c:	8979      	ldrh	r1, [r7, #10]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fadc 	bl	8006be0 <I2C_MasterRequestWrite>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e08d      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006648:	e066      	b.n	8006718 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	6a39      	ldr	r1, [r7, #32]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fcec 	bl	800702c <I2C_WaitOnTXEFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00d      	beq.n	8006676 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b04      	cmp	r3, #4
 8006660:	d107      	bne.n	8006672 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006670:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e06b      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	781a      	ldrb	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d11b      	bne.n	80066ec <HAL_I2C_Master_Transmit+0x188>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	6a39      	ldr	r1, [r7, #32]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fcdc 	bl	80070ae <I2C_WaitOnBTFFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	2b04      	cmp	r3, #4
 8006702:	d107      	bne.n	8006714 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006712:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e01a      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d194      	bne.n	800664a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	00100002 	.word	0x00100002
 800675c:	ffff0000 	.word	0xffff0000

08006760 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	; 0x30
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	461a      	mov	r2, r3
 800676c:	460b      	mov	r3, r1
 800676e:	817b      	strh	r3, [r7, #10]
 8006770:	4613      	mov	r3, r2
 8006772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006774:	f7fd fcb2 	bl	80040dc <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b20      	cmp	r3, #32
 8006784:	f040 820b 	bne.w	8006b9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2319      	movs	r3, #25
 800678e:	2201      	movs	r2, #1
 8006790:	497c      	ldr	r1, [pc, #496]	; (8006984 <HAL_I2C_Master_Receive+0x224>)
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fb74 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
 80067a0:	e1fe      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_I2C_Master_Receive+0x50>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e1f7      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d007      	beq.n	80067d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2222      	movs	r2, #34	; 0x22
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2210      	movs	r2, #16
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	893a      	ldrh	r2, [r7, #8]
 8006806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a5c      	ldr	r2, [pc, #368]	; (8006988 <HAL_I2C_Master_Receive+0x228>)
 8006816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006818:	8979      	ldrh	r1, [r7, #10]
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fa60 	bl	8006ce4 <I2C_MasterRequestRead>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e1b8      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d113      	bne.n	800685e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006836:	2300      	movs	r3, #0
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	e18c      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006862:	2b01      	cmp	r3, #1
 8006864:	d11b      	bne.n	800689e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e16c      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d11b      	bne.n	80068de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	e14c      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006904:	e138      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690a:	2b03      	cmp	r3, #3
 800690c:	f200 80f1 	bhi.w	8006af2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006914:	2b01      	cmp	r3, #1
 8006916:	d123      	bne.n	8006960 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fc07 	bl	8007130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e139      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800695e:	e10b      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006964:	2b02      	cmp	r3, #2
 8006966:	d14e      	bne.n	8006a06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2200      	movs	r2, #0
 8006970:	4906      	ldr	r1, [pc, #24]	; (800698c <HAL_I2C_Master_Receive+0x22c>)
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fa84 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e10e      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
 8006982:	bf00      	nop
 8006984:	00100002 	.word	0x00100002
 8006988:	ffff0000 	.word	0xffff0000
 800698c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800699e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a04:	e0b8      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4966      	ldr	r1, [pc, #408]	; (8006ba8 <HAL_I2C_Master_Receive+0x448>)
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fa35 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0bf      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2200      	movs	r2, #0
 8006a6a:	494f      	ldr	r1, [pc, #316]	; (8006ba8 <HAL_I2C_Master_Receive+0x448>)
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fa07 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e091      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006af0:	e042      	b.n	8006b78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fb1a 	bl	8007130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e04c      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d118      	bne.n	8006b78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f aec2 	bne.w	8006906 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e000      	b.n	8006ba0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3728      	adds	r7, #40	; 0x28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	00010004 	.word	0x00010004

08006bac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bba:	b2db      	uxtb	r3, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	460b      	mov	r3, r1
 8006bee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d006      	beq.n	8006c0a <I2C_MasterRequestWrite+0x2a>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d003      	beq.n	8006c0a <I2C_MasterRequestWrite+0x2a>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c08:	d108      	bne.n	8006c1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e00b      	b.n	8006c34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	2b12      	cmp	r3, #18
 8006c22:	d107      	bne.n	8006c34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f91d 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5a:	d103      	bne.n	8006c64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e035      	b.n	8006cd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c70:	d108      	bne.n	8006c84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c72:	897b      	ldrh	r3, [r7, #10]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c80:	611a      	str	r2, [r3, #16]
 8006c82:	e01b      	b.n	8006cbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c84:	897b      	ldrh	r3, [r7, #10]
 8006c86:	11db      	asrs	r3, r3, #7
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0306 	and.w	r3, r3, #6
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f063 030f 	orn	r3, r3, #15
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	490e      	ldr	r1, [pc, #56]	; (8006cdc <I2C_MasterRequestWrite+0xfc>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f943 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e010      	b.n	8006cd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4907      	ldr	r1, [pc, #28]	; (8006ce0 <I2C_MasterRequestWrite+0x100>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f933 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	00010008 	.word	0x00010008
 8006ce0:	00010002 	.word	0x00010002

08006ce4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d006      	beq.n	8006d1e <I2C_MasterRequestRead+0x3a>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d003      	beq.n	8006d1e <I2C_MasterRequestRead+0x3a>
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d1c:	d108      	bne.n	8006d30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e00b      	b.n	8006d48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	2b11      	cmp	r3, #17
 8006d36:	d107      	bne.n	8006d48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f893 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00d      	beq.n	8006d7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6e:	d103      	bne.n	8006d78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e079      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d84:	d108      	bne.n	8006d98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d86:	897b      	ldrh	r3, [r7, #10]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	611a      	str	r2, [r3, #16]
 8006d96:	e05f      	b.n	8006e58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d98:	897b      	ldrh	r3, [r7, #10]
 8006d9a:	11db      	asrs	r3, r3, #7
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f003 0306 	and.w	r3, r3, #6
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f063 030f 	orn	r3, r3, #15
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4930      	ldr	r1, [pc, #192]	; (8006e78 <I2C_MasterRequestRead+0x194>)
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f8b9 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e054      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dc6:	897b      	ldrh	r3, [r7, #10]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4929      	ldr	r1, [pc, #164]	; (8006e7c <I2C_MasterRequestRead+0x198>)
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8a9 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e044      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f831 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e32:	d103      	bne.n	8006e3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e017      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006e40:	897b      	ldrh	r3, [r7, #10]
 8006e42:	11db      	asrs	r3, r3, #7
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f003 0306 	and.w	r3, r3, #6
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f063 030e 	orn	r3, r3, #14
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4907      	ldr	r1, [pc, #28]	; (8006e7c <I2C_MasterRequestRead+0x198>)
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f865 	bl	8006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	00010008 	.word	0x00010008
 8006e7c:	00010002 	.word	0x00010002

08006e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e90:	e025      	b.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e98:	d021      	beq.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fd f91f 	bl	80040dc <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d116      	bne.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e023      	b.n	8006f26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10d      	bne.n	8006f04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	43da      	mvns	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	e00c      	b.n	8006f1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d0b6      	beq.n	8006e92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f3c:	e051      	b.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4c:	d123      	bne.n	8006f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f043 0204 	orr.w	r2, r3, #4
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e046      	b.n	8007024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9c:	d021      	beq.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fd f89d 	bl	80040dc <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d116      	bne.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e020      	b.n	8007024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d10c      	bne.n	8007006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	43da      	mvns	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	e00b      	b.n	800701e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	43da      	mvns	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4013      	ands	r3, r2
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d18d      	bne.n	8006f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007038:	e02d      	b.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f8ce 	bl	80071dc <I2C_IsAcknowledgeFailed>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e02d      	b.n	80070a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007050:	d021      	beq.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007052:	f7fd f843 	bl	80040dc <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d116      	bne.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e007      	b.n	80070a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d1ca      	bne.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070ba:	e02d      	b.n	8007118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f88d 	bl	80071dc <I2C_IsAcknowledgeFailed>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e02d      	b.n	8007128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d2:	d021      	beq.n	8007118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d4:	f7fd f802 	bl	80040dc <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d116      	bne.n	8007118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f043 0220 	orr.w	r2, r3, #32
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e007      	b.n	8007128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b04      	cmp	r3, #4
 8007124:	d1ca      	bne.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800713c:	e042      	b.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0310 	and.w	r3, r3, #16
 8007148:	2b10      	cmp	r3, #16
 800714a:	d119      	bne.n	8007180 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0210 	mvn.w	r2, #16
 8007154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e029      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007180:	f7fc ffac 	bl	80040dc <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	d302      	bcc.n	8007196 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d116      	bne.n	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e007      	b.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d1b5      	bne.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f2:	d11b      	bne.n	800722c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	f043 0204 	orr.w	r2, r3, #4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e267      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d075      	beq.n	8007346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800725a:	4b88      	ldr	r3, [pc, #544]	; (800747c <HAL_RCC_OscConfig+0x240>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 030c 	and.w	r3, r3, #12
 8007262:	2b04      	cmp	r3, #4
 8007264:	d00c      	beq.n	8007280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007266:	4b85      	ldr	r3, [pc, #532]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800726e:	2b08      	cmp	r3, #8
 8007270:	d112      	bne.n	8007298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007272:	4b82      	ldr	r3, [pc, #520]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800727e:	d10b      	bne.n	8007298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007280:	4b7e      	ldr	r3, [pc, #504]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d05b      	beq.n	8007344 <HAL_RCC_OscConfig+0x108>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d157      	bne.n	8007344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e242      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a0:	d106      	bne.n	80072b0 <HAL_RCC_OscConfig+0x74>
 80072a2:	4b76      	ldr	r3, [pc, #472]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a75      	ldr	r2, [pc, #468]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	e01d      	b.n	80072ec <HAL_RCC_OscConfig+0xb0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x98>
 80072ba:	4b70      	ldr	r3, [pc, #448]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a6f      	ldr	r2, [pc, #444]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b6d      	ldr	r3, [pc, #436]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a6c      	ldr	r2, [pc, #432]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e00b      	b.n	80072ec <HAL_RCC_OscConfig+0xb0>
 80072d4:	4b69      	ldr	r3, [pc, #420]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a68      	ldr	r2, [pc, #416]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4b66      	ldr	r3, [pc, #408]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a65      	ldr	r2, [pc, #404]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80072e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d013      	beq.n	800731c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f4:	f7fc fef2 	bl	80040dc <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072fc:	f7fc feee 	bl	80040dc <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	; 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e207      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0xc0>
 800731a:	e014      	b.n	8007346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800731c:	f7fc fede 	bl	80040dc <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007324:	f7fc feda 	bl	80040dc <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e1f3      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007336:	4b51      	ldr	r3, [pc, #324]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0xe8>
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d063      	beq.n	800741a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007352:	4b4a      	ldr	r3, [pc, #296]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800735e:	4b47      	ldr	r3, [pc, #284]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007366:	2b08      	cmp	r3, #8
 8007368:	d11c      	bne.n	80073a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736a:	4b44      	ldr	r3, [pc, #272]	; (800747c <HAL_RCC_OscConfig+0x240>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d116      	bne.n	80073a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007376:	4b41      	ldr	r3, [pc, #260]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_RCC_OscConfig+0x152>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d001      	beq.n	800738e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e1c7      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738e:	4b3b      	ldr	r3, [pc, #236]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4937      	ldr	r1, [pc, #220]	; (800747c <HAL_RCC_OscConfig+0x240>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a2:	e03a      	b.n	800741a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d020      	beq.n	80073ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073ac:	4b34      	ldr	r3, [pc, #208]	; (8007480 <HAL_RCC_OscConfig+0x244>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b2:	f7fc fe93 	bl	80040dc <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073b8:	e008      	b.n	80073cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ba:	f7fc fe8f 	bl	80040dc <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e1a8      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073cc:	4b2b      	ldr	r3, [pc, #172]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f0      	beq.n	80073ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d8:	4b28      	ldr	r3, [pc, #160]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4925      	ldr	r1, [pc, #148]	; (800747c <HAL_RCC_OscConfig+0x240>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	600b      	str	r3, [r1, #0]
 80073ec:	e015      	b.n	800741a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073ee:	4b24      	ldr	r3, [pc, #144]	; (8007480 <HAL_RCC_OscConfig+0x244>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fc fe72 	bl	80040dc <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073fc:	f7fc fe6e 	bl	80040dc <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e187      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800740e:	4b1b      	ldr	r3, [pc, #108]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d036      	beq.n	8007494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <HAL_RCC_OscConfig+0x248>)
 8007430:	2201      	movs	r2, #1
 8007432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007434:	f7fc fe52 	bl	80040dc <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800743c:	f7fc fe4e 	bl	80040dc <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e167      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <HAL_RCC_OscConfig+0x240>)
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HAL_RCC_OscConfig+0x200>
 800745a:	e01b      	b.n	8007494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_RCC_OscConfig+0x248>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007462:	f7fc fe3b 	bl	80040dc <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007468:	e00e      	b.n	8007488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800746a:	f7fc fe37 	bl	80040dc <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d907      	bls.n	8007488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e150      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
 800747c:	40023800 	.word	0x40023800
 8007480:	42470000 	.word	0x42470000
 8007484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007488:	4b88      	ldr	r3, [pc, #544]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800748a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1ea      	bne.n	800746a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8097 	beq.w	80075d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074a6:	4b81      	ldr	r3, [pc, #516]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10f      	bne.n	80074d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	4b7d      	ldr	r3, [pc, #500]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	4a7c      	ldr	r2, [pc, #496]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6413      	str	r3, [r2, #64]	; 0x40
 80074c2:	4b7a      	ldr	r3, [pc, #488]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074d2:	4b77      	ldr	r3, [pc, #476]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d118      	bne.n	8007510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074de:	4b74      	ldr	r3, [pc, #464]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a73      	ldr	r2, [pc, #460]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 80074e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ea:	f7fc fdf7 	bl	80040dc <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f2:	f7fc fdf3 	bl	80040dc <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e10c      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007504:	4b6a      	ldr	r3, [pc, #424]	; (80076b0 <HAL_RCC_OscConfig+0x474>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d106      	bne.n	8007526 <HAL_RCC_OscConfig+0x2ea>
 8007518:	4b64      	ldr	r3, [pc, #400]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800751a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751c:	4a63      	ldr	r2, [pc, #396]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	6713      	str	r3, [r2, #112]	; 0x70
 8007524:	e01c      	b.n	8007560 <HAL_RCC_OscConfig+0x324>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2b05      	cmp	r3, #5
 800752c:	d10c      	bne.n	8007548 <HAL_RCC_OscConfig+0x30c>
 800752e:	4b5f      	ldr	r3, [pc, #380]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	4a5e      	ldr	r2, [pc, #376]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007534:	f043 0304 	orr.w	r3, r3, #4
 8007538:	6713      	str	r3, [r2, #112]	; 0x70
 800753a:	4b5c      	ldr	r3, [pc, #368]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	4a5b      	ldr	r2, [pc, #364]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	6713      	str	r3, [r2, #112]	; 0x70
 8007546:	e00b      	b.n	8007560 <HAL_RCC_OscConfig+0x324>
 8007548:	4b58      	ldr	r3, [pc, #352]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800754a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754c:	4a57      	ldr	r2, [pc, #348]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	6713      	str	r3, [r2, #112]	; 0x70
 8007554:	4b55      	ldr	r3, [pc, #340]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007558:	4a54      	ldr	r2, [pc, #336]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 800755a:	f023 0304 	bic.w	r3, r3, #4
 800755e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007568:	f7fc fdb8 	bl	80040dc <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800756e:	e00a      	b.n	8007586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007570:	f7fc fdb4 	bl	80040dc <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f241 3288 	movw	r2, #5000	; 0x1388
 800757e:	4293      	cmp	r3, r2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e0cb      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007586:	4b49      	ldr	r3, [pc, #292]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0ee      	beq.n	8007570 <HAL_RCC_OscConfig+0x334>
 8007592:	e014      	b.n	80075be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007594:	f7fc fda2 	bl	80040dc <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800759a:	e00a      	b.n	80075b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759c:	f7fc fd9e 	bl	80040dc <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e0b5      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b2:	4b3e      	ldr	r3, [pc, #248]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1ee      	bne.n	800759c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d105      	bne.n	80075d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	4a38      	ldr	r2, [pc, #224]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80a1 	beq.w	800771c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075da:	4b34      	ldr	r3, [pc, #208]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 030c 	and.w	r3, r3, #12
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d05c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d141      	bne.n	8007672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ee:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <HAL_RCC_OscConfig+0x478>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f4:	f7fc fd72 	bl	80040dc <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075fc:	f7fc fd6e 	bl	80040dc <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e087      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760e:	4b27      	ldr	r3, [pc, #156]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	019b      	lsls	r3, r3, #6
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	3b01      	subs	r3, #1
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	061b      	lsls	r3, r3, #24
 800763e:	491b      	ldr	r1, [pc, #108]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007640:	4313      	orrs	r3, r2
 8007642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <HAL_RCC_OscConfig+0x478>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764a:	f7fc fd47 	bl	80040dc <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007652:	f7fc fd43 	bl	80040dc <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e05c      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f0      	beq.n	8007652 <HAL_RCC_OscConfig+0x416>
 8007670:	e054      	b.n	800771c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007672:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <HAL_RCC_OscConfig+0x478>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007678:	f7fc fd30 	bl	80040dc <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007680:	f7fc fd2c 	bl	80040dc <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e045      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <HAL_RCC_OscConfig+0x470>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x444>
 800769e:	e03d      	b.n	800771c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d107      	bne.n	80076b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e038      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40007000 	.word	0x40007000
 80076b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076b8:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <HAL_RCC_OscConfig+0x4ec>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d028      	beq.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d121      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	429a      	cmp	r2, r3
 80076e0:	d11a      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076e8:	4013      	ands	r3, r2
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d111      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	3b01      	subs	r3, #1
 8007702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007704:	429a      	cmp	r2, r3
 8007706:	d107      	bne.n	8007718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007714:	429a      	cmp	r2, r3
 8007716:	d001      	beq.n	800771c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40023800 	.word	0x40023800

0800772c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e0cc      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007740:	4b68      	ldr	r3, [pc, #416]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d90c      	bls.n	8007768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800774e:	4b65      	ldr	r3, [pc, #404]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007756:	4b63      	ldr	r3, [pc, #396]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d001      	beq.n	8007768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0b8      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d020      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007780:	4b59      	ldr	r3, [pc, #356]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4a58      	ldr	r2, [pc, #352]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800778a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007798:	4b53      	ldr	r3, [pc, #332]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	4a52      	ldr	r2, [pc, #328]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a4:	4b50      	ldr	r3, [pc, #320]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	494d      	ldr	r1, [pc, #308]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d044      	beq.n	800784c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d107      	bne.n	80077da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ca:	4b47      	ldr	r3, [pc, #284]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d119      	bne.n	800780a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e07f      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d003      	beq.n	80077ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d107      	bne.n	80077fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ea:	4b3f      	ldr	r3, [pc, #252]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e06f      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077fa:	4b3b      	ldr	r3, [pc, #236]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e067      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800780a:	4b37      	ldr	r3, [pc, #220]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f023 0203 	bic.w	r2, r3, #3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	4934      	ldr	r1, [pc, #208]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800781c:	f7fc fc5e 	bl	80040dc <HAL_GetTick>
 8007820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007822:	e00a      	b.n	800783a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007824:	f7fc fc5a 	bl	80040dc <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e04f      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783a:	4b2b      	ldr	r3, [pc, #172]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 020c 	and.w	r2, r3, #12
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	429a      	cmp	r2, r3
 800784a:	d1eb      	bne.n	8007824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800784c:	4b25      	ldr	r3, [pc, #148]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d20c      	bcs.n	8007874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785a:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d001      	beq.n	8007874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e032      	b.n	80078da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007880:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4916      	ldr	r1, [pc, #88]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 800788e:	4313      	orrs	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	490e      	ldr	r1, [pc, #56]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078b2:	f000 f821 	bl	80078f8 <HAL_RCC_GetSysClockFreq>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	091b      	lsrs	r3, r3, #4
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	490a      	ldr	r1, [pc, #40]	; (80078ec <HAL_RCC_ClockConfig+0x1c0>)
 80078c4:	5ccb      	ldrb	r3, [r1, r3]
 80078c6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ca:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <HAL_RCC_ClockConfig+0x1c4>)
 80078cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078ce:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <HAL_RCC_ClockConfig+0x1c8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fc fbbe 	bl	8004054 <HAL_InitTick>

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40023c00 	.word	0x40023c00
 80078e8:	40023800 	.word	0x40023800
 80078ec:	0800aa74 	.word	0x0800aa74
 80078f0:	200000d8 	.word	0x200000d8
 80078f4:	200000dc 	.word	0x200000dc

080078f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078fc:	b090      	sub	sp, #64	; 0x40
 80078fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
 8007904:	2300      	movs	r3, #0
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007908:	2300      	movs	r3, #0
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007910:	4b59      	ldr	r3, [pc, #356]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 030c 	and.w	r3, r3, #12
 8007918:	2b08      	cmp	r3, #8
 800791a:	d00d      	beq.n	8007938 <HAL_RCC_GetSysClockFreq+0x40>
 800791c:	2b08      	cmp	r3, #8
 800791e:	f200 80a1 	bhi.w	8007a64 <HAL_RCC_GetSysClockFreq+0x16c>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_RCC_GetSysClockFreq+0x34>
 8007926:	2b04      	cmp	r3, #4
 8007928:	d003      	beq.n	8007932 <HAL_RCC_GetSysClockFreq+0x3a>
 800792a:	e09b      	b.n	8007a64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800792c:	4b53      	ldr	r3, [pc, #332]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x184>)
 800792e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007930:	e09b      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007932:	4b53      	ldr	r3, [pc, #332]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007936:	e098      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007938:	4b4f      	ldr	r3, [pc, #316]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007942:	4b4d      	ldr	r3, [pc, #308]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d028      	beq.n	80079a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800794e:	4b4a      	ldr	r3, [pc, #296]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	099b      	lsrs	r3, r3, #6
 8007954:	2200      	movs	r2, #0
 8007956:	623b      	str	r3, [r7, #32]
 8007958:	627a      	str	r2, [r7, #36]	; 0x24
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007960:	2100      	movs	r1, #0
 8007962:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8007964:	fb03 f201 	mul.w	r2, r3, r1
 8007968:	2300      	movs	r3, #0
 800796a:	fb00 f303 	mul.w	r3, r0, r3
 800796e:	4413      	add	r3, r2
 8007970:	4a43      	ldr	r2, [pc, #268]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8007972:	fba0 1202 	umull	r1, r2, r0, r2
 8007976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007978:	460a      	mov	r2, r1
 800797a:	62ba      	str	r2, [r7, #40]	; 0x28
 800797c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797e:	4413      	add	r3, r2
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	2200      	movs	r2, #0
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	61fa      	str	r2, [r7, #28]
 800798a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800798e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007992:	f7f9 f93b 	bl	8000c0c <__aeabi_uldivmod>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4613      	mov	r3, r2
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799e:	e053      	b.n	8007a48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a0:	4b35      	ldr	r3, [pc, #212]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	099b      	lsrs	r3, r3, #6
 80079a6:	2200      	movs	r2, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	617a      	str	r2, [r7, #20]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80079b2:	f04f 0b00 	mov.w	fp, #0
 80079b6:	4652      	mov	r2, sl
 80079b8:	465b      	mov	r3, fp
 80079ba:	f04f 0000 	mov.w	r0, #0
 80079be:	f04f 0100 	mov.w	r1, #0
 80079c2:	0159      	lsls	r1, r3, #5
 80079c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c8:	0150      	lsls	r0, r2, #5
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	ebb2 080a 	subs.w	r8, r2, sl
 80079d2:	eb63 090b 	sbc.w	r9, r3, fp
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80079e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80079e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80079ea:	ebb2 0408 	subs.w	r4, r2, r8
 80079ee:	eb63 0509 	sbc.w	r5, r3, r9
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	00eb      	lsls	r3, r5, #3
 80079fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a00:	00e2      	lsls	r2, r4, #3
 8007a02:	4614      	mov	r4, r2
 8007a04:	461d      	mov	r5, r3
 8007a06:	eb14 030a 	adds.w	r3, r4, sl
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	eb45 030b 	adc.w	r3, r5, fp
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a1e:	4629      	mov	r1, r5
 8007a20:	028b      	lsls	r3, r1, #10
 8007a22:	4621      	mov	r1, r4
 8007a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a28:	4621      	mov	r1, r4
 8007a2a:	028a      	lsls	r2, r1, #10
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	2200      	movs	r2, #0
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	60fa      	str	r2, [r7, #12]
 8007a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a3c:	f7f9 f8e6 	bl	8000c0c <__aeabi_uldivmod>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4613      	mov	r3, r2
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	3301      	adds	r3, #1
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a62:	e002      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x184>)
 8007a66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3740      	adds	r7, #64	; 0x40
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a76:	bf00      	nop
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	00f42400 	.word	0x00f42400
 8007a80:	017d7840 	.word	0x017d7840

08007a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a88:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	200000d8 	.word	0x200000d8

08007a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aa0:	f7ff fff0 	bl	8007a84 <HAL_RCC_GetHCLKFreq>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	0a9b      	lsrs	r3, r3, #10
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	4903      	ldr	r1, [pc, #12]	; (8007ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab2:	5ccb      	ldrb	r3, [r1, r3]
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	0800aa84 	.word	0x0800aa84

08007ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e07b      	b.n	8007bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae6:	d009      	beq.n	8007afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	61da      	str	r2, [r3, #28]
 8007aee:	e005      	b.n	8007afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fb fde4 	bl	80036e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b80:	ea42 0103 	orr.w	r1, r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	f003 0104 	and.w	r1, r3, #4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f003 0210 	and.w	r2, r3, #16
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e041      	b.n	8007c6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fc f95b 	bl	8003eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f000 fbc9 	bl	80083ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d001      	beq.n	8007c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e04e      	b.n	8007d2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a23      	ldr	r2, [pc, #140]	; (8007d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d022      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb6:	d01d      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1f      	ldr	r2, [pc, #124]	; (8007d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d018      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	; (8007d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a1c      	ldr	r2, [pc, #112]	; (8007d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a1b      	ldr	r2, [pc, #108]	; (8007d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a19      	ldr	r2, [pc, #100]	; (8007d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <HAL_TIM_Base_Start_IT+0x80>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a18      	ldr	r2, [pc, #96]	; (8007d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d111      	bne.n	8007d18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b06      	cmp	r3, #6
 8007d04:	d010      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0201 	orr.w	r2, r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d16:	e007      	b.n	8007d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40010000 	.word	0x40010000
 8007d3c:	40000400 	.word	0x40000400
 8007d40:	40000800 	.word	0x40000800
 8007d44:	40000c00 	.word	0x40000c00
 8007d48:	40010400 	.word	0x40010400
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40001800 	.word	0x40001800

08007d54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e097      	b.n	8007e98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fb fffd 	bl	8003d7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f000 faff 	bl	80083ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	4313      	orrs	r3, r2
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007df4:	f023 030c 	bic.w	r3, r3, #12
 8007df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	4313      	orrs	r3, r2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	011a      	lsls	r2, r3, #4
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	031b      	lsls	r3, r3, #12
 8007e24:	4313      	orrs	r3, r2
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	4313      	orrs	r3, r2
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ec0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ec8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e069      	b.n	8007fb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef0:	e031      	b.n	8007f56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d110      	bne.n	8007f1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d102      	bne.n	8007f04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efe:	7b3b      	ldrb	r3, [r7, #12]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d001      	beq.n	8007f08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e055      	b.n	8007fb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f18:	e01d      	b.n	8007f56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d108      	bne.n	8007f32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d105      	bne.n	8007f32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f26:	7b7b      	ldrb	r3, [r7, #13]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d102      	bne.n	8007f32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f2c:	7b3b      	ldrb	r3, [r7, #12]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d001      	beq.n	8007f36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e03e      	b.n	8007fb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_TIM_Encoder_Start+0xc4>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d008      	beq.n	8007f74 <HAL_TIM_Encoder_Start+0xd4>
 8007f62:	e00f      	b.n	8007f84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fb57 	bl	8008620 <TIM_CCxChannelCmd>
      break;
 8007f72:	e016      	b.n	8007fa2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fb4f 	bl	8008620 <TIM_CCxChannelCmd>
      break;
 8007f82:	e00e      	b.n	8007fa2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fb47 	bl	8008620 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2201      	movs	r2, #1
 8007f98:	2104      	movs	r1, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fb40 	bl	8008620 <TIM_CCxChannelCmd>
      break;
 8007fa0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d122      	bne.n	8008018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d11b      	bne.n	8008018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0202 	mvn.w	r2, #2
 8007fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9b5 	bl	800836e <HAL_TIM_IC_CaptureCallback>
 8008004:	e005      	b.n	8008012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9a7 	bl	800835a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9b8 	bl	8008382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b04      	cmp	r3, #4
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b04      	cmp	r3, #4
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0204 	mvn.w	r2, #4
 800803c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f98b 	bl	800836e <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f97d 	bl	800835a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f98e 	bl	8008382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b08      	cmp	r3, #8
 8008078:	d122      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b08      	cmp	r3, #8
 8008086:	d11b      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0208 	mvn.w	r2, #8
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f961 	bl	800836e <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f953 	bl	800835a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f964 	bl	8008382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d122      	bne.n	8008114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d11b      	bne.n	8008114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0210 	mvn.w	r2, #16
 80080e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2208      	movs	r2, #8
 80080ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f937 	bl	800836e <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f929 	bl	800835a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f93a 	bl	8008382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b01      	cmp	r3, #1
 8008120:	d10e      	bne.n	8008140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b01      	cmp	r3, #1
 800812e:	d107      	bne.n	8008140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0201 	mvn.w	r2, #1
 8008138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fa f94c 	bl	80023d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b80      	cmp	r3, #128	; 0x80
 800814c:	d10e      	bne.n	800816c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008158:	2b80      	cmp	r3, #128	; 0x80
 800815a:	d107      	bne.n	800816c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fb06 	bl	8008778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	d10e      	bne.n	8008198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	d107      	bne.n	8008198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8ff 	bl	8008396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d10e      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	d107      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0220 	mvn.w	r2, #32
 80081bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fad0 	bl	8008764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_TIM_ConfigClockSource+0x1c>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e0b4      	b.n	8008352 <HAL_TIM_ConfigClockSource+0x186>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800820e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008220:	d03e      	beq.n	80082a0 <HAL_TIM_ConfigClockSource+0xd4>
 8008222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008226:	f200 8087 	bhi.w	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 800822a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822e:	f000 8086 	beq.w	800833e <HAL_TIM_ConfigClockSource+0x172>
 8008232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008236:	d87f      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b70      	cmp	r3, #112	; 0x70
 800823a:	d01a      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0xa6>
 800823c:	2b70      	cmp	r3, #112	; 0x70
 800823e:	d87b      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008240:	2b60      	cmp	r3, #96	; 0x60
 8008242:	d050      	beq.n	80082e6 <HAL_TIM_ConfigClockSource+0x11a>
 8008244:	2b60      	cmp	r3, #96	; 0x60
 8008246:	d877      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008248:	2b50      	cmp	r3, #80	; 0x50
 800824a:	d03c      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0xfa>
 800824c:	2b50      	cmp	r3, #80	; 0x50
 800824e:	d873      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d058      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x13a>
 8008254:	2b40      	cmp	r3, #64	; 0x40
 8008256:	d86f      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008258:	2b30      	cmp	r3, #48	; 0x30
 800825a:	d064      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x15a>
 800825c:	2b30      	cmp	r3, #48	; 0x30
 800825e:	d86b      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008260:	2b20      	cmp	r3, #32
 8008262:	d060      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x15a>
 8008264:	2b20      	cmp	r3, #32
 8008266:	d867      	bhi.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
 8008268:	2b00      	cmp	r3, #0
 800826a:	d05c      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x15a>
 800826c:	2b10      	cmp	r3, #16
 800826e:	d05a      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x15a>
 8008270:	e062      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6899      	ldr	r1, [r3, #8]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f000 f9ad 	bl	80085e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	609a      	str	r2, [r3, #8]
      break;
 800829e:	e04f      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6899      	ldr	r1, [r3, #8]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f000 f996 	bl	80085e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082c2:	609a      	str	r2, [r3, #8]
      break;
 80082c4:	e03c      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6859      	ldr	r1, [r3, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	461a      	mov	r2, r3
 80082d4:	f000 f90a 	bl	80084ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2150      	movs	r1, #80	; 0x50
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f963 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 80082e4:	e02c      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6859      	ldr	r1, [r3, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f000 f929 	bl	800854a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2160      	movs	r1, #96	; 0x60
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f953 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8008304:	e01c      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	6859      	ldr	r1, [r3, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	461a      	mov	r2, r3
 8008314:	f000 f8ea 	bl	80084ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2140      	movs	r1, #64	; 0x40
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f943 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8008324:	e00c      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4619      	mov	r1, r3
 8008330:	4610      	mov	r0, r2
 8008332:	f000 f93a 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8008336:	e003      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
      break;
 800833c:	e000      	b.n	8008340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800833e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
	...

080083ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a40      	ldr	r2, [pc, #256]	; (80084c0 <TIM_Base_SetConfig+0x114>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ca:	d00f      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a3d      	ldr	r2, [pc, #244]	; (80084c4 <TIM_Base_SetConfig+0x118>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00b      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3c      	ldr	r2, [pc, #240]	; (80084c8 <TIM_Base_SetConfig+0x11c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d007      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a3b      	ldr	r2, [pc, #236]	; (80084cc <TIM_Base_SetConfig+0x120>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d003      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a3a      	ldr	r2, [pc, #232]	; (80084d0 <TIM_Base_SetConfig+0x124>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d108      	bne.n	80083fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a2f      	ldr	r2, [pc, #188]	; (80084c0 <TIM_Base_SetConfig+0x114>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d02b      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840c:	d027      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a2c      	ldr	r2, [pc, #176]	; (80084c4 <TIM_Base_SetConfig+0x118>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d023      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2b      	ldr	r2, [pc, #172]	; (80084c8 <TIM_Base_SetConfig+0x11c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01f      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a2a      	ldr	r2, [pc, #168]	; (80084cc <TIM_Base_SetConfig+0x120>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01b      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a29      	ldr	r2, [pc, #164]	; (80084d0 <TIM_Base_SetConfig+0x124>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d017      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a28      	ldr	r2, [pc, #160]	; (80084d4 <TIM_Base_SetConfig+0x128>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a27      	ldr	r2, [pc, #156]	; (80084d8 <TIM_Base_SetConfig+0x12c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00f      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a26      	ldr	r2, [pc, #152]	; (80084dc <TIM_Base_SetConfig+0x130>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00b      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <TIM_Base_SetConfig+0x134>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d007      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <TIM_Base_SetConfig+0x138>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d003      	beq.n	800845e <TIM_Base_SetConfig+0xb2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a23      	ldr	r2, [pc, #140]	; (80084e8 <TIM_Base_SetConfig+0x13c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d108      	bne.n	8008470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <TIM_Base_SetConfig+0x114>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d003      	beq.n	80084a4 <TIM_Base_SetConfig+0xf8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a0c      	ldr	r2, [pc, #48]	; (80084d0 <TIM_Base_SetConfig+0x124>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d103      	bne.n	80084ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	615a      	str	r2, [r3, #20]
}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40010000 	.word	0x40010000
 80084c4:	40000400 	.word	0x40000400
 80084c8:	40000800 	.word	0x40000800
 80084cc:	40000c00 	.word	0x40000c00
 80084d0:	40010400 	.word	0x40010400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800
 80084e0:	40001800 	.word	0x40001800
 80084e4:	40001c00 	.word	0x40001c00
 80084e8:	40002000 	.word	0x40002000

080084ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0201 	bic.w	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 030a 	bic.w	r3, r3, #10
 8008528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0210 	bic.w	r2, r3, #16
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f043 0307 	orr.w	r3, r3, #7
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	021a      	lsls	r2, r3, #8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	431a      	orrs	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4313      	orrs	r3, r2
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2201      	movs	r2, #1
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1a      	ldr	r2, [r3, #32]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	fa01 f303 	lsl.w	r3, r1, r3
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e05a      	b.n	800873a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a21      	ldr	r2, [pc, #132]	; (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d0:	d01d      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1d      	ldr	r2, [pc, #116]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a15      	ldr	r2, [pc, #84]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10c      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4313      	orrs	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40014000 	.word	0x40014000
 8008760:	40001800 	.word	0x40001800

08008764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <__errno>:
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <__errno+0x8>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200000e4 	.word	0x200000e4

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	4d0d      	ldr	r5, [pc, #52]	; (80087d0 <__libc_init_array+0x38>)
 800879c:	4c0d      	ldr	r4, [pc, #52]	; (80087d4 <__libc_init_array+0x3c>)
 800879e:	1b64      	subs	r4, r4, r5
 80087a0:	10a4      	asrs	r4, r4, #2
 80087a2:	2600      	movs	r6, #0
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	4d0b      	ldr	r5, [pc, #44]	; (80087d8 <__libc_init_array+0x40>)
 80087aa:	4c0c      	ldr	r4, [pc, #48]	; (80087dc <__libc_init_array+0x44>)
 80087ac:	f002 f838 	bl	800a820 <_init>
 80087b0:	1b64      	subs	r4, r4, r5
 80087b2:	10a4      	asrs	r4, r4, #2
 80087b4:	2600      	movs	r6, #0
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	0800af78 	.word	0x0800af78
 80087d4:	0800af78 	.word	0x0800af78
 80087d8:	0800af78 	.word	0x0800af78
 80087dc:	0800af7c 	.word	0x0800af7c

080087e0 <memset>:
 80087e0:	4402      	add	r2, r0
 80087e2:	4603      	mov	r3, r0
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d100      	bne.n	80087ea <memset+0xa>
 80087e8:	4770      	bx	lr
 80087ea:	f803 1b01 	strb.w	r1, [r3], #1
 80087ee:	e7f9      	b.n	80087e4 <memset+0x4>

080087f0 <iprintf>:
 80087f0:	b40f      	push	{r0, r1, r2, r3}
 80087f2:	4b0a      	ldr	r3, [pc, #40]	; (800881c <iprintf+0x2c>)
 80087f4:	b513      	push	{r0, r1, r4, lr}
 80087f6:	681c      	ldr	r4, [r3, #0]
 80087f8:	b124      	cbz	r4, 8008804 <iprintf+0x14>
 80087fa:	69a3      	ldr	r3, [r4, #24]
 80087fc:	b913      	cbnz	r3, 8008804 <iprintf+0x14>
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fa5e 	bl	8008cc0 <__sinit>
 8008804:	ab05      	add	r3, sp, #20
 8008806:	9a04      	ldr	r2, [sp, #16]
 8008808:	68a1      	ldr	r1, [r4, #8]
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fc67 	bl	80090e0 <_vfiprintf_r>
 8008812:	b002      	add	sp, #8
 8008814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008818:	b004      	add	sp, #16
 800881a:	4770      	bx	lr
 800881c:	200000e4 	.word	0x200000e4

08008820 <_puts_r>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	460e      	mov	r6, r1
 8008824:	4605      	mov	r5, r0
 8008826:	b118      	cbz	r0, 8008830 <_puts_r+0x10>
 8008828:	6983      	ldr	r3, [r0, #24]
 800882a:	b90b      	cbnz	r3, 8008830 <_puts_r+0x10>
 800882c:	f000 fa48 	bl	8008cc0 <__sinit>
 8008830:	69ab      	ldr	r3, [r5, #24]
 8008832:	68ac      	ldr	r4, [r5, #8]
 8008834:	b913      	cbnz	r3, 800883c <_puts_r+0x1c>
 8008836:	4628      	mov	r0, r5
 8008838:	f000 fa42 	bl	8008cc0 <__sinit>
 800883c:	4b2c      	ldr	r3, [pc, #176]	; (80088f0 <_puts_r+0xd0>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d120      	bne.n	8008884 <_puts_r+0x64>
 8008842:	686c      	ldr	r4, [r5, #4]
 8008844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008846:	07db      	lsls	r3, r3, #31
 8008848:	d405      	bmi.n	8008856 <_puts_r+0x36>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	0598      	lsls	r0, r3, #22
 800884e:	d402      	bmi.n	8008856 <_puts_r+0x36>
 8008850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008852:	f000 fad3 	bl	8008dfc <__retarget_lock_acquire_recursive>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	0719      	lsls	r1, r3, #28
 800885a:	d51d      	bpl.n	8008898 <_puts_r+0x78>
 800885c:	6923      	ldr	r3, [r4, #16]
 800885e:	b1db      	cbz	r3, 8008898 <_puts_r+0x78>
 8008860:	3e01      	subs	r6, #1
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008868:	3b01      	subs	r3, #1
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	bb39      	cbnz	r1, 80088be <_puts_r+0x9e>
 800886e:	2b00      	cmp	r3, #0
 8008870:	da38      	bge.n	80088e4 <_puts_r+0xc4>
 8008872:	4622      	mov	r2, r4
 8008874:	210a      	movs	r1, #10
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f848 	bl	800890c <__swbuf_r>
 800887c:	3001      	adds	r0, #1
 800887e:	d011      	beq.n	80088a4 <_puts_r+0x84>
 8008880:	250a      	movs	r5, #10
 8008882:	e011      	b.n	80088a8 <_puts_r+0x88>
 8008884:	4b1b      	ldr	r3, [pc, #108]	; (80088f4 <_puts_r+0xd4>)
 8008886:	429c      	cmp	r4, r3
 8008888:	d101      	bne.n	800888e <_puts_r+0x6e>
 800888a:	68ac      	ldr	r4, [r5, #8]
 800888c:	e7da      	b.n	8008844 <_puts_r+0x24>
 800888e:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <_puts_r+0xd8>)
 8008890:	429c      	cmp	r4, r3
 8008892:	bf08      	it	eq
 8008894:	68ec      	ldreq	r4, [r5, #12]
 8008896:	e7d5      	b.n	8008844 <_puts_r+0x24>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f888 	bl	80089b0 <__swsetup_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d0dd      	beq.n	8008860 <_puts_r+0x40>
 80088a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80088a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088aa:	07da      	lsls	r2, r3, #31
 80088ac:	d405      	bmi.n	80088ba <_puts_r+0x9a>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	059b      	lsls	r3, r3, #22
 80088b2:	d402      	bmi.n	80088ba <_puts_r+0x9a>
 80088b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b6:	f000 faa2 	bl	8008dfe <__retarget_lock_release_recursive>
 80088ba:	4628      	mov	r0, r5
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da04      	bge.n	80088cc <_puts_r+0xac>
 80088c2:	69a2      	ldr	r2, [r4, #24]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	dc06      	bgt.n	80088d6 <_puts_r+0xb6>
 80088c8:	290a      	cmp	r1, #10
 80088ca:	d004      	beq.n	80088d6 <_puts_r+0xb6>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	6022      	str	r2, [r4, #0]
 80088d2:	7019      	strb	r1, [r3, #0]
 80088d4:	e7c5      	b.n	8008862 <_puts_r+0x42>
 80088d6:	4622      	mov	r2, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f817 	bl	800890c <__swbuf_r>
 80088de:	3001      	adds	r0, #1
 80088e0:	d1bf      	bne.n	8008862 <_puts_r+0x42>
 80088e2:	e7df      	b.n	80088a4 <_puts_r+0x84>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	250a      	movs	r5, #10
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	6022      	str	r2, [r4, #0]
 80088ec:	701d      	strb	r5, [r3, #0]
 80088ee:	e7db      	b.n	80088a8 <_puts_r+0x88>
 80088f0:	0800aab8 	.word	0x0800aab8
 80088f4:	0800aad8 	.word	0x0800aad8
 80088f8:	0800aa98 	.word	0x0800aa98

080088fc <puts>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <puts+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f7ff bf8d 	b.w	8008820 <_puts_r>
 8008906:	bf00      	nop
 8008908:	200000e4 	.word	0x200000e4

0800890c <__swbuf_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	460e      	mov	r6, r1
 8008910:	4614      	mov	r4, r2
 8008912:	4605      	mov	r5, r0
 8008914:	b118      	cbz	r0, 800891e <__swbuf_r+0x12>
 8008916:	6983      	ldr	r3, [r0, #24]
 8008918:	b90b      	cbnz	r3, 800891e <__swbuf_r+0x12>
 800891a:	f000 f9d1 	bl	8008cc0 <__sinit>
 800891e:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <__swbuf_r+0x98>)
 8008920:	429c      	cmp	r4, r3
 8008922:	d12b      	bne.n	800897c <__swbuf_r+0x70>
 8008924:	686c      	ldr	r4, [r5, #4]
 8008926:	69a3      	ldr	r3, [r4, #24]
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	071a      	lsls	r2, r3, #28
 800892e:	d52f      	bpl.n	8008990 <__swbuf_r+0x84>
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	b36b      	cbz	r3, 8008990 <__swbuf_r+0x84>
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	1ac0      	subs	r0, r0, r3
 800893a:	6963      	ldr	r3, [r4, #20]
 800893c:	b2f6      	uxtb	r6, r6
 800893e:	4283      	cmp	r3, r0
 8008940:	4637      	mov	r7, r6
 8008942:	dc04      	bgt.n	800894e <__swbuf_r+0x42>
 8008944:	4621      	mov	r1, r4
 8008946:	4628      	mov	r0, r5
 8008948:	f000 f926 	bl	8008b98 <_fflush_r>
 800894c:	bb30      	cbnz	r0, 800899c <__swbuf_r+0x90>
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	3b01      	subs	r3, #1
 8008952:	60a3      	str	r3, [r4, #8]
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	701e      	strb	r6, [r3, #0]
 800895c:	6963      	ldr	r3, [r4, #20]
 800895e:	3001      	adds	r0, #1
 8008960:	4283      	cmp	r3, r0
 8008962:	d004      	beq.n	800896e <__swbuf_r+0x62>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	07db      	lsls	r3, r3, #31
 8008968:	d506      	bpl.n	8008978 <__swbuf_r+0x6c>
 800896a:	2e0a      	cmp	r6, #10
 800896c:	d104      	bne.n	8008978 <__swbuf_r+0x6c>
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f000 f911 	bl	8008b98 <_fflush_r>
 8008976:	b988      	cbnz	r0, 800899c <__swbuf_r+0x90>
 8008978:	4638      	mov	r0, r7
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897c:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <__swbuf_r+0x9c>)
 800897e:	429c      	cmp	r4, r3
 8008980:	d101      	bne.n	8008986 <__swbuf_r+0x7a>
 8008982:	68ac      	ldr	r4, [r5, #8]
 8008984:	e7cf      	b.n	8008926 <__swbuf_r+0x1a>
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <__swbuf_r+0xa0>)
 8008988:	429c      	cmp	r4, r3
 800898a:	bf08      	it	eq
 800898c:	68ec      	ldreq	r4, [r5, #12]
 800898e:	e7ca      	b.n	8008926 <__swbuf_r+0x1a>
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f80c 	bl	80089b0 <__swsetup_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	d0cb      	beq.n	8008934 <__swbuf_r+0x28>
 800899c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80089a0:	e7ea      	b.n	8008978 <__swbuf_r+0x6c>
 80089a2:	bf00      	nop
 80089a4:	0800aab8 	.word	0x0800aab8
 80089a8:	0800aad8 	.word	0x0800aad8
 80089ac:	0800aa98 	.word	0x0800aa98

080089b0 <__swsetup_r>:
 80089b0:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <__swsetup_r+0xcc>)
 80089b2:	b570      	push	{r4, r5, r6, lr}
 80089b4:	681d      	ldr	r5, [r3, #0]
 80089b6:	4606      	mov	r6, r0
 80089b8:	460c      	mov	r4, r1
 80089ba:	b125      	cbz	r5, 80089c6 <__swsetup_r+0x16>
 80089bc:	69ab      	ldr	r3, [r5, #24]
 80089be:	b913      	cbnz	r3, 80089c6 <__swsetup_r+0x16>
 80089c0:	4628      	mov	r0, r5
 80089c2:	f000 f97d 	bl	8008cc0 <__sinit>
 80089c6:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <__swsetup_r+0xd0>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	d10f      	bne.n	80089ec <__swsetup_r+0x3c>
 80089cc:	686c      	ldr	r4, [r5, #4]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089d4:	0719      	lsls	r1, r3, #28
 80089d6:	d42c      	bmi.n	8008a32 <__swsetup_r+0x82>
 80089d8:	06dd      	lsls	r5, r3, #27
 80089da:	d411      	bmi.n	8008a00 <__swsetup_r+0x50>
 80089dc:	2309      	movs	r3, #9
 80089de:	6033      	str	r3, [r6, #0]
 80089e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ea:	e03e      	b.n	8008a6a <__swsetup_r+0xba>
 80089ec:	4b25      	ldr	r3, [pc, #148]	; (8008a84 <__swsetup_r+0xd4>)
 80089ee:	429c      	cmp	r4, r3
 80089f0:	d101      	bne.n	80089f6 <__swsetup_r+0x46>
 80089f2:	68ac      	ldr	r4, [r5, #8]
 80089f4:	e7eb      	b.n	80089ce <__swsetup_r+0x1e>
 80089f6:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <__swsetup_r+0xd8>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	bf08      	it	eq
 80089fc:	68ec      	ldreq	r4, [r5, #12]
 80089fe:	e7e6      	b.n	80089ce <__swsetup_r+0x1e>
 8008a00:	0758      	lsls	r0, r3, #29
 8008a02:	d512      	bpl.n	8008a2a <__swsetup_r+0x7a>
 8008a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a06:	b141      	cbz	r1, 8008a1a <__swsetup_r+0x6a>
 8008a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a0c:	4299      	cmp	r1, r3
 8008a0e:	d002      	beq.n	8008a16 <__swsetup_r+0x66>
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 fa5b 	bl	8008ecc <_free_r>
 8008a16:	2300      	movs	r3, #0
 8008a18:	6363      	str	r3, [r4, #52]	; 0x34
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	2300      	movs	r3, #0
 8008a24:	6063      	str	r3, [r4, #4]
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f043 0308 	orr.w	r3, r3, #8
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	b94b      	cbnz	r3, 8008a4a <__swsetup_r+0x9a>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a40:	d003      	beq.n	8008a4a <__swsetup_r+0x9a>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 fa01 	bl	8008e4c <__smakebuf_r>
 8008a4a:	89a0      	ldrh	r0, [r4, #12]
 8008a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a50:	f010 0301 	ands.w	r3, r0, #1
 8008a54:	d00a      	beq.n	8008a6c <__swsetup_r+0xbc>
 8008a56:	2300      	movs	r3, #0
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	6963      	ldr	r3, [r4, #20]
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	61a3      	str	r3, [r4, #24]
 8008a60:	6923      	ldr	r3, [r4, #16]
 8008a62:	b943      	cbnz	r3, 8008a76 <__swsetup_r+0xc6>
 8008a64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a68:	d1ba      	bne.n	80089e0 <__swsetup_r+0x30>
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	0781      	lsls	r1, r0, #30
 8008a6e:	bf58      	it	pl
 8008a70:	6963      	ldrpl	r3, [r4, #20]
 8008a72:	60a3      	str	r3, [r4, #8]
 8008a74:	e7f4      	b.n	8008a60 <__swsetup_r+0xb0>
 8008a76:	2000      	movs	r0, #0
 8008a78:	e7f7      	b.n	8008a6a <__swsetup_r+0xba>
 8008a7a:	bf00      	nop
 8008a7c:	200000e4 	.word	0x200000e4
 8008a80:	0800aab8 	.word	0x0800aab8
 8008a84:	0800aad8 	.word	0x0800aad8
 8008a88:	0800aa98 	.word	0x0800aa98

08008a8c <__sflush_r>:
 8008a8c:	898a      	ldrh	r2, [r1, #12]
 8008a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	4605      	mov	r5, r0
 8008a94:	0710      	lsls	r0, r2, #28
 8008a96:	460c      	mov	r4, r1
 8008a98:	d458      	bmi.n	8008b4c <__sflush_r+0xc0>
 8008a9a:	684b      	ldr	r3, [r1, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dc05      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc02      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	d0f9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab8:	682f      	ldr	r7, [r5, #0]
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	d032      	beq.n	8008b24 <__sflush_r+0x98>
 8008abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	075a      	lsls	r2, r3, #29
 8008ac4:	d505      	bpl.n	8008ad2 <__sflush_r+0x46>
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	1ac0      	subs	r0, r0, r3
 8008aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008acc:	b10b      	cbz	r3, 8008ad2 <__sflush_r+0x46>
 8008ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b0      	blx	r6
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	d106      	bne.n	8008af2 <__sflush_r+0x66>
 8008ae4:	6829      	ldr	r1, [r5, #0]
 8008ae6:	291d      	cmp	r1, #29
 8008ae8:	d82c      	bhi.n	8008b44 <__sflush_r+0xb8>
 8008aea:	4a2a      	ldr	r2, [pc, #168]	; (8008b94 <__sflush_r+0x108>)
 8008aec:	40ca      	lsrs	r2, r1
 8008aee:	07d6      	lsls	r6, r2, #31
 8008af0:	d528      	bpl.n	8008b44 <__sflush_r+0xb8>
 8008af2:	2200      	movs	r2, #0
 8008af4:	6062      	str	r2, [r4, #4]
 8008af6:	04d9      	lsls	r1, r3, #19
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	6022      	str	r2, [r4, #0]
 8008afc:	d504      	bpl.n	8008b08 <__sflush_r+0x7c>
 8008afe:	1c42      	adds	r2, r0, #1
 8008b00:	d101      	bne.n	8008b06 <__sflush_r+0x7a>
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	b903      	cbnz	r3, 8008b08 <__sflush_r+0x7c>
 8008b06:	6560      	str	r0, [r4, #84]	; 0x54
 8008b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0a:	602f      	str	r7, [r5, #0]
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d0ca      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b14:	4299      	cmp	r1, r3
 8008b16:	d002      	beq.n	8008b1e <__sflush_r+0x92>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 f9d7 	bl	8008ecc <_free_r>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	6360      	str	r0, [r4, #52]	; 0x34
 8008b22:	e7c1      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b24:	6a21      	ldr	r1, [r4, #32]
 8008b26:	2301      	movs	r3, #1
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b0      	blx	r6
 8008b2c:	1c41      	adds	r1, r0, #1
 8008b2e:	d1c7      	bne.n	8008ac0 <__sflush_r+0x34>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0c4      	beq.n	8008ac0 <__sflush_r+0x34>
 8008b36:	2b1d      	cmp	r3, #29
 8008b38:	d001      	beq.n	8008b3e <__sflush_r+0xb2>
 8008b3a:	2b16      	cmp	r3, #22
 8008b3c:	d101      	bne.n	8008b42 <__sflush_r+0xb6>
 8008b3e:	602f      	str	r7, [r5, #0]
 8008b40:	e7b1      	b.n	8008aa6 <__sflush_r+0x1a>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	e7ad      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b4c:	690f      	ldr	r7, [r1, #16]
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	d0a9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b52:	0793      	lsls	r3, r2, #30
 8008b54:	680e      	ldr	r6, [r1, #0]
 8008b56:	bf08      	it	eq
 8008b58:	694b      	ldreq	r3, [r1, #20]
 8008b5a:	600f      	str	r7, [r1, #0]
 8008b5c:	bf18      	it	ne
 8008b5e:	2300      	movne	r3, #0
 8008b60:	eba6 0807 	sub.w	r8, r6, r7
 8008b64:	608b      	str	r3, [r1, #8]
 8008b66:	f1b8 0f00 	cmp.w	r8, #0
 8008b6a:	dd9c      	ble.n	8008aa6 <__sflush_r+0x1a>
 8008b6c:	6a21      	ldr	r1, [r4, #32]
 8008b6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b70:	4643      	mov	r3, r8
 8008b72:	463a      	mov	r2, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dc06      	bgt.n	8008b8a <__sflush_r+0xfe>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b88:	e78e      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b8a:	4407      	add	r7, r0
 8008b8c:	eba8 0800 	sub.w	r8, r8, r0
 8008b90:	e7e9      	b.n	8008b66 <__sflush_r+0xda>
 8008b92:	bf00      	nop
 8008b94:	20400001 	.word	0x20400001

08008b98 <_fflush_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	690b      	ldr	r3, [r1, #16]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	b913      	cbnz	r3, 8008ba8 <_fflush_r+0x10>
 8008ba2:	2500      	movs	r5, #0
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	b118      	cbz	r0, 8008bb2 <_fflush_r+0x1a>
 8008baa:	6983      	ldr	r3, [r0, #24]
 8008bac:	b90b      	cbnz	r3, 8008bb2 <_fflush_r+0x1a>
 8008bae:	f000 f887 	bl	8008cc0 <__sinit>
 8008bb2:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <_fflush_r+0x6c>)
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	d11b      	bne.n	8008bf0 <_fflush_r+0x58>
 8008bb8:	686c      	ldr	r4, [r5, #4]
 8008bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0ef      	beq.n	8008ba2 <_fflush_r+0xa>
 8008bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bc4:	07d0      	lsls	r0, r2, #31
 8008bc6:	d404      	bmi.n	8008bd2 <_fflush_r+0x3a>
 8008bc8:	0599      	lsls	r1, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_fflush_r+0x3a>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f000 f915 	bl	8008dfc <__retarget_lock_acquire_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7ff ff59 	bl	8008a8c <__sflush_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bdc:	07da      	lsls	r2, r3, #31
 8008bde:	4605      	mov	r5, r0
 8008be0:	d4e0      	bmi.n	8008ba4 <_fflush_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	059b      	lsls	r3, r3, #22
 8008be6:	d4dd      	bmi.n	8008ba4 <_fflush_r+0xc>
 8008be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bea:	f000 f908 	bl	8008dfe <__retarget_lock_release_recursive>
 8008bee:	e7d9      	b.n	8008ba4 <_fflush_r+0xc>
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <_fflush_r+0x70>)
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d101      	bne.n	8008bfa <_fflush_r+0x62>
 8008bf6:	68ac      	ldr	r4, [r5, #8]
 8008bf8:	e7df      	b.n	8008bba <_fflush_r+0x22>
 8008bfa:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <_fflush_r+0x74>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	bf08      	it	eq
 8008c00:	68ec      	ldreq	r4, [r5, #12]
 8008c02:	e7da      	b.n	8008bba <_fflush_r+0x22>
 8008c04:	0800aab8 	.word	0x0800aab8
 8008c08:	0800aad8 	.word	0x0800aad8
 8008c0c:	0800aa98 	.word	0x0800aa98

08008c10 <std>:
 8008c10:	2300      	movs	r3, #0
 8008c12:	b510      	push	{r4, lr}
 8008c14:	4604      	mov	r4, r0
 8008c16:	e9c0 3300 	strd	r3, r3, [r0]
 8008c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c1e:	6083      	str	r3, [r0, #8]
 8008c20:	8181      	strh	r1, [r0, #12]
 8008c22:	6643      	str	r3, [r0, #100]	; 0x64
 8008c24:	81c2      	strh	r2, [r0, #14]
 8008c26:	6183      	str	r3, [r0, #24]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	305c      	adds	r0, #92	; 0x5c
 8008c2e:	f7ff fdd7 	bl	80087e0 <memset>
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <std+0x38>)
 8008c34:	6263      	str	r3, [r4, #36]	; 0x24
 8008c36:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <std+0x3c>)
 8008c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <std+0x40>)
 8008c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <std+0x44>)
 8008c40:	6224      	str	r4, [r4, #32]
 8008c42:	6323      	str	r3, [r4, #48]	; 0x30
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	bf00      	nop
 8008c48:	08009689 	.word	0x08009689
 8008c4c:	080096ab 	.word	0x080096ab
 8008c50:	080096e3 	.word	0x080096e3
 8008c54:	08009707 	.word	0x08009707

08008c58 <_cleanup_r>:
 8008c58:	4901      	ldr	r1, [pc, #4]	; (8008c60 <_cleanup_r+0x8>)
 8008c5a:	f000 b8af 	b.w	8008dbc <_fwalk_reent>
 8008c5e:	bf00      	nop
 8008c60:	08008b99 	.word	0x08008b99

08008c64 <__sfmoreglue>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	2268      	movs	r2, #104	; 0x68
 8008c68:	1e4d      	subs	r5, r1, #1
 8008c6a:	4355      	muls	r5, r2
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c72:	f000 f997 	bl	8008fa4 <_malloc_r>
 8008c76:	4604      	mov	r4, r0
 8008c78:	b140      	cbz	r0, 8008c8c <__sfmoreglue+0x28>
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8008c80:	300c      	adds	r0, #12
 8008c82:	60a0      	str	r0, [r4, #8]
 8008c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c88:	f7ff fdaa 	bl	80087e0 <memset>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}

08008c90 <__sfp_lock_acquire>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__sfp_lock_acquire+0x8>)
 8008c92:	f000 b8b3 	b.w	8008dfc <__retarget_lock_acquire_recursive>
 8008c96:	bf00      	nop
 8008c98:	200006d1 	.word	0x200006d1

08008c9c <__sfp_lock_release>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__sfp_lock_release+0x8>)
 8008c9e:	f000 b8ae 	b.w	8008dfe <__retarget_lock_release_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	200006d1 	.word	0x200006d1

08008ca8 <__sinit_lock_acquire>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__sinit_lock_acquire+0x8>)
 8008caa:	f000 b8a7 	b.w	8008dfc <__retarget_lock_acquire_recursive>
 8008cae:	bf00      	nop
 8008cb0:	200006d2 	.word	0x200006d2

08008cb4 <__sinit_lock_release>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__sinit_lock_release+0x8>)
 8008cb6:	f000 b8a2 	b.w	8008dfe <__retarget_lock_release_recursive>
 8008cba:	bf00      	nop
 8008cbc:	200006d2 	.word	0x200006d2

08008cc0 <__sinit>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	f7ff fff0 	bl	8008ca8 <__sinit_lock_acquire>
 8008cc8:	69a3      	ldr	r3, [r4, #24]
 8008cca:	b11b      	cbz	r3, 8008cd4 <__sinit+0x14>
 8008ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd0:	f7ff bff0 	b.w	8008cb4 <__sinit_lock_release>
 8008cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8008cda:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <__sinit+0x68>)
 8008cdc:	4a13      	ldr	r2, [pc, #76]	; (8008d2c <__sinit+0x6c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	bf04      	itt	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	61a3      	streq	r3, [r4, #24]
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 f820 	bl	8008d30 <__sfp>
 8008cf0:	6060      	str	r0, [r4, #4]
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 f81c 	bl	8008d30 <__sfp>
 8008cf8:	60a0      	str	r0, [r4, #8]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 f818 	bl	8008d30 <__sfp>
 8008d00:	2200      	movs	r2, #0
 8008d02:	60e0      	str	r0, [r4, #12]
 8008d04:	2104      	movs	r1, #4
 8008d06:	6860      	ldr	r0, [r4, #4]
 8008d08:	f7ff ff82 	bl	8008c10 <std>
 8008d0c:	68a0      	ldr	r0, [r4, #8]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	2109      	movs	r1, #9
 8008d12:	f7ff ff7d 	bl	8008c10 <std>
 8008d16:	68e0      	ldr	r0, [r4, #12]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	2112      	movs	r1, #18
 8008d1c:	f7ff ff78 	bl	8008c10 <std>
 8008d20:	2301      	movs	r3, #1
 8008d22:	61a3      	str	r3, [r4, #24]
 8008d24:	e7d2      	b.n	8008ccc <__sinit+0xc>
 8008d26:	bf00      	nop
 8008d28:	0800aa94 	.word	0x0800aa94
 8008d2c:	08008c59 	.word	0x08008c59

08008d30 <__sfp>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	4607      	mov	r7, r0
 8008d34:	f7ff ffac 	bl	8008c90 <__sfp_lock_acquire>
 8008d38:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <__sfp+0x84>)
 8008d3a:	681e      	ldr	r6, [r3, #0]
 8008d3c:	69b3      	ldr	r3, [r6, #24]
 8008d3e:	b913      	cbnz	r3, 8008d46 <__sfp+0x16>
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff ffbd 	bl	8008cc0 <__sinit>
 8008d46:	3648      	adds	r6, #72	; 0x48
 8008d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	d503      	bpl.n	8008d58 <__sfp+0x28>
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	b30b      	cbz	r3, 8008d98 <__sfp+0x68>
 8008d54:	6836      	ldr	r6, [r6, #0]
 8008d56:	e7f7      	b.n	8008d48 <__sfp+0x18>
 8008d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d5c:	b9d5      	cbnz	r5, 8008d94 <__sfp+0x64>
 8008d5e:	4b16      	ldr	r3, [pc, #88]	; (8008db8 <__sfp+0x88>)
 8008d60:	60e3      	str	r3, [r4, #12]
 8008d62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d66:	6665      	str	r5, [r4, #100]	; 0x64
 8008d68:	f000 f847 	bl	8008dfa <__retarget_lock_init_recursive>
 8008d6c:	f7ff ff96 	bl	8008c9c <__sfp_lock_release>
 8008d70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d78:	6025      	str	r5, [r4, #0]
 8008d7a:	61a5      	str	r5, [r4, #24]
 8008d7c:	2208      	movs	r2, #8
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d84:	f7ff fd2c 	bl	80087e0 <memset>
 8008d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d90:	4620      	mov	r0, r4
 8008d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d94:	3468      	adds	r4, #104	; 0x68
 8008d96:	e7d9      	b.n	8008d4c <__sfp+0x1c>
 8008d98:	2104      	movs	r1, #4
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f7ff ff62 	bl	8008c64 <__sfmoreglue>
 8008da0:	4604      	mov	r4, r0
 8008da2:	6030      	str	r0, [r6, #0]
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1d5      	bne.n	8008d54 <__sfp+0x24>
 8008da8:	f7ff ff78 	bl	8008c9c <__sfp_lock_release>
 8008dac:	230c      	movs	r3, #12
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	e7ee      	b.n	8008d90 <__sfp+0x60>
 8008db2:	bf00      	nop
 8008db4:	0800aa94 	.word	0x0800aa94
 8008db8:	ffff0001 	.word	0xffff0001

08008dbc <_fwalk_reent>:
 8008dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	4688      	mov	r8, r1
 8008dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dc8:	2700      	movs	r7, #0
 8008dca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dce:	f1b9 0901 	subs.w	r9, r9, #1
 8008dd2:	d505      	bpl.n	8008de0 <_fwalk_reent+0x24>
 8008dd4:	6824      	ldr	r4, [r4, #0]
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	d1f7      	bne.n	8008dca <_fwalk_reent+0xe>
 8008dda:	4638      	mov	r0, r7
 8008ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de0:	89ab      	ldrh	r3, [r5, #12]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d907      	bls.n	8008df6 <_fwalk_reent+0x3a>
 8008de6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dea:	3301      	adds	r3, #1
 8008dec:	d003      	beq.n	8008df6 <_fwalk_reent+0x3a>
 8008dee:	4629      	mov	r1, r5
 8008df0:	4630      	mov	r0, r6
 8008df2:	47c0      	blx	r8
 8008df4:	4307      	orrs	r7, r0
 8008df6:	3568      	adds	r5, #104	; 0x68
 8008df8:	e7e9      	b.n	8008dce <_fwalk_reent+0x12>

08008dfa <__retarget_lock_init_recursive>:
 8008dfa:	4770      	bx	lr

08008dfc <__retarget_lock_acquire_recursive>:
 8008dfc:	4770      	bx	lr

08008dfe <__retarget_lock_release_recursive>:
 8008dfe:	4770      	bx	lr

08008e00 <__swhatbuf_r>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	460e      	mov	r6, r1
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	b096      	sub	sp, #88	; 0x58
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	461d      	mov	r5, r3
 8008e10:	da08      	bge.n	8008e24 <__swhatbuf_r+0x24>
 8008e12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	602a      	str	r2, [r5, #0]
 8008e1a:	061a      	lsls	r2, r3, #24
 8008e1c:	d410      	bmi.n	8008e40 <__swhatbuf_r+0x40>
 8008e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e22:	e00e      	b.n	8008e42 <__swhatbuf_r+0x42>
 8008e24:	466a      	mov	r2, sp
 8008e26:	f000 fc95 	bl	8009754 <_fstat_r>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	dbf1      	blt.n	8008e12 <__swhatbuf_r+0x12>
 8008e2e:	9a01      	ldr	r2, [sp, #4]
 8008e30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e38:	425a      	negs	r2, r3
 8008e3a:	415a      	adcs	r2, r3
 8008e3c:	602a      	str	r2, [r5, #0]
 8008e3e:	e7ee      	b.n	8008e1e <__swhatbuf_r+0x1e>
 8008e40:	2340      	movs	r3, #64	; 0x40
 8008e42:	2000      	movs	r0, #0
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	b016      	add	sp, #88	; 0x58
 8008e48:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e4c <__smakebuf_r>:
 8008e4c:	898b      	ldrh	r3, [r1, #12]
 8008e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e50:	079d      	lsls	r5, r3, #30
 8008e52:	4606      	mov	r6, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	d507      	bpl.n	8008e68 <__smakebuf_r+0x1c>
 8008e58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	2301      	movs	r3, #1
 8008e62:	6163      	str	r3, [r4, #20]
 8008e64:	b002      	add	sp, #8
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	ab01      	add	r3, sp, #4
 8008e6a:	466a      	mov	r2, sp
 8008e6c:	f7ff ffc8 	bl	8008e00 <__swhatbuf_r>
 8008e70:	9900      	ldr	r1, [sp, #0]
 8008e72:	4605      	mov	r5, r0
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f895 	bl	8008fa4 <_malloc_r>
 8008e7a:	b948      	cbnz	r0, 8008e90 <__smakebuf_r+0x44>
 8008e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e80:	059a      	lsls	r2, r3, #22
 8008e82:	d4ef      	bmi.n	8008e64 <__smakebuf_r+0x18>
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	f043 0302 	orr.w	r3, r3, #2
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	e7e3      	b.n	8008e58 <__smakebuf_r+0xc>
 8008e90:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <__smakebuf_r+0x7c>)
 8008e92:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	6020      	str	r0, [r4, #0]
 8008e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	6163      	str	r3, [r4, #20]
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	6120      	str	r0, [r4, #16]
 8008ea6:	b15b      	cbz	r3, 8008ec0 <__smakebuf_r+0x74>
 8008ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 fc63 	bl	8009778 <_isatty_r>
 8008eb2:	b128      	cbz	r0, 8008ec0 <__smakebuf_r+0x74>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	f043 0301 	orr.w	r3, r3, #1
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	89a0      	ldrh	r0, [r4, #12]
 8008ec2:	4305      	orrs	r5, r0
 8008ec4:	81a5      	strh	r5, [r4, #12]
 8008ec6:	e7cd      	b.n	8008e64 <__smakebuf_r+0x18>
 8008ec8:	08008c59 	.word	0x08008c59

08008ecc <_free_r>:
 8008ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d044      	beq.n	8008f5c <_free_r+0x90>
 8008ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f1a1 0404 	sub.w	r4, r1, #4
 8008ede:	bfb8      	it	lt
 8008ee0:	18e4      	addlt	r4, r4, r3
 8008ee2:	f000 fc6b 	bl	80097bc <__malloc_lock>
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <_free_r+0x94>)
 8008ee8:	9801      	ldr	r0, [sp, #4]
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	b933      	cbnz	r3, 8008efc <_free_r+0x30>
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	6014      	str	r4, [r2, #0]
 8008ef2:	b003      	add	sp, #12
 8008ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef8:	f000 bc66 	b.w	80097c8 <__malloc_unlock>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d908      	bls.n	8008f12 <_free_r+0x46>
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	428b      	cmp	r3, r1
 8008f06:	bf01      	itttt	eq
 8008f08:	6819      	ldreq	r1, [r3, #0]
 8008f0a:	685b      	ldreq	r3, [r3, #4]
 8008f0c:	1949      	addeq	r1, r1, r5
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	e7ed      	b.n	8008eee <_free_r+0x22>
 8008f12:	461a      	mov	r2, r3
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	b10b      	cbz	r3, 8008f1c <_free_r+0x50>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d9fa      	bls.n	8008f12 <_free_r+0x46>
 8008f1c:	6811      	ldr	r1, [r2, #0]
 8008f1e:	1855      	adds	r5, r2, r1
 8008f20:	42a5      	cmp	r5, r4
 8008f22:	d10b      	bne.n	8008f3c <_free_r+0x70>
 8008f24:	6824      	ldr	r4, [r4, #0]
 8008f26:	4421      	add	r1, r4
 8008f28:	1854      	adds	r4, r2, r1
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	d1e0      	bne.n	8008ef2 <_free_r+0x26>
 8008f30:	681c      	ldr	r4, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	6053      	str	r3, [r2, #4]
 8008f36:	4421      	add	r1, r4
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	e7da      	b.n	8008ef2 <_free_r+0x26>
 8008f3c:	d902      	bls.n	8008f44 <_free_r+0x78>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	e7d6      	b.n	8008ef2 <_free_r+0x26>
 8008f44:	6825      	ldr	r5, [r4, #0]
 8008f46:	1961      	adds	r1, r4, r5
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	bf04      	itt	eq
 8008f4c:	6819      	ldreq	r1, [r3, #0]
 8008f4e:	685b      	ldreq	r3, [r3, #4]
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	bf04      	itt	eq
 8008f54:	1949      	addeq	r1, r1, r5
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	6054      	str	r4, [r2, #4]
 8008f5a:	e7ca      	b.n	8008ef2 <_free_r+0x26>
 8008f5c:	b003      	add	sp, #12
 8008f5e:	bd30      	pop	{r4, r5, pc}
 8008f60:	200006d4 	.word	0x200006d4

08008f64 <sbrk_aligned>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	4e0e      	ldr	r6, [pc, #56]	; (8008fa0 <sbrk_aligned+0x3c>)
 8008f68:	460c      	mov	r4, r1
 8008f6a:	6831      	ldr	r1, [r6, #0]
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	b911      	cbnz	r1, 8008f76 <sbrk_aligned+0x12>
 8008f70:	f000 fb7a 	bl	8009668 <_sbrk_r>
 8008f74:	6030      	str	r0, [r6, #0]
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 fb75 	bl	8009668 <_sbrk_r>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	d00a      	beq.n	8008f98 <sbrk_aligned+0x34>
 8008f82:	1cc4      	adds	r4, r0, #3
 8008f84:	f024 0403 	bic.w	r4, r4, #3
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d007      	beq.n	8008f9c <sbrk_aligned+0x38>
 8008f8c:	1a21      	subs	r1, r4, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 fb6a 	bl	8009668 <_sbrk_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d101      	bne.n	8008f9c <sbrk_aligned+0x38>
 8008f98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	200006d8 	.word	0x200006d8

08008fa4 <_malloc_r>:
 8008fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa8:	1ccd      	adds	r5, r1, #3
 8008faa:	f025 0503 	bic.w	r5, r5, #3
 8008fae:	3508      	adds	r5, #8
 8008fb0:	2d0c      	cmp	r5, #12
 8008fb2:	bf38      	it	cc
 8008fb4:	250c      	movcc	r5, #12
 8008fb6:	2d00      	cmp	r5, #0
 8008fb8:	4607      	mov	r7, r0
 8008fba:	db01      	blt.n	8008fc0 <_malloc_r+0x1c>
 8008fbc:	42a9      	cmp	r1, r5
 8008fbe:	d905      	bls.n	8008fcc <_malloc_r+0x28>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fcc:	4e2e      	ldr	r6, [pc, #184]	; (8009088 <_malloc_r+0xe4>)
 8008fce:	f000 fbf5 	bl	80097bc <__malloc_lock>
 8008fd2:	6833      	ldr	r3, [r6, #0]
 8008fd4:	461c      	mov	r4, r3
 8008fd6:	bb34      	cbnz	r4, 8009026 <_malloc_r+0x82>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f7ff ffc2 	bl	8008f64 <sbrk_aligned>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	d14d      	bne.n	8009082 <_malloc_r+0xde>
 8008fe6:	6834      	ldr	r4, [r6, #0]
 8008fe8:	4626      	mov	r6, r4
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d140      	bne.n	8009070 <_malloc_r+0xcc>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	eb04 0803 	add.w	r8, r4, r3
 8008ff8:	f000 fb36 	bl	8009668 <_sbrk_r>
 8008ffc:	4580      	cmp	r8, r0
 8008ffe:	d13a      	bne.n	8009076 <_malloc_r+0xd2>
 8009000:	6821      	ldr	r1, [r4, #0]
 8009002:	3503      	adds	r5, #3
 8009004:	1a6d      	subs	r5, r5, r1
 8009006:	f025 0503 	bic.w	r5, r5, #3
 800900a:	3508      	adds	r5, #8
 800900c:	2d0c      	cmp	r5, #12
 800900e:	bf38      	it	cc
 8009010:	250c      	movcc	r5, #12
 8009012:	4629      	mov	r1, r5
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff ffa5 	bl	8008f64 <sbrk_aligned>
 800901a:	3001      	adds	r0, #1
 800901c:	d02b      	beq.n	8009076 <_malloc_r+0xd2>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	442b      	add	r3, r5
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	e00e      	b.n	8009044 <_malloc_r+0xa0>
 8009026:	6822      	ldr	r2, [r4, #0]
 8009028:	1b52      	subs	r2, r2, r5
 800902a:	d41e      	bmi.n	800906a <_malloc_r+0xc6>
 800902c:	2a0b      	cmp	r2, #11
 800902e:	d916      	bls.n	800905e <_malloc_r+0xba>
 8009030:	1961      	adds	r1, r4, r5
 8009032:	42a3      	cmp	r3, r4
 8009034:	6025      	str	r5, [r4, #0]
 8009036:	bf18      	it	ne
 8009038:	6059      	strne	r1, [r3, #4]
 800903a:	6863      	ldr	r3, [r4, #4]
 800903c:	bf08      	it	eq
 800903e:	6031      	streq	r1, [r6, #0]
 8009040:	5162      	str	r2, [r4, r5]
 8009042:	604b      	str	r3, [r1, #4]
 8009044:	4638      	mov	r0, r7
 8009046:	f104 060b 	add.w	r6, r4, #11
 800904a:	f000 fbbd 	bl	80097c8 <__malloc_unlock>
 800904e:	f026 0607 	bic.w	r6, r6, #7
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	1af2      	subs	r2, r6, r3
 8009056:	d0b6      	beq.n	8008fc6 <_malloc_r+0x22>
 8009058:	1b9b      	subs	r3, r3, r6
 800905a:	50a3      	str	r3, [r4, r2]
 800905c:	e7b3      	b.n	8008fc6 <_malloc_r+0x22>
 800905e:	6862      	ldr	r2, [r4, #4]
 8009060:	42a3      	cmp	r3, r4
 8009062:	bf0c      	ite	eq
 8009064:	6032      	streq	r2, [r6, #0]
 8009066:	605a      	strne	r2, [r3, #4]
 8009068:	e7ec      	b.n	8009044 <_malloc_r+0xa0>
 800906a:	4623      	mov	r3, r4
 800906c:	6864      	ldr	r4, [r4, #4]
 800906e:	e7b2      	b.n	8008fd6 <_malloc_r+0x32>
 8009070:	4634      	mov	r4, r6
 8009072:	6876      	ldr	r6, [r6, #4]
 8009074:	e7b9      	b.n	8008fea <_malloc_r+0x46>
 8009076:	230c      	movs	r3, #12
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	4638      	mov	r0, r7
 800907c:	f000 fba4 	bl	80097c8 <__malloc_unlock>
 8009080:	e7a1      	b.n	8008fc6 <_malloc_r+0x22>
 8009082:	6025      	str	r5, [r4, #0]
 8009084:	e7de      	b.n	8009044 <_malloc_r+0xa0>
 8009086:	bf00      	nop
 8009088:	200006d4 	.word	0x200006d4

0800908c <__sfputc_r>:
 800908c:	6893      	ldr	r3, [r2, #8]
 800908e:	3b01      	subs	r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	b410      	push	{r4}
 8009094:	6093      	str	r3, [r2, #8]
 8009096:	da08      	bge.n	80090aa <__sfputc_r+0x1e>
 8009098:	6994      	ldr	r4, [r2, #24]
 800909a:	42a3      	cmp	r3, r4
 800909c:	db01      	blt.n	80090a2 <__sfputc_r+0x16>
 800909e:	290a      	cmp	r1, #10
 80090a0:	d103      	bne.n	80090aa <__sfputc_r+0x1e>
 80090a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a6:	f7ff bc31 	b.w	800890c <__swbuf_r>
 80090aa:	6813      	ldr	r3, [r2, #0]
 80090ac:	1c58      	adds	r0, r3, #1
 80090ae:	6010      	str	r0, [r2, #0]
 80090b0:	7019      	strb	r1, [r3, #0]
 80090b2:	4608      	mov	r0, r1
 80090b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <__sfputs_r>:
 80090ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090bc:	4606      	mov	r6, r0
 80090be:	460f      	mov	r7, r1
 80090c0:	4614      	mov	r4, r2
 80090c2:	18d5      	adds	r5, r2, r3
 80090c4:	42ac      	cmp	r4, r5
 80090c6:	d101      	bne.n	80090cc <__sfputs_r+0x12>
 80090c8:	2000      	movs	r0, #0
 80090ca:	e007      	b.n	80090dc <__sfputs_r+0x22>
 80090cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d0:	463a      	mov	r2, r7
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ffda 	bl	800908c <__sfputc_r>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d1f3      	bne.n	80090c4 <__sfputs_r+0xa>
 80090dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090e0 <_vfiprintf_r>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	460d      	mov	r5, r1
 80090e6:	b09d      	sub	sp, #116	; 0x74
 80090e8:	4614      	mov	r4, r2
 80090ea:	4698      	mov	r8, r3
 80090ec:	4606      	mov	r6, r0
 80090ee:	b118      	cbz	r0, 80090f8 <_vfiprintf_r+0x18>
 80090f0:	6983      	ldr	r3, [r0, #24]
 80090f2:	b90b      	cbnz	r3, 80090f8 <_vfiprintf_r+0x18>
 80090f4:	f7ff fde4 	bl	8008cc0 <__sinit>
 80090f8:	4b89      	ldr	r3, [pc, #548]	; (8009320 <_vfiprintf_r+0x240>)
 80090fa:	429d      	cmp	r5, r3
 80090fc:	d11b      	bne.n	8009136 <_vfiprintf_r+0x56>
 80090fe:	6875      	ldr	r5, [r6, #4]
 8009100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009102:	07d9      	lsls	r1, r3, #31
 8009104:	d405      	bmi.n	8009112 <_vfiprintf_r+0x32>
 8009106:	89ab      	ldrh	r3, [r5, #12]
 8009108:	059a      	lsls	r2, r3, #22
 800910a:	d402      	bmi.n	8009112 <_vfiprintf_r+0x32>
 800910c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800910e:	f7ff fe75 	bl	8008dfc <__retarget_lock_acquire_recursive>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	071b      	lsls	r3, r3, #28
 8009116:	d501      	bpl.n	800911c <_vfiprintf_r+0x3c>
 8009118:	692b      	ldr	r3, [r5, #16]
 800911a:	b9eb      	cbnz	r3, 8009158 <_vfiprintf_r+0x78>
 800911c:	4629      	mov	r1, r5
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff fc46 	bl	80089b0 <__swsetup_r>
 8009124:	b1c0      	cbz	r0, 8009158 <_vfiprintf_r+0x78>
 8009126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009128:	07dc      	lsls	r4, r3, #31
 800912a:	d50e      	bpl.n	800914a <_vfiprintf_r+0x6a>
 800912c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009130:	b01d      	add	sp, #116	; 0x74
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	4b7b      	ldr	r3, [pc, #492]	; (8009324 <_vfiprintf_r+0x244>)
 8009138:	429d      	cmp	r5, r3
 800913a:	d101      	bne.n	8009140 <_vfiprintf_r+0x60>
 800913c:	68b5      	ldr	r5, [r6, #8]
 800913e:	e7df      	b.n	8009100 <_vfiprintf_r+0x20>
 8009140:	4b79      	ldr	r3, [pc, #484]	; (8009328 <_vfiprintf_r+0x248>)
 8009142:	429d      	cmp	r5, r3
 8009144:	bf08      	it	eq
 8009146:	68f5      	ldreq	r5, [r6, #12]
 8009148:	e7da      	b.n	8009100 <_vfiprintf_r+0x20>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	0598      	lsls	r0, r3, #22
 800914e:	d4ed      	bmi.n	800912c <_vfiprintf_r+0x4c>
 8009150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009152:	f7ff fe54 	bl	8008dfe <__retarget_lock_release_recursive>
 8009156:	e7e9      	b.n	800912c <_vfiprintf_r+0x4c>
 8009158:	2300      	movs	r3, #0
 800915a:	9309      	str	r3, [sp, #36]	; 0x24
 800915c:	2320      	movs	r3, #32
 800915e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009162:	f8cd 800c 	str.w	r8, [sp, #12]
 8009166:	2330      	movs	r3, #48	; 0x30
 8009168:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800932c <_vfiprintf_r+0x24c>
 800916c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009170:	f04f 0901 	mov.w	r9, #1
 8009174:	4623      	mov	r3, r4
 8009176:	469a      	mov	sl, r3
 8009178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917c:	b10a      	cbz	r2, 8009182 <_vfiprintf_r+0xa2>
 800917e:	2a25      	cmp	r2, #37	; 0x25
 8009180:	d1f9      	bne.n	8009176 <_vfiprintf_r+0x96>
 8009182:	ebba 0b04 	subs.w	fp, sl, r4
 8009186:	d00b      	beq.n	80091a0 <_vfiprintf_r+0xc0>
 8009188:	465b      	mov	r3, fp
 800918a:	4622      	mov	r2, r4
 800918c:	4629      	mov	r1, r5
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff ff93 	bl	80090ba <__sfputs_r>
 8009194:	3001      	adds	r0, #1
 8009196:	f000 80aa 	beq.w	80092ee <_vfiprintf_r+0x20e>
 800919a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800919c:	445a      	add	r2, fp
 800919e:	9209      	str	r2, [sp, #36]	; 0x24
 80091a0:	f89a 3000 	ldrb.w	r3, [sl]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80a2 	beq.w	80092ee <_vfiprintf_r+0x20e>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b4:	f10a 0a01 	add.w	sl, sl, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c0:	931a      	str	r3, [sp, #104]	; 0x68
 80091c2:	4654      	mov	r4, sl
 80091c4:	2205      	movs	r2, #5
 80091c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ca:	4858      	ldr	r0, [pc, #352]	; (800932c <_vfiprintf_r+0x24c>)
 80091cc:	f7f7 f800 	bl	80001d0 <memchr>
 80091d0:	9a04      	ldr	r2, [sp, #16]
 80091d2:	b9d8      	cbnz	r0, 800920c <_vfiprintf_r+0x12c>
 80091d4:	06d1      	lsls	r1, r2, #27
 80091d6:	bf44      	itt	mi
 80091d8:	2320      	movmi	r3, #32
 80091da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091de:	0713      	lsls	r3, r2, #28
 80091e0:	bf44      	itt	mi
 80091e2:	232b      	movmi	r3, #43	; 0x2b
 80091e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ec:	2b2a      	cmp	r3, #42	; 0x2a
 80091ee:	d015      	beq.n	800921c <_vfiprintf_r+0x13c>
 80091f0:	9a07      	ldr	r2, [sp, #28]
 80091f2:	4654      	mov	r4, sl
 80091f4:	2000      	movs	r0, #0
 80091f6:	f04f 0c0a 	mov.w	ip, #10
 80091fa:	4621      	mov	r1, r4
 80091fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009200:	3b30      	subs	r3, #48	; 0x30
 8009202:	2b09      	cmp	r3, #9
 8009204:	d94e      	bls.n	80092a4 <_vfiprintf_r+0x1c4>
 8009206:	b1b0      	cbz	r0, 8009236 <_vfiprintf_r+0x156>
 8009208:	9207      	str	r2, [sp, #28]
 800920a:	e014      	b.n	8009236 <_vfiprintf_r+0x156>
 800920c:	eba0 0308 	sub.w	r3, r0, r8
 8009210:	fa09 f303 	lsl.w	r3, r9, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	9304      	str	r3, [sp, #16]
 8009218:	46a2      	mov	sl, r4
 800921a:	e7d2      	b.n	80091c2 <_vfiprintf_r+0xe2>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1d19      	adds	r1, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	9103      	str	r1, [sp, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbb      	ittet	lt
 8009228:	425b      	neglt	r3, r3
 800922a:	f042 0202 	orrlt.w	r2, r2, #2
 800922e:	9307      	strge	r3, [sp, #28]
 8009230:	9307      	strlt	r3, [sp, #28]
 8009232:	bfb8      	it	lt
 8009234:	9204      	strlt	r2, [sp, #16]
 8009236:	7823      	ldrb	r3, [r4, #0]
 8009238:	2b2e      	cmp	r3, #46	; 0x2e
 800923a:	d10c      	bne.n	8009256 <_vfiprintf_r+0x176>
 800923c:	7863      	ldrb	r3, [r4, #1]
 800923e:	2b2a      	cmp	r3, #42	; 0x2a
 8009240:	d135      	bne.n	80092ae <_vfiprintf_r+0x1ce>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	1d1a      	adds	r2, r3, #4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	9203      	str	r2, [sp, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	bfb8      	it	lt
 800924e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009252:	3402      	adds	r4, #2
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800933c <_vfiprintf_r+0x25c>
 800925a:	7821      	ldrb	r1, [r4, #0]
 800925c:	2203      	movs	r2, #3
 800925e:	4650      	mov	r0, sl
 8009260:	f7f6 ffb6 	bl	80001d0 <memchr>
 8009264:	b140      	cbz	r0, 8009278 <_vfiprintf_r+0x198>
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	eba0 000a 	sub.w	r0, r0, sl
 800926c:	fa03 f000 	lsl.w	r0, r3, r0
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	4303      	orrs	r3, r0
 8009274:	3401      	adds	r4, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	482c      	ldr	r0, [pc, #176]	; (8009330 <_vfiprintf_r+0x250>)
 800927e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009282:	2206      	movs	r2, #6
 8009284:	f7f6 ffa4 	bl	80001d0 <memchr>
 8009288:	2800      	cmp	r0, #0
 800928a:	d03f      	beq.n	800930c <_vfiprintf_r+0x22c>
 800928c:	4b29      	ldr	r3, [pc, #164]	; (8009334 <_vfiprintf_r+0x254>)
 800928e:	bb1b      	cbnz	r3, 80092d8 <_vfiprintf_r+0x1f8>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	3307      	adds	r3, #7
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	3308      	adds	r3, #8
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929e:	443b      	add	r3, r7
 80092a0:	9309      	str	r3, [sp, #36]	; 0x24
 80092a2:	e767      	b.n	8009174 <_vfiprintf_r+0x94>
 80092a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a8:	460c      	mov	r4, r1
 80092aa:	2001      	movs	r0, #1
 80092ac:	e7a5      	b.n	80091fa <_vfiprintf_r+0x11a>
 80092ae:	2300      	movs	r3, #0
 80092b0:	3401      	adds	r4, #1
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	4619      	mov	r1, r3
 80092b6:	f04f 0c0a 	mov.w	ip, #10
 80092ba:	4620      	mov	r0, r4
 80092bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c0:	3a30      	subs	r2, #48	; 0x30
 80092c2:	2a09      	cmp	r2, #9
 80092c4:	d903      	bls.n	80092ce <_vfiprintf_r+0x1ee>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0c5      	beq.n	8009256 <_vfiprintf_r+0x176>
 80092ca:	9105      	str	r1, [sp, #20]
 80092cc:	e7c3      	b.n	8009256 <_vfiprintf_r+0x176>
 80092ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d2:	4604      	mov	r4, r0
 80092d4:	2301      	movs	r3, #1
 80092d6:	e7f0      	b.n	80092ba <_vfiprintf_r+0x1da>
 80092d8:	ab03      	add	r3, sp, #12
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	462a      	mov	r2, r5
 80092de:	4b16      	ldr	r3, [pc, #88]	; (8009338 <_vfiprintf_r+0x258>)
 80092e0:	a904      	add	r1, sp, #16
 80092e2:	4630      	mov	r0, r6
 80092e4:	f3af 8000 	nop.w
 80092e8:	4607      	mov	r7, r0
 80092ea:	1c78      	adds	r0, r7, #1
 80092ec:	d1d6      	bne.n	800929c <_vfiprintf_r+0x1bc>
 80092ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f0:	07d9      	lsls	r1, r3, #31
 80092f2:	d405      	bmi.n	8009300 <_vfiprintf_r+0x220>
 80092f4:	89ab      	ldrh	r3, [r5, #12]
 80092f6:	059a      	lsls	r2, r3, #22
 80092f8:	d402      	bmi.n	8009300 <_vfiprintf_r+0x220>
 80092fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fc:	f7ff fd7f 	bl	8008dfe <__retarget_lock_release_recursive>
 8009300:	89ab      	ldrh	r3, [r5, #12]
 8009302:	065b      	lsls	r3, r3, #25
 8009304:	f53f af12 	bmi.w	800912c <_vfiprintf_r+0x4c>
 8009308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800930a:	e711      	b.n	8009130 <_vfiprintf_r+0x50>
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <_vfiprintf_r+0x258>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	4630      	mov	r0, r6
 8009318:	f000 f880 	bl	800941c <_printf_i>
 800931c:	e7e4      	b.n	80092e8 <_vfiprintf_r+0x208>
 800931e:	bf00      	nop
 8009320:	0800aab8 	.word	0x0800aab8
 8009324:	0800aad8 	.word	0x0800aad8
 8009328:	0800aa98 	.word	0x0800aa98
 800932c:	0800aaf8 	.word	0x0800aaf8
 8009330:	0800ab02 	.word	0x0800ab02
 8009334:	00000000 	.word	0x00000000
 8009338:	080090bb 	.word	0x080090bb
 800933c:	0800aafe 	.word	0x0800aafe

08009340 <_printf_common>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	4616      	mov	r6, r2
 8009346:	4699      	mov	r9, r3
 8009348:	688a      	ldr	r2, [r1, #8]
 800934a:	690b      	ldr	r3, [r1, #16]
 800934c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009350:	4293      	cmp	r3, r2
 8009352:	bfb8      	it	lt
 8009354:	4613      	movlt	r3, r2
 8009356:	6033      	str	r3, [r6, #0]
 8009358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800935c:	4607      	mov	r7, r0
 800935e:	460c      	mov	r4, r1
 8009360:	b10a      	cbz	r2, 8009366 <_printf_common+0x26>
 8009362:	3301      	adds	r3, #1
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	0699      	lsls	r1, r3, #26
 800936a:	bf42      	ittt	mi
 800936c:	6833      	ldrmi	r3, [r6, #0]
 800936e:	3302      	addmi	r3, #2
 8009370:	6033      	strmi	r3, [r6, #0]
 8009372:	6825      	ldr	r5, [r4, #0]
 8009374:	f015 0506 	ands.w	r5, r5, #6
 8009378:	d106      	bne.n	8009388 <_printf_common+0x48>
 800937a:	f104 0a19 	add.w	sl, r4, #25
 800937e:	68e3      	ldr	r3, [r4, #12]
 8009380:	6832      	ldr	r2, [r6, #0]
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	42ab      	cmp	r3, r5
 8009386:	dc26      	bgt.n	80093d6 <_printf_common+0x96>
 8009388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800938c:	1e13      	subs	r3, r2, #0
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	bf18      	it	ne
 8009392:	2301      	movne	r3, #1
 8009394:	0692      	lsls	r2, r2, #26
 8009396:	d42b      	bmi.n	80093f0 <_printf_common+0xb0>
 8009398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800939c:	4649      	mov	r1, r9
 800939e:	4638      	mov	r0, r7
 80093a0:	47c0      	blx	r8
 80093a2:	3001      	adds	r0, #1
 80093a4:	d01e      	beq.n	80093e4 <_printf_common+0xa4>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	68e5      	ldr	r5, [r4, #12]
 80093aa:	6832      	ldr	r2, [r6, #0]
 80093ac:	f003 0306 	and.w	r3, r3, #6
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	bf08      	it	eq
 80093b4:	1aad      	subeq	r5, r5, r2
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	bf0c      	ite	eq
 80093bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c0:	2500      	movne	r5, #0
 80093c2:	4293      	cmp	r3, r2
 80093c4:	bfc4      	itt	gt
 80093c6:	1a9b      	subgt	r3, r3, r2
 80093c8:	18ed      	addgt	r5, r5, r3
 80093ca:	2600      	movs	r6, #0
 80093cc:	341a      	adds	r4, #26
 80093ce:	42b5      	cmp	r5, r6
 80093d0:	d11a      	bne.n	8009408 <_printf_common+0xc8>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e008      	b.n	80093e8 <_printf_common+0xa8>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4652      	mov	r2, sl
 80093da:	4649      	mov	r1, r9
 80093dc:	4638      	mov	r0, r7
 80093de:	47c0      	blx	r8
 80093e0:	3001      	adds	r0, #1
 80093e2:	d103      	bne.n	80093ec <_printf_common+0xac>
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ec:	3501      	adds	r5, #1
 80093ee:	e7c6      	b.n	800937e <_printf_common+0x3e>
 80093f0:	18e1      	adds	r1, r4, r3
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	2030      	movs	r0, #48	; 0x30
 80093f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093fa:	4422      	add	r2, r4
 80093fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009404:	3302      	adds	r3, #2
 8009406:	e7c7      	b.n	8009398 <_printf_common+0x58>
 8009408:	2301      	movs	r3, #1
 800940a:	4622      	mov	r2, r4
 800940c:	4649      	mov	r1, r9
 800940e:	4638      	mov	r0, r7
 8009410:	47c0      	blx	r8
 8009412:	3001      	adds	r0, #1
 8009414:	d0e6      	beq.n	80093e4 <_printf_common+0xa4>
 8009416:	3601      	adds	r6, #1
 8009418:	e7d9      	b.n	80093ce <_printf_common+0x8e>
	...

0800941c <_printf_i>:
 800941c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	7e0f      	ldrb	r7, [r1, #24]
 8009422:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009424:	2f78      	cmp	r7, #120	; 0x78
 8009426:	4691      	mov	r9, r2
 8009428:	4680      	mov	r8, r0
 800942a:	460c      	mov	r4, r1
 800942c:	469a      	mov	sl, r3
 800942e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009432:	d807      	bhi.n	8009444 <_printf_i+0x28>
 8009434:	2f62      	cmp	r7, #98	; 0x62
 8009436:	d80a      	bhi.n	800944e <_printf_i+0x32>
 8009438:	2f00      	cmp	r7, #0
 800943a:	f000 80d8 	beq.w	80095ee <_printf_i+0x1d2>
 800943e:	2f58      	cmp	r7, #88	; 0x58
 8009440:	f000 80a3 	beq.w	800958a <_printf_i+0x16e>
 8009444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800944c:	e03a      	b.n	80094c4 <_printf_i+0xa8>
 800944e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009452:	2b15      	cmp	r3, #21
 8009454:	d8f6      	bhi.n	8009444 <_printf_i+0x28>
 8009456:	a101      	add	r1, pc, #4	; (adr r1, 800945c <_printf_i+0x40>)
 8009458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800945c:	080094b5 	.word	0x080094b5
 8009460:	080094c9 	.word	0x080094c9
 8009464:	08009445 	.word	0x08009445
 8009468:	08009445 	.word	0x08009445
 800946c:	08009445 	.word	0x08009445
 8009470:	08009445 	.word	0x08009445
 8009474:	080094c9 	.word	0x080094c9
 8009478:	08009445 	.word	0x08009445
 800947c:	08009445 	.word	0x08009445
 8009480:	08009445 	.word	0x08009445
 8009484:	08009445 	.word	0x08009445
 8009488:	080095d5 	.word	0x080095d5
 800948c:	080094f9 	.word	0x080094f9
 8009490:	080095b7 	.word	0x080095b7
 8009494:	08009445 	.word	0x08009445
 8009498:	08009445 	.word	0x08009445
 800949c:	080095f7 	.word	0x080095f7
 80094a0:	08009445 	.word	0x08009445
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009445 	.word	0x08009445
 80094ac:	08009445 	.word	0x08009445
 80094b0:	080095bf 	.word	0x080095bf
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	602a      	str	r2, [r5, #0]
 80094bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0a3      	b.n	8009610 <_printf_i+0x1f4>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	6829      	ldr	r1, [r5, #0]
 80094cc:	0606      	lsls	r6, r0, #24
 80094ce:	f101 0304 	add.w	r3, r1, #4
 80094d2:	d50a      	bpl.n	80094ea <_printf_i+0xce>
 80094d4:	680e      	ldr	r6, [r1, #0]
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	2e00      	cmp	r6, #0
 80094da:	da03      	bge.n	80094e4 <_printf_i+0xc8>
 80094dc:	232d      	movs	r3, #45	; 0x2d
 80094de:	4276      	negs	r6, r6
 80094e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e4:	485e      	ldr	r0, [pc, #376]	; (8009660 <_printf_i+0x244>)
 80094e6:	230a      	movs	r3, #10
 80094e8:	e019      	b.n	800951e <_printf_i+0x102>
 80094ea:	680e      	ldr	r6, [r1, #0]
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094f2:	bf18      	it	ne
 80094f4:	b236      	sxthne	r6, r6
 80094f6:	e7ef      	b.n	80094d8 <_printf_i+0xbc>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	6820      	ldr	r0, [r4, #0]
 80094fc:	1d19      	adds	r1, r3, #4
 80094fe:	6029      	str	r1, [r5, #0]
 8009500:	0601      	lsls	r1, r0, #24
 8009502:	d501      	bpl.n	8009508 <_printf_i+0xec>
 8009504:	681e      	ldr	r6, [r3, #0]
 8009506:	e002      	b.n	800950e <_printf_i+0xf2>
 8009508:	0646      	lsls	r6, r0, #25
 800950a:	d5fb      	bpl.n	8009504 <_printf_i+0xe8>
 800950c:	881e      	ldrh	r6, [r3, #0]
 800950e:	4854      	ldr	r0, [pc, #336]	; (8009660 <_printf_i+0x244>)
 8009510:	2f6f      	cmp	r7, #111	; 0x6f
 8009512:	bf0c      	ite	eq
 8009514:	2308      	moveq	r3, #8
 8009516:	230a      	movne	r3, #10
 8009518:	2100      	movs	r1, #0
 800951a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800951e:	6865      	ldr	r5, [r4, #4]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	2d00      	cmp	r5, #0
 8009524:	bfa2      	ittt	ge
 8009526:	6821      	ldrge	r1, [r4, #0]
 8009528:	f021 0104 	bicge.w	r1, r1, #4
 800952c:	6021      	strge	r1, [r4, #0]
 800952e:	b90e      	cbnz	r6, 8009534 <_printf_i+0x118>
 8009530:	2d00      	cmp	r5, #0
 8009532:	d04d      	beq.n	80095d0 <_printf_i+0x1b4>
 8009534:	4615      	mov	r5, r2
 8009536:	fbb6 f1f3 	udiv	r1, r6, r3
 800953a:	fb03 6711 	mls	r7, r3, r1, r6
 800953e:	5dc7      	ldrb	r7, [r0, r7]
 8009540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009544:	4637      	mov	r7, r6
 8009546:	42bb      	cmp	r3, r7
 8009548:	460e      	mov	r6, r1
 800954a:	d9f4      	bls.n	8009536 <_printf_i+0x11a>
 800954c:	2b08      	cmp	r3, #8
 800954e:	d10b      	bne.n	8009568 <_printf_i+0x14c>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07de      	lsls	r6, r3, #31
 8009554:	d508      	bpl.n	8009568 <_printf_i+0x14c>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	4299      	cmp	r1, r3
 800955c:	bfde      	ittt	le
 800955e:	2330      	movle	r3, #48	; 0x30
 8009560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009564:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009568:	1b52      	subs	r2, r2, r5
 800956a:	6122      	str	r2, [r4, #16]
 800956c:	f8cd a000 	str.w	sl, [sp]
 8009570:	464b      	mov	r3, r9
 8009572:	aa03      	add	r2, sp, #12
 8009574:	4621      	mov	r1, r4
 8009576:	4640      	mov	r0, r8
 8009578:	f7ff fee2 	bl	8009340 <_printf_common>
 800957c:	3001      	adds	r0, #1
 800957e:	d14c      	bne.n	800961a <_printf_i+0x1fe>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009584:	b004      	add	sp, #16
 8009586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958a:	4835      	ldr	r0, [pc, #212]	; (8009660 <_printf_i+0x244>)
 800958c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009590:	6829      	ldr	r1, [r5, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f851 6b04 	ldr.w	r6, [r1], #4
 8009598:	6029      	str	r1, [r5, #0]
 800959a:	061d      	lsls	r5, r3, #24
 800959c:	d514      	bpl.n	80095c8 <_printf_i+0x1ac>
 800959e:	07df      	lsls	r7, r3, #31
 80095a0:	bf44      	itt	mi
 80095a2:	f043 0320 	orrmi.w	r3, r3, #32
 80095a6:	6023      	strmi	r3, [r4, #0]
 80095a8:	b91e      	cbnz	r6, 80095b2 <_printf_i+0x196>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	f023 0320 	bic.w	r3, r3, #32
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	2310      	movs	r3, #16
 80095b4:	e7b0      	b.n	8009518 <_printf_i+0xfc>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	f043 0320 	orr.w	r3, r3, #32
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	2378      	movs	r3, #120	; 0x78
 80095c0:	4828      	ldr	r0, [pc, #160]	; (8009664 <_printf_i+0x248>)
 80095c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095c6:	e7e3      	b.n	8009590 <_printf_i+0x174>
 80095c8:	0659      	lsls	r1, r3, #25
 80095ca:	bf48      	it	mi
 80095cc:	b2b6      	uxthmi	r6, r6
 80095ce:	e7e6      	b.n	800959e <_printf_i+0x182>
 80095d0:	4615      	mov	r5, r2
 80095d2:	e7bb      	b.n	800954c <_printf_i+0x130>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	6826      	ldr	r6, [r4, #0]
 80095d8:	6961      	ldr	r1, [r4, #20]
 80095da:	1d18      	adds	r0, r3, #4
 80095dc:	6028      	str	r0, [r5, #0]
 80095de:	0635      	lsls	r5, r6, #24
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	d501      	bpl.n	80095e8 <_printf_i+0x1cc>
 80095e4:	6019      	str	r1, [r3, #0]
 80095e6:	e002      	b.n	80095ee <_printf_i+0x1d2>
 80095e8:	0670      	lsls	r0, r6, #25
 80095ea:	d5fb      	bpl.n	80095e4 <_printf_i+0x1c8>
 80095ec:	8019      	strh	r1, [r3, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	4615      	mov	r5, r2
 80095f4:	e7ba      	b.n	800956c <_printf_i+0x150>
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	1d1a      	adds	r2, r3, #4
 80095fa:	602a      	str	r2, [r5, #0]
 80095fc:	681d      	ldr	r5, [r3, #0]
 80095fe:	6862      	ldr	r2, [r4, #4]
 8009600:	2100      	movs	r1, #0
 8009602:	4628      	mov	r0, r5
 8009604:	f7f6 fde4 	bl	80001d0 <memchr>
 8009608:	b108      	cbz	r0, 800960e <_printf_i+0x1f2>
 800960a:	1b40      	subs	r0, r0, r5
 800960c:	6060      	str	r0, [r4, #4]
 800960e:	6863      	ldr	r3, [r4, #4]
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	2300      	movs	r3, #0
 8009614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009618:	e7a8      	b.n	800956c <_printf_i+0x150>
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	462a      	mov	r2, r5
 800961e:	4649      	mov	r1, r9
 8009620:	4640      	mov	r0, r8
 8009622:	47d0      	blx	sl
 8009624:	3001      	adds	r0, #1
 8009626:	d0ab      	beq.n	8009580 <_printf_i+0x164>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	079b      	lsls	r3, r3, #30
 800962c:	d413      	bmi.n	8009656 <_printf_i+0x23a>
 800962e:	68e0      	ldr	r0, [r4, #12]
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	4298      	cmp	r0, r3
 8009634:	bfb8      	it	lt
 8009636:	4618      	movlt	r0, r3
 8009638:	e7a4      	b.n	8009584 <_printf_i+0x168>
 800963a:	2301      	movs	r3, #1
 800963c:	4632      	mov	r2, r6
 800963e:	4649      	mov	r1, r9
 8009640:	4640      	mov	r0, r8
 8009642:	47d0      	blx	sl
 8009644:	3001      	adds	r0, #1
 8009646:	d09b      	beq.n	8009580 <_printf_i+0x164>
 8009648:	3501      	adds	r5, #1
 800964a:	68e3      	ldr	r3, [r4, #12]
 800964c:	9903      	ldr	r1, [sp, #12]
 800964e:	1a5b      	subs	r3, r3, r1
 8009650:	42ab      	cmp	r3, r5
 8009652:	dcf2      	bgt.n	800963a <_printf_i+0x21e>
 8009654:	e7eb      	b.n	800962e <_printf_i+0x212>
 8009656:	2500      	movs	r5, #0
 8009658:	f104 0619 	add.w	r6, r4, #25
 800965c:	e7f5      	b.n	800964a <_printf_i+0x22e>
 800965e:	bf00      	nop
 8009660:	0800ab09 	.word	0x0800ab09
 8009664:	0800ab1a 	.word	0x0800ab1a

08009668 <_sbrk_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d06      	ldr	r5, [pc, #24]	; (8009684 <_sbrk_r+0x1c>)
 800966c:	2300      	movs	r3, #0
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	602b      	str	r3, [r5, #0]
 8009674:	f7fa f982 	bl	800397c <_sbrk>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_sbrk_r+0x1a>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b103      	cbz	r3, 8009682 <_sbrk_r+0x1a>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	200006dc 	.word	0x200006dc

08009688 <__sread>:
 8009688:	b510      	push	{r4, lr}
 800968a:	460c      	mov	r4, r1
 800968c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009690:	f000 f8a0 	bl	80097d4 <_read_r>
 8009694:	2800      	cmp	r0, #0
 8009696:	bfab      	itete	ge
 8009698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800969a:	89a3      	ldrhlt	r3, [r4, #12]
 800969c:	181b      	addge	r3, r3, r0
 800969e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096a2:	bfac      	ite	ge
 80096a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80096a6:	81a3      	strhlt	r3, [r4, #12]
 80096a8:	bd10      	pop	{r4, pc}

080096aa <__swrite>:
 80096aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ae:	461f      	mov	r7, r3
 80096b0:	898b      	ldrh	r3, [r1, #12]
 80096b2:	05db      	lsls	r3, r3, #23
 80096b4:	4605      	mov	r5, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	4616      	mov	r6, r2
 80096ba:	d505      	bpl.n	80096c8 <__swrite+0x1e>
 80096bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c0:	2302      	movs	r3, #2
 80096c2:	2200      	movs	r2, #0
 80096c4:	f000 f868 	bl	8009798 <_lseek_r>
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	4632      	mov	r2, r6
 80096d6:	463b      	mov	r3, r7
 80096d8:	4628      	mov	r0, r5
 80096da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096de:	f000 b817 	b.w	8009710 <_write_r>

080096e2 <__sseek>:
 80096e2:	b510      	push	{r4, lr}
 80096e4:	460c      	mov	r4, r1
 80096e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ea:	f000 f855 	bl	8009798 <_lseek_r>
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	bf15      	itete	ne
 80096f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80096f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096fe:	81a3      	strheq	r3, [r4, #12]
 8009700:	bf18      	it	ne
 8009702:	81a3      	strhne	r3, [r4, #12]
 8009704:	bd10      	pop	{r4, pc}

08009706 <__sclose>:
 8009706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800970a:	f000 b813 	b.w	8009734 <_close_r>
	...

08009710 <_write_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d07      	ldr	r5, [pc, #28]	; (8009730 <_write_r+0x20>)
 8009714:	4604      	mov	r4, r0
 8009716:	4608      	mov	r0, r1
 8009718:	4611      	mov	r1, r2
 800971a:	2200      	movs	r2, #0
 800971c:	602a      	str	r2, [r5, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f7fa f8db 	bl	80038da <_write>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_write_r+0x1e>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_write_r+0x1e>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	200006dc 	.word	0x200006dc

08009734 <_close_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d06      	ldr	r5, [pc, #24]	; (8009750 <_close_r+0x1c>)
 8009738:	2300      	movs	r3, #0
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	602b      	str	r3, [r5, #0]
 8009740:	f7fa f8e7 	bl	8003912 <_close>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d102      	bne.n	800974e <_close_r+0x1a>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	b103      	cbz	r3, 800974e <_close_r+0x1a>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	200006dc 	.word	0x200006dc

08009754 <_fstat_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_fstat_r+0x20>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	f7fa f8e2 	bl	800392a <_fstat>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d102      	bne.n	8009770 <_fstat_r+0x1c>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b103      	cbz	r3, 8009770 <_fstat_r+0x1c>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd38      	pop	{r3, r4, r5, pc}
 8009772:	bf00      	nop
 8009774:	200006dc 	.word	0x200006dc

08009778 <_isatty_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_isatty_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7fa f8e1 	bl	800394a <_isatty>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_isatty_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_isatty_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	200006dc 	.word	0x200006dc

08009798 <_lseek_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d07      	ldr	r5, [pc, #28]	; (80097b8 <_lseek_r+0x20>)
 800979c:	4604      	mov	r4, r0
 800979e:	4608      	mov	r0, r1
 80097a0:	4611      	mov	r1, r2
 80097a2:	2200      	movs	r2, #0
 80097a4:	602a      	str	r2, [r5, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	f7fa f8da 	bl	8003960 <_lseek>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_lseek_r+0x1e>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_lseek_r+0x1e>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	200006dc 	.word	0x200006dc

080097bc <__malloc_lock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_lock+0x8>)
 80097be:	f7ff bb1d 	b.w	8008dfc <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	200006d0 	.word	0x200006d0

080097c8 <__malloc_unlock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_unlock+0x8>)
 80097ca:	f7ff bb18 	b.w	8008dfe <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	200006d0 	.word	0x200006d0

080097d4 <_read_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	; (80097f4 <_read_r+0x20>)
 80097d8:	4604      	mov	r4, r0
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7fa f85c 	bl	80038a0 <_read>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_read_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_read_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	200006dc 	.word	0x200006dc

080097f8 <cosf>:
 80097f8:	ee10 3a10 	vmov	r3, s0
 80097fc:	b507      	push	{r0, r1, r2, lr}
 80097fe:	4a1e      	ldr	r2, [pc, #120]	; (8009878 <cosf+0x80>)
 8009800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009804:	4293      	cmp	r3, r2
 8009806:	dc06      	bgt.n	8009816 <cosf+0x1e>
 8009808:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800987c <cosf+0x84>
 800980c:	b003      	add	sp, #12
 800980e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009812:	f000 ba83 	b.w	8009d1c <__kernel_cosf>
 8009816:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800981a:	db04      	blt.n	8009826 <cosf+0x2e>
 800981c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009820:	b003      	add	sp, #12
 8009822:	f85d fb04 	ldr.w	pc, [sp], #4
 8009826:	4668      	mov	r0, sp
 8009828:	f000 f93c 	bl	8009aa4 <__ieee754_rem_pio2f>
 800982c:	f000 0003 	and.w	r0, r0, #3
 8009830:	2801      	cmp	r0, #1
 8009832:	d009      	beq.n	8009848 <cosf+0x50>
 8009834:	2802      	cmp	r0, #2
 8009836:	d010      	beq.n	800985a <cosf+0x62>
 8009838:	b9b0      	cbnz	r0, 8009868 <cosf+0x70>
 800983a:	eddd 0a01 	vldr	s1, [sp, #4]
 800983e:	ed9d 0a00 	vldr	s0, [sp]
 8009842:	f000 fa6b 	bl	8009d1c <__kernel_cosf>
 8009846:	e7eb      	b.n	8009820 <cosf+0x28>
 8009848:	eddd 0a01 	vldr	s1, [sp, #4]
 800984c:	ed9d 0a00 	vldr	s0, [sp]
 8009850:	f000 fd3a 	bl	800a2c8 <__kernel_sinf>
 8009854:	eeb1 0a40 	vneg.f32	s0, s0
 8009858:	e7e2      	b.n	8009820 <cosf+0x28>
 800985a:	eddd 0a01 	vldr	s1, [sp, #4]
 800985e:	ed9d 0a00 	vldr	s0, [sp]
 8009862:	f000 fa5b 	bl	8009d1c <__kernel_cosf>
 8009866:	e7f5      	b.n	8009854 <cosf+0x5c>
 8009868:	eddd 0a01 	vldr	s1, [sp, #4]
 800986c:	ed9d 0a00 	vldr	s0, [sp]
 8009870:	2001      	movs	r0, #1
 8009872:	f000 fd29 	bl	800a2c8 <__kernel_sinf>
 8009876:	e7d3      	b.n	8009820 <cosf+0x28>
 8009878:	3f490fd8 	.word	0x3f490fd8
 800987c:	00000000 	.word	0x00000000

08009880 <sinf>:
 8009880:	ee10 3a10 	vmov	r3, s0
 8009884:	b507      	push	{r0, r1, r2, lr}
 8009886:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <sinf+0x84>)
 8009888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800988c:	4293      	cmp	r3, r2
 800988e:	dc07      	bgt.n	80098a0 <sinf+0x20>
 8009890:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009908 <sinf+0x88>
 8009894:	2000      	movs	r0, #0
 8009896:	b003      	add	sp, #12
 8009898:	f85d eb04 	ldr.w	lr, [sp], #4
 800989c:	f000 bd14 	b.w	800a2c8 <__kernel_sinf>
 80098a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098a4:	db04      	blt.n	80098b0 <sinf+0x30>
 80098a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80098aa:	b003      	add	sp, #12
 80098ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80098b0:	4668      	mov	r0, sp
 80098b2:	f000 f8f7 	bl	8009aa4 <__ieee754_rem_pio2f>
 80098b6:	f000 0003 	and.w	r0, r0, #3
 80098ba:	2801      	cmp	r0, #1
 80098bc:	d00a      	beq.n	80098d4 <sinf+0x54>
 80098be:	2802      	cmp	r0, #2
 80098c0:	d00f      	beq.n	80098e2 <sinf+0x62>
 80098c2:	b9c0      	cbnz	r0, 80098f6 <sinf+0x76>
 80098c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80098c8:	ed9d 0a00 	vldr	s0, [sp]
 80098cc:	2001      	movs	r0, #1
 80098ce:	f000 fcfb 	bl	800a2c8 <__kernel_sinf>
 80098d2:	e7ea      	b.n	80098aa <sinf+0x2a>
 80098d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80098d8:	ed9d 0a00 	vldr	s0, [sp]
 80098dc:	f000 fa1e 	bl	8009d1c <__kernel_cosf>
 80098e0:	e7e3      	b.n	80098aa <sinf+0x2a>
 80098e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80098e6:	ed9d 0a00 	vldr	s0, [sp]
 80098ea:	2001      	movs	r0, #1
 80098ec:	f000 fcec 	bl	800a2c8 <__kernel_sinf>
 80098f0:	eeb1 0a40 	vneg.f32	s0, s0
 80098f4:	e7d9      	b.n	80098aa <sinf+0x2a>
 80098f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80098fa:	ed9d 0a00 	vldr	s0, [sp]
 80098fe:	f000 fa0d 	bl	8009d1c <__kernel_cosf>
 8009902:	e7f5      	b.n	80098f0 <sinf+0x70>
 8009904:	3f490fd8 	.word	0x3f490fd8
 8009908:	00000000 	.word	0x00000000

0800990c <atan2>:
 800990c:	f000 b800 	b.w	8009910 <__ieee754_atan2>

08009910 <__ieee754_atan2>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	ec57 6b11 	vmov	r6, r7, d1
 8009918:	4273      	negs	r3, r6
 800991a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009aa0 <__ieee754_atan2+0x190>
 800991e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009922:	4333      	orrs	r3, r6
 8009924:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009928:	4573      	cmp	r3, lr
 800992a:	ec51 0b10 	vmov	r0, r1, d0
 800992e:	ee11 8a10 	vmov	r8, s2
 8009932:	d80a      	bhi.n	800994a <__ieee754_atan2+0x3a>
 8009934:	4244      	negs	r4, r0
 8009936:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800993a:	4304      	orrs	r4, r0
 800993c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009940:	4574      	cmp	r4, lr
 8009942:	ee10 9a10 	vmov	r9, s0
 8009946:	468c      	mov	ip, r1
 8009948:	d907      	bls.n	800995a <__ieee754_atan2+0x4a>
 800994a:	4632      	mov	r2, r6
 800994c:	463b      	mov	r3, r7
 800994e:	f7f6 fc95 	bl	800027c <__adddf3>
 8009952:	ec41 0b10 	vmov	d0, r0, r1
 8009956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800995e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009962:	4334      	orrs	r4, r6
 8009964:	d103      	bne.n	800996e <__ieee754_atan2+0x5e>
 8009966:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996a:	f000 bcf5 	b.w	800a358 <atan>
 800996e:	17bc      	asrs	r4, r7, #30
 8009970:	f004 0402 	and.w	r4, r4, #2
 8009974:	ea53 0909 	orrs.w	r9, r3, r9
 8009978:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800997c:	d107      	bne.n	800998e <__ieee754_atan2+0x7e>
 800997e:	2c02      	cmp	r4, #2
 8009980:	d060      	beq.n	8009a44 <__ieee754_atan2+0x134>
 8009982:	2c03      	cmp	r4, #3
 8009984:	d1e5      	bne.n	8009952 <__ieee754_atan2+0x42>
 8009986:	a142      	add	r1, pc, #264	; (adr r1, 8009a90 <__ieee754_atan2+0x180>)
 8009988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800998c:	e7e1      	b.n	8009952 <__ieee754_atan2+0x42>
 800998e:	ea52 0808 	orrs.w	r8, r2, r8
 8009992:	d106      	bne.n	80099a2 <__ieee754_atan2+0x92>
 8009994:	f1bc 0f00 	cmp.w	ip, #0
 8009998:	da5f      	bge.n	8009a5a <__ieee754_atan2+0x14a>
 800999a:	a13f      	add	r1, pc, #252	; (adr r1, 8009a98 <__ieee754_atan2+0x188>)
 800999c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099a0:	e7d7      	b.n	8009952 <__ieee754_atan2+0x42>
 80099a2:	4572      	cmp	r2, lr
 80099a4:	d10f      	bne.n	80099c6 <__ieee754_atan2+0xb6>
 80099a6:	4293      	cmp	r3, r2
 80099a8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80099ac:	d107      	bne.n	80099be <__ieee754_atan2+0xae>
 80099ae:	2c02      	cmp	r4, #2
 80099b0:	d84c      	bhi.n	8009a4c <__ieee754_atan2+0x13c>
 80099b2:	4b35      	ldr	r3, [pc, #212]	; (8009a88 <__ieee754_atan2+0x178>)
 80099b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80099b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80099bc:	e7c9      	b.n	8009952 <__ieee754_atan2+0x42>
 80099be:	2c02      	cmp	r4, #2
 80099c0:	d848      	bhi.n	8009a54 <__ieee754_atan2+0x144>
 80099c2:	4b32      	ldr	r3, [pc, #200]	; (8009a8c <__ieee754_atan2+0x17c>)
 80099c4:	e7f6      	b.n	80099b4 <__ieee754_atan2+0xa4>
 80099c6:	4573      	cmp	r3, lr
 80099c8:	d0e4      	beq.n	8009994 <__ieee754_atan2+0x84>
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80099d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099d4:	da1e      	bge.n	8009a14 <__ieee754_atan2+0x104>
 80099d6:	2f00      	cmp	r7, #0
 80099d8:	da01      	bge.n	80099de <__ieee754_atan2+0xce>
 80099da:	323c      	adds	r2, #60	; 0x3c
 80099dc:	db1e      	blt.n	8009a1c <__ieee754_atan2+0x10c>
 80099de:	4632      	mov	r2, r6
 80099e0:	463b      	mov	r3, r7
 80099e2:	f7f6 ff2b 	bl	800083c <__aeabi_ddiv>
 80099e6:	ec41 0b10 	vmov	d0, r0, r1
 80099ea:	f000 fe55 	bl	800a698 <fabs>
 80099ee:	f000 fcb3 	bl	800a358 <atan>
 80099f2:	ec51 0b10 	vmov	r0, r1, d0
 80099f6:	2c01      	cmp	r4, #1
 80099f8:	d013      	beq.n	8009a22 <__ieee754_atan2+0x112>
 80099fa:	2c02      	cmp	r4, #2
 80099fc:	d015      	beq.n	8009a2a <__ieee754_atan2+0x11a>
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d0a7      	beq.n	8009952 <__ieee754_atan2+0x42>
 8009a02:	a319      	add	r3, pc, #100	; (adr r3, 8009a68 <__ieee754_atan2+0x158>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 fc36 	bl	8000278 <__aeabi_dsub>
 8009a0c:	a318      	add	r3, pc, #96	; (adr r3, 8009a70 <__ieee754_atan2+0x160>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	e014      	b.n	8009a3e <__ieee754_atan2+0x12e>
 8009a14:	a118      	add	r1, pc, #96	; (adr r1, 8009a78 <__ieee754_atan2+0x168>)
 8009a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a1a:	e7ec      	b.n	80099f6 <__ieee754_atan2+0xe6>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	e7e9      	b.n	80099f6 <__ieee754_atan2+0xe6>
 8009a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a26:	4619      	mov	r1, r3
 8009a28:	e793      	b.n	8009952 <__ieee754_atan2+0x42>
 8009a2a:	a30f      	add	r3, pc, #60	; (adr r3, 8009a68 <__ieee754_atan2+0x158>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f7f6 fc22 	bl	8000278 <__aeabi_dsub>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	a10d      	add	r1, pc, #52	; (adr r1, 8009a70 <__ieee754_atan2+0x160>)
 8009a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a3e:	f7f6 fc1b 	bl	8000278 <__aeabi_dsub>
 8009a42:	e786      	b.n	8009952 <__ieee754_atan2+0x42>
 8009a44:	a10a      	add	r1, pc, #40	; (adr r1, 8009a70 <__ieee754_atan2+0x160>)
 8009a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4a:	e782      	b.n	8009952 <__ieee754_atan2+0x42>
 8009a4c:	a10c      	add	r1, pc, #48	; (adr r1, 8009a80 <__ieee754_atan2+0x170>)
 8009a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a52:	e77e      	b.n	8009952 <__ieee754_atan2+0x42>
 8009a54:	2000      	movs	r0, #0
 8009a56:	2100      	movs	r1, #0
 8009a58:	e77b      	b.n	8009952 <__ieee754_atan2+0x42>
 8009a5a:	a107      	add	r1, pc, #28	; (adr r1, 8009a78 <__ieee754_atan2+0x168>)
 8009a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a60:	e777      	b.n	8009952 <__ieee754_atan2+0x42>
 8009a62:	bf00      	nop
 8009a64:	f3af 8000 	nop.w
 8009a68:	33145c07 	.word	0x33145c07
 8009a6c:	3ca1a626 	.word	0x3ca1a626
 8009a70:	54442d18 	.word	0x54442d18
 8009a74:	400921fb 	.word	0x400921fb
 8009a78:	54442d18 	.word	0x54442d18
 8009a7c:	3ff921fb 	.word	0x3ff921fb
 8009a80:	54442d18 	.word	0x54442d18
 8009a84:	3fe921fb 	.word	0x3fe921fb
 8009a88:	0800ab30 	.word	0x0800ab30
 8009a8c:	0800ab48 	.word	0x0800ab48
 8009a90:	54442d18 	.word	0x54442d18
 8009a94:	c00921fb 	.word	0xc00921fb
 8009a98:	54442d18 	.word	0x54442d18
 8009a9c:	bff921fb 	.word	0xbff921fb
 8009aa0:	7ff00000 	.word	0x7ff00000

08009aa4 <__ieee754_rem_pio2f>:
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	ee10 6a10 	vmov	r6, s0
 8009aaa:	4b8e      	ldr	r3, [pc, #568]	; (8009ce4 <__ieee754_rem_pio2f+0x240>)
 8009aac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	eef0 7a40 	vmov.f32	s15, s0
 8009ab8:	4604      	mov	r4, r0
 8009aba:	dc05      	bgt.n	8009ac8 <__ieee754_rem_pio2f+0x24>
 8009abc:	2300      	movs	r3, #0
 8009abe:	ed80 0a00 	vstr	s0, [r0]
 8009ac2:	6043      	str	r3, [r0, #4]
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e01a      	b.n	8009afe <__ieee754_rem_pio2f+0x5a>
 8009ac8:	4b87      	ldr	r3, [pc, #540]	; (8009ce8 <__ieee754_rem_pio2f+0x244>)
 8009aca:	429d      	cmp	r5, r3
 8009acc:	dc46      	bgt.n	8009b5c <__ieee754_rem_pio2f+0xb8>
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009cec <__ieee754_rem_pio2f+0x248>
 8009ad4:	4b86      	ldr	r3, [pc, #536]	; (8009cf0 <__ieee754_rem_pio2f+0x24c>)
 8009ad6:	f025 050f 	bic.w	r5, r5, #15
 8009ada:	dd1f      	ble.n	8009b1c <__ieee754_rem_pio2f+0x78>
 8009adc:	429d      	cmp	r5, r3
 8009ade:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009ae2:	d00e      	beq.n	8009b02 <__ieee754_rem_pio2f+0x5e>
 8009ae4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009cf4 <__ieee754_rem_pio2f+0x250>
 8009ae8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009aec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009af0:	ed80 0a00 	vstr	s0, [r0]
 8009af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009af8:	2001      	movs	r0, #1
 8009afa:	edc4 7a01 	vstr	s15, [r4, #4]
 8009afe:	b007      	add	sp, #28
 8009b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b02:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009cf8 <__ieee754_rem_pio2f+0x254>
 8009b06:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009cfc <__ieee754_rem_pio2f+0x258>
 8009b0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009b0e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009b12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b16:	edc0 6a00 	vstr	s13, [r0]
 8009b1a:	e7eb      	b.n	8009af4 <__ieee754_rem_pio2f+0x50>
 8009b1c:	429d      	cmp	r5, r3
 8009b1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009b22:	d00e      	beq.n	8009b42 <__ieee754_rem_pio2f+0x9e>
 8009b24:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009cf4 <__ieee754_rem_pio2f+0x250>
 8009b28:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009b2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009b30:	ed80 0a00 	vstr	s0, [r0]
 8009b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b3c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009b40:	e7dd      	b.n	8009afe <__ieee754_rem_pio2f+0x5a>
 8009b42:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009cf8 <__ieee754_rem_pio2f+0x254>
 8009b46:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009cfc <__ieee754_rem_pio2f+0x258>
 8009b4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009b4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009b52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b56:	edc0 6a00 	vstr	s13, [r0]
 8009b5a:	e7eb      	b.n	8009b34 <__ieee754_rem_pio2f+0x90>
 8009b5c:	4b68      	ldr	r3, [pc, #416]	; (8009d00 <__ieee754_rem_pio2f+0x25c>)
 8009b5e:	429d      	cmp	r5, r3
 8009b60:	dc72      	bgt.n	8009c48 <__ieee754_rem_pio2f+0x1a4>
 8009b62:	f000 fda2 	bl	800a6aa <fabsf>
 8009b66:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009d04 <__ieee754_rem_pio2f+0x260>
 8009b6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009b6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b7a:	ee17 0a90 	vmov	r0, s15
 8009b7e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009cec <__ieee754_rem_pio2f+0x248>
 8009b82:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009b86:	281f      	cmp	r0, #31
 8009b88:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009cf4 <__ieee754_rem_pio2f+0x250>
 8009b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b90:	eeb1 6a47 	vneg.f32	s12, s14
 8009b94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009b98:	ee16 2a90 	vmov	r2, s13
 8009b9c:	dc1c      	bgt.n	8009bd8 <__ieee754_rem_pio2f+0x134>
 8009b9e:	495a      	ldr	r1, [pc, #360]	; (8009d08 <__ieee754_rem_pio2f+0x264>)
 8009ba0:	1e47      	subs	r7, r0, #1
 8009ba2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8009ba6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009baa:	428b      	cmp	r3, r1
 8009bac:	d014      	beq.n	8009bd8 <__ieee754_rem_pio2f+0x134>
 8009bae:	6022      	str	r2, [r4, #0]
 8009bb0:	ed94 7a00 	vldr	s14, [r4]
 8009bb4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009bbe:	ed84 0a01 	vstr	s0, [r4, #4]
 8009bc2:	da9c      	bge.n	8009afe <__ieee754_rem_pio2f+0x5a>
 8009bc4:	eeb1 7a47 	vneg.f32	s14, s14
 8009bc8:	eeb1 0a40 	vneg.f32	s0, s0
 8009bcc:	ed84 7a00 	vstr	s14, [r4]
 8009bd0:	ed84 0a01 	vstr	s0, [r4, #4]
 8009bd4:	4240      	negs	r0, r0
 8009bd6:	e792      	b.n	8009afe <__ieee754_rem_pio2f+0x5a>
 8009bd8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009bdc:	15eb      	asrs	r3, r5, #23
 8009bde:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009be2:	2d08      	cmp	r5, #8
 8009be4:	dde3      	ble.n	8009bae <__ieee754_rem_pio2f+0x10a>
 8009be6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009cf8 <__ieee754_rem_pio2f+0x254>
 8009bea:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009cfc <__ieee754_rem_pio2f+0x258>
 8009bee:	eef0 6a40 	vmov.f32	s13, s0
 8009bf2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009bf6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009bfa:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009bfe:	eef0 7a40 	vmov.f32	s15, s0
 8009c02:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009c06:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009c0a:	ee15 2a90 	vmov	r2, s11
 8009c0e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009c12:	1a5b      	subs	r3, r3, r1
 8009c14:	2b19      	cmp	r3, #25
 8009c16:	dc04      	bgt.n	8009c22 <__ieee754_rem_pio2f+0x17e>
 8009c18:	edc4 5a00 	vstr	s11, [r4]
 8009c1c:	eeb0 0a66 	vmov.f32	s0, s13
 8009c20:	e7c6      	b.n	8009bb0 <__ieee754_rem_pio2f+0x10c>
 8009c22:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009d0c <__ieee754_rem_pio2f+0x268>
 8009c26:	eeb0 0a66 	vmov.f32	s0, s13
 8009c2a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009c2e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009c32:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009d10 <__ieee754_rem_pio2f+0x26c>
 8009c36:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009c3a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009c3e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009c42:	ed84 7a00 	vstr	s14, [r4]
 8009c46:	e7b3      	b.n	8009bb0 <__ieee754_rem_pio2f+0x10c>
 8009c48:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009c4c:	db06      	blt.n	8009c5c <__ieee754_rem_pio2f+0x1b8>
 8009c4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009c52:	edc0 7a01 	vstr	s15, [r0, #4]
 8009c56:	edc0 7a00 	vstr	s15, [r0]
 8009c5a:	e733      	b.n	8009ac4 <__ieee754_rem_pio2f+0x20>
 8009c5c:	15ea      	asrs	r2, r5, #23
 8009c5e:	3a86      	subs	r2, #134	; 0x86
 8009c60:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009c6c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009d14 <__ieee754_rem_pio2f+0x270>
 8009c70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c78:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009c7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009c80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c8c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009c90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009c94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9c:	edcd 7a05 	vstr	s15, [sp, #20]
 8009ca0:	d11e      	bne.n	8009ce0 <__ieee754_rem_pio2f+0x23c>
 8009ca2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009caa:	bf14      	ite	ne
 8009cac:	2302      	movne	r3, #2
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	4919      	ldr	r1, [pc, #100]	; (8009d18 <__ieee754_rem_pio2f+0x274>)
 8009cb2:	9101      	str	r1, [sp, #4]
 8009cb4:	2102      	movs	r1, #2
 8009cb6:	9100      	str	r1, [sp, #0]
 8009cb8:	a803      	add	r0, sp, #12
 8009cba:	4621      	mov	r1, r4
 8009cbc:	f000 f88e 	bl	8009ddc <__kernel_rem_pio2f>
 8009cc0:	2e00      	cmp	r6, #0
 8009cc2:	f6bf af1c 	bge.w	8009afe <__ieee754_rem_pio2f+0x5a>
 8009cc6:	edd4 7a00 	vldr	s15, [r4]
 8009cca:	eef1 7a67 	vneg.f32	s15, s15
 8009cce:	edc4 7a00 	vstr	s15, [r4]
 8009cd2:	edd4 7a01 	vldr	s15, [r4, #4]
 8009cd6:	eef1 7a67 	vneg.f32	s15, s15
 8009cda:	edc4 7a01 	vstr	s15, [r4, #4]
 8009cde:	e779      	b.n	8009bd4 <__ieee754_rem_pio2f+0x130>
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e7e5      	b.n	8009cb0 <__ieee754_rem_pio2f+0x20c>
 8009ce4:	3f490fd8 	.word	0x3f490fd8
 8009ce8:	4016cbe3 	.word	0x4016cbe3
 8009cec:	3fc90f80 	.word	0x3fc90f80
 8009cf0:	3fc90fd0 	.word	0x3fc90fd0
 8009cf4:	37354443 	.word	0x37354443
 8009cf8:	37354400 	.word	0x37354400
 8009cfc:	2e85a308 	.word	0x2e85a308
 8009d00:	43490f80 	.word	0x43490f80
 8009d04:	3f22f984 	.word	0x3f22f984
 8009d08:	0800ab60 	.word	0x0800ab60
 8009d0c:	2e85a300 	.word	0x2e85a300
 8009d10:	248d3132 	.word	0x248d3132
 8009d14:	43800000 	.word	0x43800000
 8009d18:	0800abe0 	.word	0x0800abe0

08009d1c <__kernel_cosf>:
 8009d1c:	ee10 3a10 	vmov	r3, s0
 8009d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009d28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009d2c:	da05      	bge.n	8009d3a <__kernel_cosf+0x1e>
 8009d2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009d32:	ee17 2a90 	vmov	r2, s15
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	d03d      	beq.n	8009db6 <__kernel_cosf+0x9a>
 8009d3a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8009d3e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009dbc <__kernel_cosf+0xa0>
 8009d42:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009dc0 <__kernel_cosf+0xa4>
 8009d46:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009dc4 <__kernel_cosf+0xa8>
 8009d4a:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <__kernel_cosf+0xac>)
 8009d4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009d50:	4293      	cmp	r3, r2
 8009d52:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009dcc <__kernel_cosf+0xb0>
 8009d56:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009d5a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009dd0 <__kernel_cosf+0xb4>
 8009d5e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009d62:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009dd4 <__kernel_cosf+0xb8>
 8009d66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009d6a:	eeb0 7a66 	vmov.f32	s14, s13
 8009d6e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009d72:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009d76:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009d7a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009d7e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009d82:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d86:	dc04      	bgt.n	8009d92 <__kernel_cosf+0x76>
 8009d88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009d8c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009d90:	4770      	bx	lr
 8009d92:	4a11      	ldr	r2, [pc, #68]	; (8009dd8 <__kernel_cosf+0xbc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	bfda      	itte	le
 8009d98:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009d9c:	ee06 3a90 	vmovle	s13, r3
 8009da0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009da4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009da8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009db0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009db4:	4770      	bx	lr
 8009db6:	eeb0 0a46 	vmov.f32	s0, s12
 8009dba:	4770      	bx	lr
 8009dbc:	ad47d74e 	.word	0xad47d74e
 8009dc0:	310f74f6 	.word	0x310f74f6
 8009dc4:	3d2aaaab 	.word	0x3d2aaaab
 8009dc8:	3e999999 	.word	0x3e999999
 8009dcc:	b493f27c 	.word	0xb493f27c
 8009dd0:	37d00d01 	.word	0x37d00d01
 8009dd4:	bab60b61 	.word	0xbab60b61
 8009dd8:	3f480000 	.word	0x3f480000

08009ddc <__kernel_rem_pio2f>:
 8009ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de0:	ed2d 8b04 	vpush	{d8-d9}
 8009de4:	b0d9      	sub	sp, #356	; 0x164
 8009de6:	4688      	mov	r8, r1
 8009de8:	9002      	str	r0, [sp, #8]
 8009dea:	49bb      	ldr	r1, [pc, #748]	; (800a0d8 <__kernel_rem_pio2f+0x2fc>)
 8009dec:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009df4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009df8:	1e59      	subs	r1, r3, #1
 8009dfa:	1d13      	adds	r3, r2, #4
 8009dfc:	db27      	blt.n	8009e4e <__kernel_rem_pio2f+0x72>
 8009dfe:	f1b2 0b03 	subs.w	fp, r2, #3
 8009e02:	bf48      	it	mi
 8009e04:	f102 0b04 	addmi.w	fp, r2, #4
 8009e08:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009e0c:	1c45      	adds	r5, r0, #1
 8009e0e:	00ec      	lsls	r4, r5, #3
 8009e10:	1a47      	subs	r7, r0, r1
 8009e12:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 8009e16:	9403      	str	r4, [sp, #12]
 8009e18:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009e1c:	eb0a 0c01 	add.w	ip, sl, r1
 8009e20:	ae1c      	add	r6, sp, #112	; 0x70
 8009e22:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009e26:	2400      	movs	r4, #0
 8009e28:	4564      	cmp	r4, ip
 8009e2a:	dd12      	ble.n	8009e52 <__kernel_rem_pio2f+0x76>
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	ac1c      	add	r4, sp, #112	; 0x70
 8009e30:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009e34:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009e38:	f04f 0c00 	mov.w	ip, #0
 8009e3c:	45d4      	cmp	ip, sl
 8009e3e:	dc27      	bgt.n	8009e90 <__kernel_rem_pio2f+0xb4>
 8009e40:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009e44:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 8009e48:	4627      	mov	r7, r4
 8009e4a:	2600      	movs	r6, #0
 8009e4c:	e016      	b.n	8009e7c <__kernel_rem_pio2f+0xa0>
 8009e4e:	2000      	movs	r0, #0
 8009e50:	e7dc      	b.n	8009e0c <__kernel_rem_pio2f+0x30>
 8009e52:	42e7      	cmn	r7, r4
 8009e54:	bf5d      	ittte	pl
 8009e56:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8009e5a:	ee07 3a90 	vmovpl	s15, r3
 8009e5e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009e62:	eef0 7a47 	vmovmi.f32	s15, s14
 8009e66:	ece6 7a01 	vstmia	r6!, {s15}
 8009e6a:	3401      	adds	r4, #1
 8009e6c:	e7dc      	b.n	8009e28 <__kernel_rem_pio2f+0x4c>
 8009e6e:	ecf9 6a01 	vldmia	r9!, {s13}
 8009e72:	ed97 7a00 	vldr	s14, [r7]
 8009e76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009e7a:	3601      	adds	r6, #1
 8009e7c:	428e      	cmp	r6, r1
 8009e7e:	f1a7 0704 	sub.w	r7, r7, #4
 8009e82:	ddf4      	ble.n	8009e6e <__kernel_rem_pio2f+0x92>
 8009e84:	eceb 7a01 	vstmia	fp!, {s15}
 8009e88:	f10c 0c01 	add.w	ip, ip, #1
 8009e8c:	3404      	adds	r4, #4
 8009e8e:	e7d5      	b.n	8009e3c <__kernel_rem_pio2f+0x60>
 8009e90:	ab08      	add	r3, sp, #32
 8009e92:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009e96:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a0e4 <__kernel_rem_pio2f+0x308>
 8009e9a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a0e0 <__kernel_rem_pio2f+0x304>
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009ea4:	4656      	mov	r6, sl
 8009ea6:	00b3      	lsls	r3, r6, #2
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	ab58      	add	r3, sp, #352	; 0x160
 8009eac:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009eb0:	ac08      	add	r4, sp, #32
 8009eb2:	ab44      	add	r3, sp, #272	; 0x110
 8009eb4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009eb8:	46a4      	mov	ip, r4
 8009eba:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009ebe:	4637      	mov	r7, r6
 8009ec0:	2f00      	cmp	r7, #0
 8009ec2:	f1a0 0004 	sub.w	r0, r0, #4
 8009ec6:	dc4f      	bgt.n	8009f68 <__kernel_rem_pio2f+0x18c>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009ece:	f000 fc35 	bl	800a73c <scalbnf>
 8009ed2:	eeb0 8a40 	vmov.f32	s16, s0
 8009ed6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009eda:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009ede:	f000 fbeb 	bl	800a6b8 <floorf>
 8009ee2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009ee6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009ef0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009ef4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009ef8:	ee17 9a90 	vmov	r9, s15
 8009efc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009f00:	dd44      	ble.n	8009f8c <__kernel_rem_pio2f+0x1b0>
 8009f02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8009f06:	ab08      	add	r3, sp, #32
 8009f08:	f1c5 0e08 	rsb	lr, r5, #8
 8009f0c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009f10:	fa47 f00e 	asr.w	r0, r7, lr
 8009f14:	4481      	add	r9, r0
 8009f16:	fa00 f00e 	lsl.w	r0, r0, lr
 8009f1a:	1a3f      	subs	r7, r7, r0
 8009f1c:	f1c5 0007 	rsb	r0, r5, #7
 8009f20:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009f24:	4107      	asrs	r7, r0
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	dd3f      	ble.n	8009faa <__kernel_rem_pio2f+0x1ce>
 8009f2a:	f04f 0e00 	mov.w	lr, #0
 8009f2e:	f109 0901 	add.w	r9, r9, #1
 8009f32:	4673      	mov	r3, lr
 8009f34:	4576      	cmp	r6, lr
 8009f36:	dc6b      	bgt.n	800a010 <__kernel_rem_pio2f+0x234>
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	dd04      	ble.n	8009f46 <__kernel_rem_pio2f+0x16a>
 8009f3c:	2d01      	cmp	r5, #1
 8009f3e:	d078      	beq.n	800a032 <__kernel_rem_pio2f+0x256>
 8009f40:	2d02      	cmp	r5, #2
 8009f42:	f000 8081 	beq.w	800a048 <__kernel_rem_pio2f+0x26c>
 8009f46:	2f02      	cmp	r7, #2
 8009f48:	d12f      	bne.n	8009faa <__kernel_rem_pio2f+0x1ce>
 8009f4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009f4e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009f52:	b353      	cbz	r3, 8009faa <__kernel_rem_pio2f+0x1ce>
 8009f54:	4628      	mov	r0, r5
 8009f56:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009f5a:	f000 fbef 	bl	800a73c <scalbnf>
 8009f5e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009f62:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009f66:	e020      	b.n	8009faa <__kernel_rem_pio2f+0x1ce>
 8009f68:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009f6c:	3f01      	subs	r7, #1
 8009f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f76:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009f7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009f7e:	ecac 0a01 	vstmia	ip!, {s0}
 8009f82:	ed90 0a00 	vldr	s0, [r0]
 8009f86:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009f8a:	e799      	b.n	8009ec0 <__kernel_rem_pio2f+0xe4>
 8009f8c:	d105      	bne.n	8009f9a <__kernel_rem_pio2f+0x1be>
 8009f8e:	1e70      	subs	r0, r6, #1
 8009f90:	ab08      	add	r3, sp, #32
 8009f92:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009f96:	11ff      	asrs	r7, r7, #7
 8009f98:	e7c5      	b.n	8009f26 <__kernel_rem_pio2f+0x14a>
 8009f9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009f9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa6:	da31      	bge.n	800a00c <__kernel_rem_pio2f+0x230>
 8009fa8:	2700      	movs	r7, #0
 8009faa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb2:	f040 809b 	bne.w	800a0ec <__kernel_rem_pio2f+0x310>
 8009fb6:	1e74      	subs	r4, r6, #1
 8009fb8:	46a4      	mov	ip, r4
 8009fba:	2000      	movs	r0, #0
 8009fbc:	45d4      	cmp	ip, sl
 8009fbe:	da4a      	bge.n	800a056 <__kernel_rem_pio2f+0x27a>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d07a      	beq.n	800a0ba <__kernel_rem_pio2f+0x2de>
 8009fc4:	ab08      	add	r3, sp, #32
 8009fc6:	3d08      	subs	r5, #8
 8009fc8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8081 	beq.w	800a0d4 <__kernel_rem_pio2f+0x2f8>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009fd8:	00a5      	lsls	r5, r4, #2
 8009fda:	f000 fbaf 	bl	800a73c <scalbnf>
 8009fde:	aa44      	add	r2, sp, #272	; 0x110
 8009fe0:	1d2b      	adds	r3, r5, #4
 8009fe2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a0e4 <__kernel_rem_pio2f+0x308>
 8009fe6:	18d1      	adds	r1, r2, r3
 8009fe8:	4622      	mov	r2, r4
 8009fea:	2a00      	cmp	r2, #0
 8009fec:	f280 80ae 	bge.w	800a14c <__kernel_rem_pio2f+0x370>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	f2c0 80cc 	blt.w	800a190 <__kernel_rem_pio2f+0x3b4>
 8009ff8:	a944      	add	r1, sp, #272	; 0x110
 8009ffa:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009ffe:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a0dc <__kernel_rem_pio2f+0x300>
 800a002:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 800a006:	2000      	movs	r0, #0
 800a008:	1aa1      	subs	r1, r4, r2
 800a00a:	e0b6      	b.n	800a17a <__kernel_rem_pio2f+0x39e>
 800a00c:	2702      	movs	r7, #2
 800a00e:	e78c      	b.n	8009f2a <__kernel_rem_pio2f+0x14e>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	b94b      	cbnz	r3, 800a028 <__kernel_rem_pio2f+0x24c>
 800a014:	b118      	cbz	r0, 800a01e <__kernel_rem_pio2f+0x242>
 800a016:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a01a:	6020      	str	r0, [r4, #0]
 800a01c:	2001      	movs	r0, #1
 800a01e:	f10e 0e01 	add.w	lr, lr, #1
 800a022:	3404      	adds	r4, #4
 800a024:	4603      	mov	r3, r0
 800a026:	e785      	b.n	8009f34 <__kernel_rem_pio2f+0x158>
 800a028:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a02c:	6020      	str	r0, [r4, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	e7f5      	b.n	800a01e <__kernel_rem_pio2f+0x242>
 800a032:	1e74      	subs	r4, r6, #1
 800a034:	a808      	add	r0, sp, #32
 800a036:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a03a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a03e:	f10d 0c20 	add.w	ip, sp, #32
 800a042:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a046:	e77e      	b.n	8009f46 <__kernel_rem_pio2f+0x16a>
 800a048:	1e74      	subs	r4, r6, #1
 800a04a:	a808      	add	r0, sp, #32
 800a04c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a050:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a054:	e7f3      	b.n	800a03e <__kernel_rem_pio2f+0x262>
 800a056:	ab08      	add	r3, sp, #32
 800a058:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a05c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a060:	4318      	orrs	r0, r3
 800a062:	e7ab      	b.n	8009fbc <__kernel_rem_pio2f+0x1e0>
 800a064:	f10c 0c01 	add.w	ip, ip, #1
 800a068:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	d0f9      	beq.n	800a064 <__kernel_rem_pio2f+0x288>
 800a070:	9b05      	ldr	r3, [sp, #20]
 800a072:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a076:	eb0d 0003 	add.w	r0, sp, r3
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	18f4      	adds	r4, r6, r3
 800a07e:	ab1c      	add	r3, sp, #112	; 0x70
 800a080:	1c77      	adds	r7, r6, #1
 800a082:	384c      	subs	r0, #76	; 0x4c
 800a084:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a088:	4466      	add	r6, ip
 800a08a:	42be      	cmp	r6, r7
 800a08c:	f6ff af0b 	blt.w	8009ea6 <__kernel_rem_pio2f+0xca>
 800a090:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a094:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a098:	ee07 3a90 	vmov	s15, r3
 800a09c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	ece4 7a01 	vstmia	r4!, {s15}
 800a0a8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 800a0ac:	46a1      	mov	r9, r4
 800a0ae:	458c      	cmp	ip, r1
 800a0b0:	dd07      	ble.n	800a0c2 <__kernel_rem_pio2f+0x2e6>
 800a0b2:	ece0 7a01 	vstmia	r0!, {s15}
 800a0b6:	3701      	adds	r7, #1
 800a0b8:	e7e7      	b.n	800a08a <__kernel_rem_pio2f+0x2ae>
 800a0ba:	9804      	ldr	r0, [sp, #16]
 800a0bc:	f04f 0c01 	mov.w	ip, #1
 800a0c0:	e7d2      	b.n	800a068 <__kernel_rem_pio2f+0x28c>
 800a0c2:	ecfe 6a01 	vldmia	lr!, {s13}
 800a0c6:	ed39 7a01 	vldmdb	r9!, {s14}
 800a0ca:	f10c 0c01 	add.w	ip, ip, #1
 800a0ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a0d2:	e7ec      	b.n	800a0ae <__kernel_rem_pio2f+0x2d2>
 800a0d4:	3c01      	subs	r4, #1
 800a0d6:	e775      	b.n	8009fc4 <__kernel_rem_pio2f+0x1e8>
 800a0d8:	0800af24 	.word	0x0800af24
 800a0dc:	0800aef8 	.word	0x0800aef8
 800a0e0:	43800000 	.word	0x43800000
 800a0e4:	3b800000 	.word	0x3b800000
 800a0e8:	00000000 	.word	0x00000000
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a0f2:	1a98      	subs	r0, r3, r2
 800a0f4:	f000 fb22 	bl	800a73c <scalbnf>
 800a0f8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a0e0 <__kernel_rem_pio2f+0x304>
 800a0fc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a104:	db19      	blt.n	800a13a <__kernel_rem_pio2f+0x35e>
 800a106:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a0e4 <__kernel_rem_pio2f+0x308>
 800a10a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a10e:	aa08      	add	r2, sp, #32
 800a110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a114:	1c74      	adds	r4, r6, #1
 800a116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a11a:	3508      	adds	r5, #8
 800a11c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a124:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a128:	ee10 3a10 	vmov	r3, s0
 800a12c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a130:	ee17 3a90 	vmov	r3, s15
 800a134:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a138:	e74b      	b.n	8009fd2 <__kernel_rem_pio2f+0x1f6>
 800a13a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a13e:	aa08      	add	r2, sp, #32
 800a140:	ee10 3a10 	vmov	r3, s0
 800a144:	4634      	mov	r4, r6
 800a146:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a14a:	e742      	b.n	8009fd2 <__kernel_rem_pio2f+0x1f6>
 800a14c:	a808      	add	r0, sp, #32
 800a14e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a152:	9001      	str	r0, [sp, #4]
 800a154:	ee07 0a90 	vmov	s15, r0
 800a158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a15c:	3a01      	subs	r2, #1
 800a15e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a162:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a166:	ed61 7a01 	vstmdb	r1!, {s15}
 800a16a:	e73e      	b.n	8009fea <__kernel_rem_pio2f+0x20e>
 800a16c:	ecfc 6a01 	vldmia	ip!, {s13}
 800a170:	ecb6 7a01 	vldmia	r6!, {s14}
 800a174:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a178:	3001      	adds	r0, #1
 800a17a:	4550      	cmp	r0, sl
 800a17c:	dc01      	bgt.n	800a182 <__kernel_rem_pio2f+0x3a6>
 800a17e:	4288      	cmp	r0, r1
 800a180:	ddf4      	ble.n	800a16c <__kernel_rem_pio2f+0x390>
 800a182:	a858      	add	r0, sp, #352	; 0x160
 800a184:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a188:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a18c:	3a01      	subs	r2, #1
 800a18e:	e730      	b.n	8009ff2 <__kernel_rem_pio2f+0x216>
 800a190:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800a192:	2a02      	cmp	r2, #2
 800a194:	dc09      	bgt.n	800a1aa <__kernel_rem_pio2f+0x3ce>
 800a196:	2a00      	cmp	r2, #0
 800a198:	dc2a      	bgt.n	800a1f0 <__kernel_rem_pio2f+0x414>
 800a19a:	d043      	beq.n	800a224 <__kernel_rem_pio2f+0x448>
 800a19c:	f009 0007 	and.w	r0, r9, #7
 800a1a0:	b059      	add	sp, #356	; 0x164
 800a1a2:	ecbd 8b04 	vpop	{d8-d9}
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d1f5      	bne.n	800a19c <__kernel_rem_pio2f+0x3c0>
 800a1b0:	ab30      	add	r3, sp, #192	; 0xc0
 800a1b2:	442b      	add	r3, r5
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f1a1 0104 	sub.w	r1, r1, #4
 800a1c0:	dc51      	bgt.n	800a266 <__kernel_rem_pio2f+0x48a>
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	2901      	cmp	r1, #1
 800a1c6:	f1a2 0204 	sub.w	r2, r2, #4
 800a1ca:	dc5c      	bgt.n	800a286 <__kernel_rem_pio2f+0x4aa>
 800a1cc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	2c01      	cmp	r4, #1
 800a1d4:	dc67      	bgt.n	800a2a6 <__kernel_rem_pio2f+0x4ca>
 800a1d6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a1da:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a1de:	2f00      	cmp	r7, #0
 800a1e0:	d167      	bne.n	800a2b2 <__kernel_rem_pio2f+0x4d6>
 800a1e2:	edc8 6a00 	vstr	s13, [r8]
 800a1e6:	ed88 7a01 	vstr	s14, [r8, #4]
 800a1ea:	edc8 7a02 	vstr	s15, [r8, #8]
 800a1ee:	e7d5      	b.n	800a19c <__kernel_rem_pio2f+0x3c0>
 800a1f0:	aa30      	add	r2, sp, #192	; 0xc0
 800a1f2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 800a1f6:	4413      	add	r3, r2
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	da24      	bge.n	800a248 <__kernel_rem_pio2f+0x46c>
 800a1fe:	b34f      	cbz	r7, 800a254 <__kernel_rem_pio2f+0x478>
 800a200:	eef1 7a47 	vneg.f32	s15, s14
 800a204:	edc8 7a00 	vstr	s15, [r8]
 800a208:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a20c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a210:	aa31      	add	r2, sp, #196	; 0xc4
 800a212:	2301      	movs	r3, #1
 800a214:	429c      	cmp	r4, r3
 800a216:	da20      	bge.n	800a25a <__kernel_rem_pio2f+0x47e>
 800a218:	b10f      	cbz	r7, 800a21e <__kernel_rem_pio2f+0x442>
 800a21a:	eef1 7a67 	vneg.f32	s15, s15
 800a21e:	edc8 7a01 	vstr	s15, [r8, #4]
 800a222:	e7bb      	b.n	800a19c <__kernel_rem_pio2f+0x3c0>
 800a224:	aa30      	add	r2, sp, #192	; 0xc0
 800a226:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a0e8 <__kernel_rem_pio2f+0x30c>
 800a22a:	4413      	add	r3, r2
 800a22c:	2c00      	cmp	r4, #0
 800a22e:	da05      	bge.n	800a23c <__kernel_rem_pio2f+0x460>
 800a230:	b10f      	cbz	r7, 800a236 <__kernel_rem_pio2f+0x45a>
 800a232:	eef1 7a67 	vneg.f32	s15, s15
 800a236:	edc8 7a00 	vstr	s15, [r8]
 800a23a:	e7af      	b.n	800a19c <__kernel_rem_pio2f+0x3c0>
 800a23c:	ed33 7a01 	vldmdb	r3!, {s14}
 800a240:	3c01      	subs	r4, #1
 800a242:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a246:	e7f1      	b.n	800a22c <__kernel_rem_pio2f+0x450>
 800a248:	ed73 7a01 	vldmdb	r3!, {s15}
 800a24c:	3a01      	subs	r2, #1
 800a24e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a252:	e7d2      	b.n	800a1fa <__kernel_rem_pio2f+0x41e>
 800a254:	eef0 7a47 	vmov.f32	s15, s14
 800a258:	e7d4      	b.n	800a204 <__kernel_rem_pio2f+0x428>
 800a25a:	ecb2 7a01 	vldmia	r2!, {s14}
 800a25e:	3301      	adds	r3, #1
 800a260:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a264:	e7d6      	b.n	800a214 <__kernel_rem_pio2f+0x438>
 800a266:	edd1 7a00 	vldr	s15, [r1]
 800a26a:	edd1 6a01 	vldr	s13, [r1, #4]
 800a26e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a272:	3801      	subs	r0, #1
 800a274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a278:	ed81 7a00 	vstr	s14, [r1]
 800a27c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a280:	edc1 7a01 	vstr	s15, [r1, #4]
 800a284:	e799      	b.n	800a1ba <__kernel_rem_pio2f+0x3de>
 800a286:	edd2 7a00 	vldr	s15, [r2]
 800a28a:	edd2 6a01 	vldr	s13, [r2, #4]
 800a28e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a292:	3901      	subs	r1, #1
 800a294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a298:	ed82 7a00 	vstr	s14, [r2]
 800a29c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a0:	edc2 7a01 	vstr	s15, [r2, #4]
 800a2a4:	e78e      	b.n	800a1c4 <__kernel_rem_pio2f+0x3e8>
 800a2a6:	ed33 7a01 	vldmdb	r3!, {s14}
 800a2aa:	3c01      	subs	r4, #1
 800a2ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2b0:	e78f      	b.n	800a1d2 <__kernel_rem_pio2f+0x3f6>
 800a2b2:	eef1 6a66 	vneg.f32	s13, s13
 800a2b6:	eeb1 7a47 	vneg.f32	s14, s14
 800a2ba:	edc8 6a00 	vstr	s13, [r8]
 800a2be:	ed88 7a01 	vstr	s14, [r8, #4]
 800a2c2:	eef1 7a67 	vneg.f32	s15, s15
 800a2c6:	e790      	b.n	800a1ea <__kernel_rem_pio2f+0x40e>

0800a2c8 <__kernel_sinf>:
 800a2c8:	ee10 3a10 	vmov	r3, s0
 800a2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a2d4:	da04      	bge.n	800a2e0 <__kernel_sinf+0x18>
 800a2d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a2da:	ee17 3a90 	vmov	r3, s15
 800a2de:	b35b      	cbz	r3, 800a338 <__kernel_sinf+0x70>
 800a2e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a2e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a33c <__kernel_sinf+0x74>
 800a2e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a340 <__kernel_sinf+0x78>
 800a2ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a2f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a344 <__kernel_sinf+0x7c>
 800a2f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a2f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a348 <__kernel_sinf+0x80>
 800a2fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a300:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a34c <__kernel_sinf+0x84>
 800a304:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a308:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a30c:	b930      	cbnz	r0, 800a31c <__kernel_sinf+0x54>
 800a30e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a350 <__kernel_sinf+0x88>
 800a312:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a316:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a31a:	4770      	bx	lr
 800a31c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a320:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a324:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a328:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a32c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a354 <__kernel_sinf+0x8c>
 800a330:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a334:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	2f2ec9d3 	.word	0x2f2ec9d3
 800a340:	b2d72f34 	.word	0xb2d72f34
 800a344:	3638ef1b 	.word	0x3638ef1b
 800a348:	b9500d01 	.word	0xb9500d01
 800a34c:	3c088889 	.word	0x3c088889
 800a350:	be2aaaab 	.word	0xbe2aaaab
 800a354:	3e2aaaab 	.word	0x3e2aaaab

0800a358 <atan>:
 800a358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	ec55 4b10 	vmov	r4, r5, d0
 800a360:	4bc3      	ldr	r3, [pc, #780]	; (800a670 <atan+0x318>)
 800a362:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a366:	429e      	cmp	r6, r3
 800a368:	46ab      	mov	fp, r5
 800a36a:	dd18      	ble.n	800a39e <atan+0x46>
 800a36c:	4bc1      	ldr	r3, [pc, #772]	; (800a674 <atan+0x31c>)
 800a36e:	429e      	cmp	r6, r3
 800a370:	dc01      	bgt.n	800a376 <atan+0x1e>
 800a372:	d109      	bne.n	800a388 <atan+0x30>
 800a374:	b144      	cbz	r4, 800a388 <atan+0x30>
 800a376:	4622      	mov	r2, r4
 800a378:	462b      	mov	r3, r5
 800a37a:	4620      	mov	r0, r4
 800a37c:	4629      	mov	r1, r5
 800a37e:	f7f5 ff7d 	bl	800027c <__adddf3>
 800a382:	4604      	mov	r4, r0
 800a384:	460d      	mov	r5, r1
 800a386:	e006      	b.n	800a396 <atan+0x3e>
 800a388:	f1bb 0f00 	cmp.w	fp, #0
 800a38c:	f300 8131 	bgt.w	800a5f2 <atan+0x29a>
 800a390:	a59b      	add	r5, pc, #620	; (adr r5, 800a600 <atan+0x2a8>)
 800a392:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a396:	ec45 4b10 	vmov	d0, r4, r5
 800a39a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	4bb6      	ldr	r3, [pc, #728]	; (800a678 <atan+0x320>)
 800a3a0:	429e      	cmp	r6, r3
 800a3a2:	dc14      	bgt.n	800a3ce <atan+0x76>
 800a3a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a3a8:	429e      	cmp	r6, r3
 800a3aa:	dc0d      	bgt.n	800a3c8 <atan+0x70>
 800a3ac:	a396      	add	r3, pc, #600	; (adr r3, 800a608 <atan+0x2b0>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	ee10 0a10 	vmov	r0, s0
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f5 ff60 	bl	800027c <__adddf3>
 800a3bc:	4baf      	ldr	r3, [pc, #700]	; (800a67c <atan+0x324>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f7f6 fba2 	bl	8000b08 <__aeabi_dcmpgt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d1e6      	bne.n	800a396 <atan+0x3e>
 800a3c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a3cc:	e02b      	b.n	800a426 <atan+0xce>
 800a3ce:	f000 f963 	bl	800a698 <fabs>
 800a3d2:	4bab      	ldr	r3, [pc, #684]	; (800a680 <atan+0x328>)
 800a3d4:	429e      	cmp	r6, r3
 800a3d6:	ec55 4b10 	vmov	r4, r5, d0
 800a3da:	f300 80bf 	bgt.w	800a55c <atan+0x204>
 800a3de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a3e2:	429e      	cmp	r6, r3
 800a3e4:	f300 80a0 	bgt.w	800a528 <atan+0x1d0>
 800a3e8:	ee10 2a10 	vmov	r2, s0
 800a3ec:	ee10 0a10 	vmov	r0, s0
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f7f5 ff42 	bl	800027c <__adddf3>
 800a3f8:	4ba0      	ldr	r3, [pc, #640]	; (800a67c <atan+0x324>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f7f5 ff3c 	bl	8000278 <__aeabi_dsub>
 800a400:	2200      	movs	r2, #0
 800a402:	4606      	mov	r6, r0
 800a404:	460f      	mov	r7, r1
 800a406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a40a:	4620      	mov	r0, r4
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7f5 ff35 	bl	800027c <__adddf3>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 fa0f 	bl	800083c <__aeabi_ddiv>
 800a41e:	f04f 0a00 	mov.w	sl, #0
 800a422:	4604      	mov	r4, r0
 800a424:	460d      	mov	r5, r1
 800a426:	4622      	mov	r2, r4
 800a428:	462b      	mov	r3, r5
 800a42a:	4620      	mov	r0, r4
 800a42c:	4629      	mov	r1, r5
 800a42e:	f7f6 f8db 	bl	80005e8 <__aeabi_dmul>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4680      	mov	r8, r0
 800a438:	4689      	mov	r9, r1
 800a43a:	f7f6 f8d5 	bl	80005e8 <__aeabi_dmul>
 800a43e:	a374      	add	r3, pc, #464	; (adr r3, 800a610 <atan+0x2b8>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	4606      	mov	r6, r0
 800a446:	460f      	mov	r7, r1
 800a448:	f7f6 f8ce 	bl	80005e8 <__aeabi_dmul>
 800a44c:	a372      	add	r3, pc, #456	; (adr r3, 800a618 <atan+0x2c0>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f7f5 ff13 	bl	800027c <__adddf3>
 800a456:	4632      	mov	r2, r6
 800a458:	463b      	mov	r3, r7
 800a45a:	f7f6 f8c5 	bl	80005e8 <__aeabi_dmul>
 800a45e:	a370      	add	r3, pc, #448	; (adr r3, 800a620 <atan+0x2c8>)
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	f7f5 ff0a 	bl	800027c <__adddf3>
 800a468:	4632      	mov	r2, r6
 800a46a:	463b      	mov	r3, r7
 800a46c:	f7f6 f8bc 	bl	80005e8 <__aeabi_dmul>
 800a470:	a36d      	add	r3, pc, #436	; (adr r3, 800a628 <atan+0x2d0>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f5 ff01 	bl	800027c <__adddf3>
 800a47a:	4632      	mov	r2, r6
 800a47c:	463b      	mov	r3, r7
 800a47e:	f7f6 f8b3 	bl	80005e8 <__aeabi_dmul>
 800a482:	a36b      	add	r3, pc, #428	; (adr r3, 800a630 <atan+0x2d8>)
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f7f5 fef8 	bl	800027c <__adddf3>
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	f7f6 f8aa 	bl	80005e8 <__aeabi_dmul>
 800a494:	a368      	add	r3, pc, #416	; (adr r3, 800a638 <atan+0x2e0>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	f7f5 feef 	bl	800027c <__adddf3>
 800a49e:	4642      	mov	r2, r8
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	f7f6 f8a1 	bl	80005e8 <__aeabi_dmul>
 800a4a6:	a366      	add	r3, pc, #408	; (adr r3, 800a640 <atan+0x2e8>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	4689      	mov	r9, r1
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f6 f898 	bl	80005e8 <__aeabi_dmul>
 800a4b8:	a363      	add	r3, pc, #396	; (adr r3, 800a648 <atan+0x2f0>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f5 fedb 	bl	8000278 <__aeabi_dsub>
 800a4c2:	4632      	mov	r2, r6
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	f7f6 f88f 	bl	80005e8 <__aeabi_dmul>
 800a4ca:	a361      	add	r3, pc, #388	; (adr r3, 800a650 <atan+0x2f8>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f5 fed2 	bl	8000278 <__aeabi_dsub>
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	f7f6 f886 	bl	80005e8 <__aeabi_dmul>
 800a4dc:	a35e      	add	r3, pc, #376	; (adr r3, 800a658 <atan+0x300>)
 800a4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e2:	f7f5 fec9 	bl	8000278 <__aeabi_dsub>
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	f7f6 f87d 	bl	80005e8 <__aeabi_dmul>
 800a4ee:	a35c      	add	r3, pc, #368	; (adr r3, 800a660 <atan+0x308>)
 800a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f4:	f7f5 fec0 	bl	8000278 <__aeabi_dsub>
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	f7f6 f874 	bl	80005e8 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4640      	mov	r0, r8
 800a506:	4649      	mov	r1, r9
 800a508:	f7f5 feb8 	bl	800027c <__adddf3>
 800a50c:	4622      	mov	r2, r4
 800a50e:	462b      	mov	r3, r5
 800a510:	f7f6 f86a 	bl	80005e8 <__aeabi_dmul>
 800a514:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	d14b      	bne.n	800a5b6 <atan+0x25e>
 800a51e:	4620      	mov	r0, r4
 800a520:	4629      	mov	r1, r5
 800a522:	f7f5 fea9 	bl	8000278 <__aeabi_dsub>
 800a526:	e72c      	b.n	800a382 <atan+0x2a>
 800a528:	ee10 0a10 	vmov	r0, s0
 800a52c:	4b53      	ldr	r3, [pc, #332]	; (800a67c <atan+0x324>)
 800a52e:	2200      	movs	r2, #0
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 fea1 	bl	8000278 <__aeabi_dsub>
 800a536:	4b51      	ldr	r3, [pc, #324]	; (800a67c <atan+0x324>)
 800a538:	4606      	mov	r6, r0
 800a53a:	460f      	mov	r7, r1
 800a53c:	2200      	movs	r2, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f5 fe9b 	bl	800027c <__adddf3>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f6 f975 	bl	800083c <__aeabi_ddiv>
 800a552:	f04f 0a01 	mov.w	sl, #1
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	e764      	b.n	800a426 <atan+0xce>
 800a55c:	4b49      	ldr	r3, [pc, #292]	; (800a684 <atan+0x32c>)
 800a55e:	429e      	cmp	r6, r3
 800a560:	da1d      	bge.n	800a59e <atan+0x246>
 800a562:	ee10 0a10 	vmov	r0, s0
 800a566:	4b48      	ldr	r3, [pc, #288]	; (800a688 <atan+0x330>)
 800a568:	2200      	movs	r2, #0
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f5 fe84 	bl	8000278 <__aeabi_dsub>
 800a570:	4b45      	ldr	r3, [pc, #276]	; (800a688 <atan+0x330>)
 800a572:	4606      	mov	r6, r0
 800a574:	460f      	mov	r7, r1
 800a576:	2200      	movs	r2, #0
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f6 f834 	bl	80005e8 <__aeabi_dmul>
 800a580:	4b3e      	ldr	r3, [pc, #248]	; (800a67c <atan+0x324>)
 800a582:	2200      	movs	r2, #0
 800a584:	f7f5 fe7a 	bl	800027c <__adddf3>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7f6 f954 	bl	800083c <__aeabi_ddiv>
 800a594:	f04f 0a02 	mov.w	sl, #2
 800a598:	4604      	mov	r4, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	e743      	b.n	800a426 <atan+0xce>
 800a59e:	462b      	mov	r3, r5
 800a5a0:	ee10 2a10 	vmov	r2, s0
 800a5a4:	4939      	ldr	r1, [pc, #228]	; (800a68c <atan+0x334>)
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	f7f6 f948 	bl	800083c <__aeabi_ddiv>
 800a5ac:	f04f 0a03 	mov.w	sl, #3
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	e737      	b.n	800a426 <atan+0xce>
 800a5b6:	4b36      	ldr	r3, [pc, #216]	; (800a690 <atan+0x338>)
 800a5b8:	4e36      	ldr	r6, [pc, #216]	; (800a694 <atan+0x33c>)
 800a5ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a5be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a5c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a5c6:	f7f5 fe57 	bl	8000278 <__aeabi_dsub>
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	f7f5 fe53 	bl	8000278 <__aeabi_dsub>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a5da:	f7f5 fe4d 	bl	8000278 <__aeabi_dsub>
 800a5de:	f1bb 0f00 	cmp.w	fp, #0
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	f6bf aed6 	bge.w	800a396 <atan+0x3e>
 800a5ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	e6d1      	b.n	800a396 <atan+0x3e>
 800a5f2:	a51d      	add	r5, pc, #116	; (adr r5, 800a668 <atan+0x310>)
 800a5f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a5f8:	e6cd      	b.n	800a396 <atan+0x3e>
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w
 800a600:	54442d18 	.word	0x54442d18
 800a604:	bff921fb 	.word	0xbff921fb
 800a608:	8800759c 	.word	0x8800759c
 800a60c:	7e37e43c 	.word	0x7e37e43c
 800a610:	e322da11 	.word	0xe322da11
 800a614:	3f90ad3a 	.word	0x3f90ad3a
 800a618:	24760deb 	.word	0x24760deb
 800a61c:	3fa97b4b 	.word	0x3fa97b4b
 800a620:	a0d03d51 	.word	0xa0d03d51
 800a624:	3fb10d66 	.word	0x3fb10d66
 800a628:	c54c206e 	.word	0xc54c206e
 800a62c:	3fb745cd 	.word	0x3fb745cd
 800a630:	920083ff 	.word	0x920083ff
 800a634:	3fc24924 	.word	0x3fc24924
 800a638:	5555550d 	.word	0x5555550d
 800a63c:	3fd55555 	.word	0x3fd55555
 800a640:	2c6a6c2f 	.word	0x2c6a6c2f
 800a644:	bfa2b444 	.word	0xbfa2b444
 800a648:	52defd9a 	.word	0x52defd9a
 800a64c:	3fadde2d 	.word	0x3fadde2d
 800a650:	af749a6d 	.word	0xaf749a6d
 800a654:	3fb3b0f2 	.word	0x3fb3b0f2
 800a658:	fe231671 	.word	0xfe231671
 800a65c:	3fbc71c6 	.word	0x3fbc71c6
 800a660:	9998ebc4 	.word	0x9998ebc4
 800a664:	3fc99999 	.word	0x3fc99999
 800a668:	54442d18 	.word	0x54442d18
 800a66c:	3ff921fb 	.word	0x3ff921fb
 800a670:	440fffff 	.word	0x440fffff
 800a674:	7ff00000 	.word	0x7ff00000
 800a678:	3fdbffff 	.word	0x3fdbffff
 800a67c:	3ff00000 	.word	0x3ff00000
 800a680:	3ff2ffff 	.word	0x3ff2ffff
 800a684:	40038000 	.word	0x40038000
 800a688:	3ff80000 	.word	0x3ff80000
 800a68c:	bff00000 	.word	0xbff00000
 800a690:	0800af50 	.word	0x0800af50
 800a694:	0800af30 	.word	0x0800af30

0800a698 <fabs>:
 800a698:	ec51 0b10 	vmov	r0, r1, d0
 800a69c:	ee10 2a10 	vmov	r2, s0
 800a6a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a6a4:	ec43 2b10 	vmov	d0, r2, r3
 800a6a8:	4770      	bx	lr

0800a6aa <fabsf>:
 800a6aa:	ee10 3a10 	vmov	r3, s0
 800a6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6b2:	ee00 3a10 	vmov	s0, r3
 800a6b6:	4770      	bx	lr

0800a6b8 <floorf>:
 800a6b8:	ee10 3a10 	vmov	r3, s0
 800a6bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a6c0:	3a7f      	subs	r2, #127	; 0x7f
 800a6c2:	2a16      	cmp	r2, #22
 800a6c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6c8:	dc2a      	bgt.n	800a720 <floorf+0x68>
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	da11      	bge.n	800a6f2 <floorf+0x3a>
 800a6ce:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a730 <floorf+0x78>
 800a6d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6de:	dd05      	ble.n	800a6ec <floorf+0x34>
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	da23      	bge.n	800a72c <floorf+0x74>
 800a6e4:	4a13      	ldr	r2, [pc, #76]	; (800a734 <floorf+0x7c>)
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	bf18      	it	ne
 800a6ea:	4613      	movne	r3, r2
 800a6ec:	ee00 3a10 	vmov	s0, r3
 800a6f0:	4770      	bx	lr
 800a6f2:	4911      	ldr	r1, [pc, #68]	; (800a738 <floorf+0x80>)
 800a6f4:	4111      	asrs	r1, r2
 800a6f6:	420b      	tst	r3, r1
 800a6f8:	d0fa      	beq.n	800a6f0 <floorf+0x38>
 800a6fa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a730 <floorf+0x78>
 800a6fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a702:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	ddef      	ble.n	800a6ec <floorf+0x34>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfbe      	ittt	lt
 800a710:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a714:	fa40 f202 	asrlt.w	r2, r0, r2
 800a718:	189b      	addlt	r3, r3, r2
 800a71a:	ea23 0301 	bic.w	r3, r3, r1
 800a71e:	e7e5      	b.n	800a6ec <floorf+0x34>
 800a720:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a724:	d3e4      	bcc.n	800a6f0 <floorf+0x38>
 800a726:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a72a:	4770      	bx	lr
 800a72c:	2300      	movs	r3, #0
 800a72e:	e7dd      	b.n	800a6ec <floorf+0x34>
 800a730:	7149f2ca 	.word	0x7149f2ca
 800a734:	bf800000 	.word	0xbf800000
 800a738:	007fffff 	.word	0x007fffff

0800a73c <scalbnf>:
 800a73c:	ee10 3a10 	vmov	r3, s0
 800a740:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a744:	d025      	beq.n	800a792 <scalbnf+0x56>
 800a746:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a74a:	d302      	bcc.n	800a752 <scalbnf+0x16>
 800a74c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a750:	4770      	bx	lr
 800a752:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a756:	d122      	bne.n	800a79e <scalbnf+0x62>
 800a758:	4b2a      	ldr	r3, [pc, #168]	; (800a804 <scalbnf+0xc8>)
 800a75a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a808 <scalbnf+0xcc>
 800a75e:	4298      	cmp	r0, r3
 800a760:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a764:	db16      	blt.n	800a794 <scalbnf+0x58>
 800a766:	ee10 3a10 	vmov	r3, s0
 800a76a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a76e:	3a19      	subs	r2, #25
 800a770:	4402      	add	r2, r0
 800a772:	2afe      	cmp	r2, #254	; 0xfe
 800a774:	dd15      	ble.n	800a7a2 <scalbnf+0x66>
 800a776:	ee10 3a10 	vmov	r3, s0
 800a77a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a80c <scalbnf+0xd0>
 800a77e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a810 <scalbnf+0xd4>
 800a782:	2b00      	cmp	r3, #0
 800a784:	eeb0 7a67 	vmov.f32	s14, s15
 800a788:	bfb8      	it	lt
 800a78a:	eef0 7a66 	vmovlt.f32	s15, s13
 800a78e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a792:	4770      	bx	lr
 800a794:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a814 <scalbnf+0xd8>
 800a798:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a79c:	4770      	bx	lr
 800a79e:	0dd2      	lsrs	r2, r2, #23
 800a7a0:	e7e6      	b.n	800a770 <scalbnf+0x34>
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	dd06      	ble.n	800a7b4 <scalbnf+0x78>
 800a7a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a7ae:	ee00 3a10 	vmov	s0, r3
 800a7b2:	4770      	bx	lr
 800a7b4:	f112 0f16 	cmn.w	r2, #22
 800a7b8:	da1a      	bge.n	800a7f0 <scalbnf+0xb4>
 800a7ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7be:	4298      	cmp	r0, r3
 800a7c0:	ee10 3a10 	vmov	r3, s0
 800a7c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7c8:	dd0a      	ble.n	800a7e0 <scalbnf+0xa4>
 800a7ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a80c <scalbnf+0xd0>
 800a7ce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a810 <scalbnf+0xd4>
 800a7d2:	eef0 7a40 	vmov.f32	s15, s0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	bf18      	it	ne
 800a7da:	eeb0 0a47 	vmovne.f32	s0, s14
 800a7de:	e7db      	b.n	800a798 <scalbnf+0x5c>
 800a7e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a814 <scalbnf+0xd8>
 800a7e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a818 <scalbnf+0xdc>
 800a7e8:	eef0 7a40 	vmov.f32	s15, s0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	e7f3      	b.n	800a7d8 <scalbnf+0x9c>
 800a7f0:	3219      	adds	r2, #25
 800a7f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a7fa:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a81c <scalbnf+0xe0>
 800a7fe:	ee07 3a10 	vmov	s14, r3
 800a802:	e7c4      	b.n	800a78e <scalbnf+0x52>
 800a804:	ffff3cb0 	.word	0xffff3cb0
 800a808:	4c000000 	.word	0x4c000000
 800a80c:	7149f2ca 	.word	0x7149f2ca
 800a810:	f149f2ca 	.word	0xf149f2ca
 800a814:	0da24260 	.word	0x0da24260
 800a818:	8da24260 	.word	0x8da24260
 800a81c:	33000000 	.word	0x33000000

0800a820 <_init>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr

0800a82c <_fini>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr
